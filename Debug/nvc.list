
nvc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caa0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800cc60  0800cc60  0001cc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd24  0800cd24  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800cd24  0800cd24  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cd24  0800cd24  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd24  0800cd24  0001cd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd28  0800cd28  0001cd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800cd2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002128  200001f4  0800cf20  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000231c  0800cf20  0002231c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004bcff  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c52  00000000  00000000  0006bf23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f48  00000000  00000000  00072b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002c60  00000000  00000000  00075ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c6f6  00000000  00000000  00078720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037748  00000000  00000000  000b4e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00154fd1  00000000  00000000  000ec55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0024152f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cd64  00000000  00000000  00241584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800cc48 	.word	0x0800cc48

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	0800cc48 	.word	0x0800cc48

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002a6:	463b      	mov	r3, r7
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
 80002b4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002b6:	4b29      	ldr	r3, [pc, #164]	; (800035c <MX_ADC1_Init+0xbc>)
 80002b8:	4a29      	ldr	r2, [pc, #164]	; (8000360 <MX_ADC1_Init+0xc0>)
 80002ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002bc:	4b27      	ldr	r3, [pc, #156]	; (800035c <MX_ADC1_Init+0xbc>)
 80002be:	2200      	movs	r2, #0
 80002c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002c2:	4b26      	ldr	r3, [pc, #152]	; (800035c <MX_ADC1_Init+0xbc>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c8:	4b24      	ldr	r3, [pc, #144]	; (800035c <MX_ADC1_Init+0xbc>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ce:	4b23      	ldr	r3, [pc, #140]	; (800035c <MX_ADC1_Init+0xbc>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002d4:	4b21      	ldr	r3, [pc, #132]	; (800035c <MX_ADC1_Init+0xbc>)
 80002d6:	2204      	movs	r2, #4
 80002d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002da:	4b20      	ldr	r3, [pc, #128]	; (800035c <MX_ADC1_Init+0xbc>)
 80002dc:	2200      	movs	r2, #0
 80002de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002e0:	4b1e      	ldr	r3, [pc, #120]	; (800035c <MX_ADC1_Init+0xbc>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80002e6:	4b1d      	ldr	r3, [pc, #116]	; (800035c <MX_ADC1_Init+0xbc>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ec:	4b1b      	ldr	r3, [pc, #108]	; (800035c <MX_ADC1_Init+0xbc>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f4:	4b19      	ldr	r3, [pc, #100]	; (800035c <MX_ADC1_Init+0xbc>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002fa:	4b18      	ldr	r3, [pc, #96]	; (800035c <MX_ADC1_Init+0xbc>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000300:	4b16      	ldr	r3, [pc, #88]	; (800035c <MX_ADC1_Init+0xbc>)
 8000302:	2200      	movs	r2, #0
 8000304:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000308:	4b14      	ldr	r3, [pc, #80]	; (800035c <MX_ADC1_Init+0xbc>)
 800030a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800030e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <MX_ADC1_Init+0xbc>)
 8000312:	2200      	movs	r2, #0
 8000314:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000318:	4810      	ldr	r0, [pc, #64]	; (800035c <MX_ADC1_Init+0xbc>)
 800031a:	f001 fb91 	bl	8001a40 <HAL_ADC_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000324:	f000 fd30 	bl	8000d88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000328:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_ADC1_Init+0xc4>)
 800032a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800032c:	2306      	movs	r3, #6
 800032e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000330:	2302      	movs	r3, #2
 8000332:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000334:	237f      	movs	r3, #127	; 0x7f
 8000336:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000338:	2304      	movs	r3, #4
 800033a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000340:	463b      	mov	r3, r7
 8000342:	4619      	mov	r1, r3
 8000344:	4805      	ldr	r0, [pc, #20]	; (800035c <MX_ADC1_Init+0xbc>)
 8000346:	f001 fcc7 	bl	8001cd8 <HAL_ADC_ConfigChannel>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000350:	f000 fd1a 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000354:	bf00      	nop
 8000356:	3718      	adds	r7, #24
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	2000046c 	.word	0x2000046c
 8000360:	50040000 	.word	0x50040000
 8000364:	21800100 	.word	0x21800100

08000368 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b0b2      	sub	sp, #200	; 0xc8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000370:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
 800037e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000380:	f107 0318 	add.w	r3, r7, #24
 8000384:	229c      	movs	r2, #156	; 0x9c
 8000386:	2100      	movs	r1, #0
 8000388:	4618      	mov	r0, r3
 800038a:	f00c f827 	bl	800c3dc <memset>
  if(adcHandle->Instance==ADC1)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a35      	ldr	r2, [pc, #212]	; (8000468 <HAL_ADC_MspInit+0x100>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d162      	bne.n	800045e <HAL_ADC_MspInit+0xf6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000398:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800039c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800039e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80003a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80003a6:	2303      	movs	r3, #3
 80003a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 80003aa:	2305      	movs	r3, #5
 80003ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 80003ae:	2360      	movs	r3, #96	; 0x60
 80003b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80003b2:	2302      	movs	r3, #2
 80003b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80003b6:	2304      	movs	r3, #4
 80003b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80003ba:	2304      	movs	r3, #4
 80003bc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80003be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80003c2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c4:	f107 0318 	add.w	r3, r7, #24
 80003c8:	4618      	mov	r0, r3
 80003ca:	f005 f9a3 	bl	8005714 <HAL_RCCEx_PeriphCLKConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80003d4:	f000 fcd8 	bl	8000d88 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80003d8:	4b24      	ldr	r3, [pc, #144]	; (800046c <HAL_ADC_MspInit+0x104>)
 80003da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003dc:	4a23      	ldr	r2, [pc, #140]	; (800046c <HAL_ADC_MspInit+0x104>)
 80003de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e4:	4b21      	ldr	r3, [pc, #132]	; (800046c <HAL_ADC_MspInit+0x104>)
 80003e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003ec:	617b      	str	r3, [r7, #20]
 80003ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f0:	4b1e      	ldr	r3, [pc, #120]	; (800046c <HAL_ADC_MspInit+0x104>)
 80003f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f4:	4a1d      	ldr	r2, [pc, #116]	; (800046c <HAL_ADC_MspInit+0x104>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <HAL_ADC_MspInit+0x104>)
 80003fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	613b      	str	r3, [r7, #16]
 8000406:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <HAL_ADC_MspInit+0x104>)
 800040a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040c:	4a17      	ldr	r2, [pc, #92]	; (800046c <HAL_ADC_MspInit+0x104>)
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000414:	4b15      	ldr	r3, [pc, #84]	; (800046c <HAL_ADC_MspInit+0x104>)
 8000416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000418:	f003 0301 	and.w	r3, r3, #1
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AN_VBATT_Pin;
 8000420:	2310      	movs	r3, #16
 8000422:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000426:	230b      	movs	r3, #11
 8000428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AN_VBATT_GPIO_Port, &GPIO_InitStruct);
 8000432:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000436:	4619      	mov	r1, r3
 8000438:	480d      	ldr	r0, [pc, #52]	; (8000470 <HAL_ADC_MspInit+0x108>)
 800043a:	f002 fd41 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 800043e:	2308      	movs	r3, #8
 8000440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000444:	230b      	movs	r3, #11
 8000446:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 8000450:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000454:	4619      	mov	r1, r3
 8000456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800045a:	f002 fd31 	bl	8002ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800045e:	bf00      	nop
 8000460:	37c8      	adds	r7, #200	; 0xc8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	50040000 	.word	0x50040000
 800046c:	40021000 	.word	0x40021000
 8000470:	48000800 	.word	0x48000800

08000474 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel0;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000478:	4b2c      	ldr	r3, [pc, #176]	; (800052c <MX_DFSDM1_Init+0xb8>)
 800047a:	4a2d      	ldr	r2, [pc, #180]	; (8000530 <MX_DFSDM1_Init+0xbc>)
 800047c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800047e:	4b2b      	ldr	r3, [pc, #172]	; (800052c <MX_DFSDM1_Init+0xb8>)
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000484:	4b29      	ldr	r3, [pc, #164]	; (800052c <MX_DFSDM1_Init+0xb8>)
 8000486:	2201      	movs	r2, #1
 8000488:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800048a:	4b28      	ldr	r3, [pc, #160]	; (800052c <MX_DFSDM1_Init+0xb8>)
 800048c:	2201      	movs	r2, #1
 800048e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 8000490:	4b26      	ldr	r3, [pc, #152]	; (800052c <MX_DFSDM1_Init+0xb8>)
 8000492:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000496:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 192;
 8000498:	4b24      	ldr	r3, [pc, #144]	; (800052c <MX_DFSDM1_Init+0xb8>)
 800049a:	22c0      	movs	r2, #192	; 0xc0
 800049c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800049e:	4b23      	ldr	r3, [pc, #140]	; (800052c <MX_DFSDM1_Init+0xb8>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80004a4:	4821      	ldr	r0, [pc, #132]	; (800052c <MX_DFSDM1_Init+0xb8>)
 80004a6:	f002 f9e5 	bl	8002874 <HAL_DFSDM_FilterInit>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80004b0:	f000 fc6a 	bl	8000d88 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80004b4:	4b1f      	ldr	r3, [pc, #124]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004b6:	4a20      	ldr	r2, [pc, #128]	; (8000538 <MX_DFSDM1_Init+0xc4>)
 80004b8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80004ba:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004bc:	2200      	movs	r2, #0
 80004be:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80004c0:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80004c6:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004c8:	2202      	movs	r2, #2
 80004ca:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_ADC_OUTPUT;
 80004cc:	4b19      	ldr	r3, [pc, #100]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004d2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80004d4:	4b17      	ldr	r3, [pc, #92]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 80004f8:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 7;
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 8000500:	2207      	movs	r2, #7
 8000502:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000504:	480b      	ldr	r0, [pc, #44]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 8000506:	f002 f8f5 	bl	80026f4 <HAL_DFSDM_ChannelInit>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 8000510:	f000 fc3a 	bl	8000d88 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000514:	2201      	movs	r2, #1
 8000516:	2101      	movs	r1, #1
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <MX_DFSDM1_Init+0xb8>)
 800051a:	f002 fa85 	bl	8002a28 <HAL_DFSDM_FilterConfigRegChannel>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 8000524:	f000 fc30 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200004d4 	.word	0x200004d4
 8000530:	40016100 	.word	0x40016100
 8000534:	20000588 	.word	0x20000588
 8000538:	40016000 	.word	0x40016000

0800053c <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b0aa      	sub	sp, #168	; 0xa8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	229c      	movs	r2, #156	; 0x9c
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f00b ff45 	bl	800c3dc <memset>
  if(DFSDM1_Init == 0)
 8000552:	4b34      	ldr	r3, [pc, #208]	; (8000624 <HAL_DFSDM_FilterMspInit+0xe8>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d129      	bne.n	80005ae <HAL_DFSDM_FilterMspInit+0x72>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800055a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055e:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000560:	2300      	movs	r3, #0
 8000562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	4618      	mov	r0, r3
 800056c:	f005 f8d2 	bl	8005714 <HAL_RCCEx_PeriphCLKConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <HAL_DFSDM_FilterMspInit+0x3e>
    {
      Error_Handler();
 8000576:	f000 fc07 	bl	8000d88 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800057a:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <HAL_DFSDM_FilterMspInit+0xec>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	4a29      	ldr	r2, [pc, #164]	; (8000628 <HAL_DFSDM_FilterMspInit+0xec>)
 8000582:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <HAL_DFSDM_FilterMspInit+0xec>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d10b      	bne.n	80005a4 <HAL_DFSDM_FilterMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800058c:	4b27      	ldr	r3, [pc, #156]	; (800062c <HAL_DFSDM_FilterMspInit+0xf0>)
 800058e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000590:	4a26      	ldr	r2, [pc, #152]	; (800062c <HAL_DFSDM_FilterMspInit+0xf0>)
 8000592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000596:	6613      	str	r3, [r2, #96]	; 0x60
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <HAL_DFSDM_FilterMspInit+0xf0>)
 800059a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800059c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <HAL_DFSDM_FilterMspInit+0xe8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	4a1e      	ldr	r2, [pc, #120]	; (8000624 <HAL_DFSDM_FilterMspInit+0xe8>)
 80005ac:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <HAL_DFSDM_FilterMspInit+0xf4>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d131      	bne.n	800061c <HAL_DFSDM_FilterMspInit+0xe0>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <HAL_DFSDM_FilterMspInit+0xf8>)
 80005ba:	4a1f      	ldr	r2, [pc, #124]	; (8000638 <HAL_DFSDM_FilterMspInit+0xfc>)
 80005bc:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <HAL_DFSDM_FilterMspInit+0xf8>)
 80005c0:	2256      	movs	r2, #86	; 0x56
 80005c2:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <HAL_DFSDM_FilterMspInit+0xf8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <HAL_DFSDM_FilterMspInit+0xf8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <HAL_DFSDM_FilterMspInit+0xf8>)
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <HAL_DFSDM_FilterMspInit+0xf8>)
 80005d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005dc:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <HAL_DFSDM_FilterMspInit+0xf8>)
 80005e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005e4:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80005e6:	4b13      	ldr	r3, [pc, #76]	; (8000634 <HAL_DFSDM_FilterMspInit+0xf8>)
 80005e8:	2220      	movs	r2, #32
 80005ea:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <HAL_DFSDM_FilterMspInit+0xf8>)
 80005ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80005f4:	480f      	ldr	r0, [pc, #60]	; (8000634 <HAL_DFSDM_FilterMspInit+0xf8>)
 80005f6:	f002 faa9 	bl	8002b4c <HAL_DMA_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <HAL_DFSDM_FilterMspInit+0xc8>
    {
      Error_Handler();
 8000600:	f000 fbc2 	bl	8000d88 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <HAL_DFSDM_FilterMspInit+0xf8>)
 8000608:	62da      	str	r2, [r3, #44]	; 0x2c
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <HAL_DFSDM_FilterMspInit+0xf8>)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a08      	ldr	r2, [pc, #32]	; (8000634 <HAL_DFSDM_FilterMspInit+0xf8>)
 8000614:	629a      	str	r2, [r3, #40]	; 0x28
 8000616:	4a07      	ldr	r2, [pc, #28]	; (8000634 <HAL_DFSDM_FilterMspInit+0xf8>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800061c:	bf00      	nop
 800061e:	37a8      	adds	r7, #168	; 0xa8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000214 	.word	0x20000214
 8000628:	20000210 	.word	0x20000210
 800062c:	40021000 	.word	0x40021000
 8000630:	40016100 	.word	0x40016100
 8000634:	20000528 	.word	0x20000528
 8000638:	40020044 	.word	0x40020044

0800063c <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b0aa      	sub	sp, #168	; 0xa8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	229c      	movs	r2, #156	; 0x9c
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f00b fec5 	bl	800c3dc <memset>
  if(DFSDM1_Init == 0)
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d129      	bne.n	80006ae <HAL_DFSDM_ChannelMspInit+0x72>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800065a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065e:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000660:	2300      	movs	r3, #0
 8000662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	4618      	mov	r0, r3
 800066c:	f005 f852 	bl	8005714 <HAL_RCCEx_PeriphCLKConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <HAL_DFSDM_ChannelMspInit+0x3e>
    {
      Error_Handler();
 8000676:	f000 fb87 	bl	8000d88 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <HAL_DFSDM_ChannelMspInit+0x80>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	3301      	adds	r3, #1
 8000680:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <HAL_DFSDM_ChannelMspInit+0x80>)
 8000682:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <HAL_DFSDM_ChannelMspInit+0x80>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d10b      	bne.n	80006a4 <HAL_DFSDM_ChannelMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_DFSDM_ChannelMspInit+0x84>)
 800068e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000690:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000696:	6613      	str	r3, [r2, #96]	; 0x60
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <HAL_DFSDM_ChannelMspInit+0x84>)
 800069a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800069c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <HAL_DFSDM_ChannelMspInit+0x7c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <HAL_DFSDM_ChannelMspInit+0x7c>)
 80006ac:	6013      	str	r3, [r2, #0]
  }
}
 80006ae:	bf00      	nop
 80006b0:	37a8      	adds	r7, #168	; 0xa8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000214 	.word	0x20000214
 80006bc:	20000210 	.word	0x20000210
 80006c0:	40021000 	.word	0x40021000

080006c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_DMA_Init+0x50>)
 80006cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ce:	4a11      	ldr	r2, [pc, #68]	; (8000714 <MX_DMA_Init+0x50>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6493      	str	r3, [r2, #72]	; 0x48
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_DMA_Init+0x50>)
 80006d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_DMA_Init+0x50>)
 80006e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006e6:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <MX_DMA_Init+0x50>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6493      	str	r3, [r2, #72]	; 0x48
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_DMA_Init+0x50>)
 80006f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	200e      	movs	r0, #14
 8000700:	f001 ffc1 	bl	8002686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000704:	200e      	movs	r0, #14
 8000706:	f001 ffda 	bl	80026be <HAL_NVIC_EnableIRQ>

}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000

08000718 <MX_GPIO_Init>:
/** Configure pins
     PD6   ------> USART2_RX
     PD5   ------> USART2_TX
*/
void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08e      	sub	sp, #56	; 0x38
 800071c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	4ba9      	ldr	r3, [pc, #676]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4aa8      	ldr	r2, [pc, #672]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4ba6      	ldr	r3, [pc, #664]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	623b      	str	r3, [r7, #32]
 8000744:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000746:	4ba3      	ldr	r3, [pc, #652]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4aa2      	ldr	r2, [pc, #648]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4ba0      	ldr	r3, [pc, #640]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	61fb      	str	r3, [r7, #28]
 800075c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b9d      	ldr	r3, [pc, #628]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a9c      	ldr	r2, [pc, #624]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b9a      	ldr	r3, [pc, #616]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000776:	4b97      	ldr	r3, [pc, #604]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a96      	ldr	r2, [pc, #600]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b94      	ldr	r3, [pc, #592]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0310 	and.w	r3, r3, #16
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b91      	ldr	r3, [pc, #580]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a90      	ldr	r2, [pc, #576]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b8e      	ldr	r3, [pc, #568]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a6:	4b8b      	ldr	r3, [pc, #556]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a8a      	ldr	r2, [pc, #552]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b88      	ldr	r3, [pc, #544]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007be:	4b85      	ldr	r3, [pc, #532]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a84      	ldr	r2, [pc, #528]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 80007c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b82      	ldr	r3, [pc, #520]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80007d6:	f004 f8e7 	bl	80049a8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	4b7e      	ldr	r3, [pc, #504]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a7d      	ldr	r2, [pc, #500]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b7b      	ldr	r3, [pc, #492]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS2MDL_GPIO_Port, CS_LIS2MDL_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f002 fcf2 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SD_SEL_Pin|SD_EN_Pin|CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin
 8000800:	2201      	movs	r2, #1
 8000802:	f641 4130 	movw	r1, #7216	; 0x1c30
 8000806:	4874      	ldr	r0, [pc, #464]	; (80009d8 <MX_GPIO_Init+0x2c0>)
 8000808:	f002 fcec 	bl	80031e4 <HAL_GPIO_WritePin>
                          |CS_LSM6DSOX_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USER_LED_Pin|BB_MODE_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2105      	movs	r1, #5
 8000810:	4872      	ldr	r0, [pc, #456]	; (80009dc <MX_GPIO_Init+0x2c4>)
 8000812:	f002 fce7 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHG_LED2_GPIO_Port, CHG_LED2_Pin, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081c:	4870      	ldr	r0, [pc, #448]	; (80009e0 <MX_GPIO_Init+0x2c8>)
 800081e:	f002 fce1 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_2V7_EN_GPIO_Port, LDO_2V7_EN_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	486d      	ldr	r0, [pc, #436]	; (80009dc <MX_GPIO_Init+0x2c4>)
 8000828:	f002 fcdc 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_SEL_GPIO_Port, SW_SEL_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2110      	movs	r1, #16
 8000830:	486b      	ldr	r0, [pc, #428]	; (80009e0 <MX_GPIO_Init+0x2c8>)
 8000832:	f002 fcd7 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_LED_GPIO_Port, CPU_LED_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800083c:	4869      	ldr	r0, [pc, #420]	; (80009e4 <MX_GPIO_Init+0x2cc>)
 800083e:	f002 fcd1 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = INT2_LSM6DSOX_Pin|INT2_IIS3DHHC_Pin;
 8000842:	2348      	movs	r3, #72	; 0x48
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000846:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000854:	4619      	mov	r1, r3
 8000856:	4860      	ldr	r0, [pc, #384]	; (80009d8 <MX_GPIO_Init+0x2c0>)
 8000858:	f002 fb32 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 800085c:	2360      	movs	r3, #96	; 0x60
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800086c:	2307      	movs	r3, #7
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000874:	4619      	mov	r1, r3
 8000876:	485c      	ldr	r0, [pc, #368]	; (80009e8 <MX_GPIO_Init+0x2d0>)
 8000878:	f002 fb22 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_LIS2MDL_Pin;
 800087c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000882:	2311      	movs	r3, #17
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_LIS2MDL_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000892:	4619      	mov	r1, r3
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f002 fb12 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SD_SEL_Pin|SD_EN_Pin;
 800089c:	2330      	movs	r3, #48	; 0x30
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b0:	4619      	mov	r1, r3
 80008b2:	4849      	ldr	r0, [pc, #292]	; (80009d8 <MX_GPIO_Init+0x2c0>)
 80008b4:	f002 fb04 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = USER_LED_Pin|BB_MODE_Pin|LDO_2V7_EN_Pin;
 80008b8:	2385      	movs	r3, #133	; 0x85
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008cc:	4619      	mov	r1, r3
 80008ce:	4843      	ldr	r0, [pc, #268]	; (80009dc <MX_GPIO_Init+0x2c4>)
 80008d0:	f002 faf6 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = CHG_LED2_Pin|SW_SEL_Pin;
 80008d4:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	4619      	mov	r1, r3
 80008ec:	483c      	ldr	r0, [pc, #240]	; (80009e0 <MX_GPIO_Init+0x2c8>)
 80008ee:	f002 fae7 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHG_LED_Pin;
 80008f2:	2308      	movs	r3, #8
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHG_LED_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	4836      	ldr	r0, [pc, #216]	; (80009e0 <MX_GPIO_Init+0x2c8>)
 8000906:	f002 fadb 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = INT_LPS22HH_Pin|INT2_LIS2DW12_Pin|INT_HTS221_Pin;
 800090a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000910:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	4619      	mov	r1, r3
 8000920:	4831      	ldr	r0, [pc, #196]	; (80009e8 <MX_GPIO_Init+0x2d0>)
 8000922:	f002 facd 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin|CS_LSM6DSOX_Pin;
 8000926:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800092c:	2311      	movs	r3, #17
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	4826      	ldr	r0, [pc, #152]	; (80009d8 <MX_GPIO_Init+0x2c0>)
 8000940:	f002 fabe 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CPU_LED_Pin;
 8000944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CPU_LED_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095a:	4619      	mov	r1, r3
 800095c:	4821      	ldr	r0, [pc, #132]	; (80009e4 <MX_GPIO_Init+0x2cc>)
 800095e:	f002 faaf 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT1_LIS2DW12_Pin;
 8000962:	2320      	movs	r3, #32
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000966:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LIS2DW12_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	481d      	ldr	r0, [pc, #116]	; (80009ec <MX_GPIO_Init+0x2d4>)
 8000978:	f002 faa2 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT1_LSM6DSOX_Pin;
 800097c:	2304      	movs	r3, #4
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000980:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LSM6DSOX_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000994:	f002 fa94 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <MX_GPIO_Init+0x2cc>)
 80009ae:	f002 fa87 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_PB1_Pin;
 80009b2:	2302      	movs	r3, #2
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_PB1_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <MX_GPIO_Init+0x2c8>)
 80009c8:	f002 fa7a 	bl	8002ec0 <HAL_GPIO_Init>

}
 80009cc:	bf00      	nop
 80009ce:	3738      	adds	r7, #56	; 0x38
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48001000 	.word	0x48001000
 80009dc:	48001400 	.word	0x48001400
 80009e0:	48001800 	.word	0x48001800
 80009e4:	48000400 	.word	0x48000400
 80009e8:	48000c00 	.word	0x48000c00
 80009ec:	48000800 	.word	0x48000800

080009f0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_I2C1_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <MX_I2C1_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_I2C1_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_I2C1_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a2c:	f002 fbf2 	bl	8003214 <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 f9a7 	bl	8000d88 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a3e:	f002 fc78 	bl	8003332 <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 f99e 	bl	8000d88 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a50:	f002 fcba 	bl	80033c8 <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 f995 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000614 	.word	0x20000614
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	00b03fdb 	.word	0x00b03fdb

08000a70 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_I2C3_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <MX_I2C3_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_I2C3_Init+0x74>)
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <MX_I2C3_Init+0x7c>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_I2C3_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_I2C3_Init+0x74>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_I2C3_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_I2C3_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_I2C3_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_I2C3_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_I2C3_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000aaa:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <MX_I2C3_Init+0x74>)
 8000aac:	f002 fbb2 	bl	8003214 <HAL_I2C_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 f967 	bl	8000d88 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <MX_I2C3_Init+0x74>)
 8000abe:	f002 fc38 	bl	8003332 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 f95e 	bl	8000d88 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_I2C3_Init+0x74>)
 8000ad0:	f002 fc7a 	bl	80033c8 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 f955 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200005c0 	.word	0x200005c0
 8000ae8:	40005c00 	.word	0x40005c00
 8000aec:	00b03fdb 	.word	0x00b03fdb

08000af0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0b2      	sub	sp, #200	; 0xc8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	f107 0318 	add.w	r3, r7, #24
 8000b0c:	229c      	movs	r2, #156	; 0x9c
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f00b fc63 	bl	800c3dc <memset>
  if(i2cHandle->Instance==I2C1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a43      	ldr	r2, [pc, #268]	; (8000c28 <HAL_I2C_MspInit+0x138>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d13b      	bne.n	8000b98 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b20:	2340      	movs	r3, #64	; 0x40
 8000b22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b28:	f107 0318 	add.w	r3, r7, #24
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f004 fdf1 	bl	8005714 <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b38:	f000 f926 	bl	8000d88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3c:	4b3b      	ldr	r3, [pc, #236]	; (8000c2c <HAL_I2C_MspInit+0x13c>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b40:	4a3a      	ldr	r2, [pc, #232]	; (8000c2c <HAL_I2C_MspInit+0x13c>)
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b48:	4b38      	ldr	r3, [pc, #224]	; (8000c2c <HAL_I2C_MspInit+0x13c>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8000b54:	23c0      	movs	r3, #192	; 0xc0
 8000b56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b5a:	2312      	movs	r3, #18
 8000b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000b76:	4619      	mov	r1, r3
 8000b78:	482d      	ldr	r0, [pc, #180]	; (8000c30 <HAL_I2C_MspInit+0x140>)
 8000b7a:	f002 f9a1 	bl	8002ec0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b7e:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <HAL_I2C_MspInit+0x13c>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b82:	4a2a      	ldr	r2, [pc, #168]	; (8000c2c <HAL_I2C_MspInit+0x13c>)
 8000b84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b88:	6593      	str	r3, [r2, #88]	; 0x58
 8000b8a:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <HAL_I2C_MspInit+0x13c>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b96:	e043      	b.n	8000c20 <HAL_I2C_MspInit+0x130>
  else if(i2cHandle->Instance==I2C3)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a25      	ldr	r2, [pc, #148]	; (8000c34 <HAL_I2C_MspInit+0x144>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d13e      	bne.n	8000c20 <HAL_I2C_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bac:	f107 0318 	add.w	r3, r7, #24
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f004 fdaf 	bl	8005714 <HAL_RCCEx_PeriphCLKConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8000bbc:	f000 f8e4 	bl	8000d88 <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <HAL_I2C_MspInit+0x13c>)
 8000bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc4:	4a19      	ldr	r2, [pc, #100]	; (8000c2c <HAL_I2C_MspInit+0x13c>)
 8000bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_I2C_MspInit+0x13c>)
 8000bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000bd8:	f003 fee6 	bl	80049a8 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8000bdc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000be0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be4:	2312      	movs	r3, #18
 8000be6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bfc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000c00:	4619      	mov	r1, r3
 8000c02:	480d      	ldr	r0, [pc, #52]	; (8000c38 <HAL_I2C_MspInit+0x148>)
 8000c04:	f002 f95c 	bl	8002ec0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_I2C_MspInit+0x13c>)
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_I2C_MspInit+0x13c>)
 8000c0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c12:	6593      	str	r3, [r2, #88]	; 0x58
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_I2C_MspInit+0x13c>)
 8000c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
}
 8000c20:	bf00      	nop
 8000c22:	37c8      	adds	r7, #200	; 0xc8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	48000400 	.word	0x48000400
 8000c34:	40005c00 	.word	0x40005c00
 8000c38:	48001800 	.word	0x48001800

08000c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c42:	f000 fcc4 	bl	80015ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c46:	f000 f841 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4a:	f7ff fd65 	bl	8000718 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c4e:	f7ff fd39 	bl	80006c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c52:	f7ff fb25 	bl	80002a0 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000c56:	f7ff fc0d 	bl	8000474 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000c5a:	f7ff fec9 	bl	80009f0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000c5e:	f7ff ff07 	bl	8000a70 <MX_I2C3_Init>
  MX_RTC_Init();
 8000c62:	f000 f897 	bl	8000d94 <MX_RTC_Init>
  //MX_SDMMC1_SD_Init();
  MX_SPI1_Init();
 8000c66:	f000 f923 	bl	8000eb0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000c6a:	f000 f95f 	bl	8000f2c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000c6e:	f000 f99b 	bl	8000fa8 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000c72:	f000 fb7d 	bl	8001370 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000c76:	f000 fbc9 	bl	800140c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000c7a:	f000 fbfd 	bl	8001478 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8000c7e:	f00a fd39 	bl	800b6f4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  // Initizalize all the peripherals
  lsm6dsox_struct_init();
 8000c82:	f00a fd1f 	bl	800b6c4 <lsm6dsox_struct_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Read who i am
	  uint8_t whoiam;
	  int not = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
	  lsm6dsox_device_id_get(&LSM6DSOX_ctx, &whoiam);
 8000c8a:	f107 031b 	add.w	r3, r7, #27
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <main+0x88>)
 8000c92:	f008 ffef 	bl	8009c74 <lsm6dsox_device_id_get>
	  if(whoiam != 0x6C)
 8000c96:	7efb      	ldrb	r3, [r7, #27]
 8000c98:	2b6c      	cmp	r3, #108	; 0x6c
 8000c9a:	d001      	beq.n	8000ca0 <main+0x64>
		  not = 1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61fb      	str	r3, [r7, #28]
	  char buffOut[20];
	  sprintf(buffOut, "%d\r\n", whoiam);
 8000ca0:	7efb      	ldrb	r3, [r7, #27]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4908      	ldr	r1, [pc, #32]	; (8000cc8 <main+0x8c>)
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f00b fb9f 	bl	800c3ec <siprintf>


	  CDC_Transmit_FS(buffOut, 6);
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2106      	movs	r1, #6
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f00a fddc 	bl	800b870 <CDC_Transmit_FS>
	  // Read temperature data
	  //memset(&data_temperature_raw, 0x00, sizeof(uint16_t));
	  //lsm6dsox_temperature_raw_get(&LSM6DSOX_ctx, &data_temperature_raw);
	  //float_t temp_C = lsm6dsox_from_lsb_to_celsius(data_temperature_raw);
	  //not = 0;
	  HAL_Delay(1000);
 8000cb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cbc:	f000 fcfc 	bl	80016b8 <HAL_Delay>
  {
 8000cc0:	e7e1      	b.n	8000c86 <main+0x4a>
 8000cc2:	bf00      	nop
 8000cc4:	20000920 	.word	0x20000920
 8000cc8:	0800cc60 	.word	0x0800cc60

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b096      	sub	sp, #88	; 0x58
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	2244      	movs	r2, #68	; 0x44
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f00b fb7e 	bl	800c3dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f003 fda6 	bl	8004840 <HAL_PWREx_ControlVoltageScaling>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000cfa:	f000 f845 	bl	8000d88 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cfe:	f003 fd6f 	bl	80047e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d02:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <SystemClock_Config+0xb8>)
 8000d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d08:	4a1e      	ldr	r2, [pc, #120]	; (8000d84 <SystemClock_Config+0xb8>)
 8000d0a:	f023 0318 	bic.w	r3, r3, #24
 8000d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8000d12:	2325      	movs	r3, #37	; 0x25
 8000d14:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d1a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d20:	2301      	movs	r3, #1
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d24:	2302      	movs	r3, #2
 8000d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000d30:	233c      	movs	r3, #60	; 0x3c
 8000d32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000d34:	2305      	movs	r3, #5
 8000d36:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4618      	mov	r0, r3
 8000d46:	f003 fe3f 	bl	80049c8 <HAL_RCC_OscConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d50:	f000 f81a 	bl	8000d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d54:	230f      	movs	r3, #15
 8000d56:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	2105      	movs	r1, #5
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f004 fa43 	bl	80051f8 <HAL_RCC_ClockConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d78:	f000 f806 	bl	8000d88 <Error_Handler>
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3758      	adds	r7, #88	; 0x58
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40021000 	.word	0x40021000

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <Error_Handler+0x8>
	...

08000d94 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000da8:	2300      	movs	r3, #0
 8000daa:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <MX_RTC_Init+0xb0>)
 8000dae:	4a26      	ldr	r2, [pc, #152]	; (8000e48 <MX_RTC_Init+0xb4>)
 8000db0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000db2:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <MX_RTC_Init+0xb0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <MX_RTC_Init+0xb0>)
 8000dba:	227f      	movs	r2, #127	; 0x7f
 8000dbc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <MX_RTC_Init+0xb0>)
 8000dc0:	22ff      	movs	r2, #255	; 0xff
 8000dc2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <MX_RTC_Init+0xb0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <MX_RTC_Init+0xb0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <MX_RTC_Init+0xb0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <MX_RTC_Init+0xb0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ddc:	4819      	ldr	r0, [pc, #100]	; (8000e44 <MX_RTC_Init+0xb0>)
 8000dde:	f005 fa11 	bl	8006204 <HAL_RTC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000de8:	f7ff ffce 	bl	8000d88 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	4619      	mov	r1, r3
 8000e06:	480f      	ldr	r0, [pc, #60]	; (8000e44 <MX_RTC_Init+0xb0>)
 8000e08:	f005 fa77 	bl	80062fa <HAL_RTC_SetTime>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000e12:	f7ff ffb9 	bl	8000d88 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000e16:	2302      	movs	r3, #2
 8000e18:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 3;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 8000e22:	2314      	movs	r3, #20
 8000e24:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_RTC_Init+0xb0>)
 8000e2e:	f005 fb01 	bl	8006434 <HAL_RTC_SetDate>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000e38:	f7ff ffa6 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000668 	.word	0x20000668
 8000e48:	40002800 	.word	0x40002800

08000e4c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b0aa      	sub	sp, #168	; 0xa8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	229c      	movs	r2, #156	; 0x9c
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f00b fabd 	bl	800c3dc <memset>
  if(rtcHandle->Instance==RTC)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <HAL_RTC_MspInit+0x5c>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d118      	bne.n	8000e9e <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e70:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f004 fc48 	bl	8005714 <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e8a:	f7ff ff7d 	bl	8000d88 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <HAL_RTC_MspInit+0x60>)
 8000e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e94:	4a05      	ldr	r2, [pc, #20]	; (8000eac <HAL_RTC_MspInit+0x60>)
 8000e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	37a8      	adds	r7, #168	; 0xa8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40002800 	.word	0x40002800
 8000eac:	40021000 	.word	0x40021000

08000eb0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <MX_SPI1_Init+0x74>)
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <MX_SPI1_Init+0x78>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <MX_SPI1_Init+0x74>)
 8000ebc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ec0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_SPI1_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <MX_SPI1_Init+0x74>)
 8000eca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ece:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_SPI1_Init+0x74>)
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <MX_SPI1_Init+0x74>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_SPI1_Init+0x74>)
 8000ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_SPI1_Init+0x74>)
 8000ee6:	2218      	movs	r2, #24
 8000ee8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_SPI1_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_SPI1_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_SPI1_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_SPI1_Init+0x74>)
 8000efe:	2207      	movs	r2, #7
 8000f00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_SPI1_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_SPI1_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_SPI1_Init+0x74>)
 8000f10:	f005 fe70 	bl	8006bf4 <HAL_SPI_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f1a:	f7ff ff35 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200007d4 	.word	0x200007d4
 8000f28:	40013000 	.word	0x40013000

08000f2c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <MX_SPI2_Init+0x74>)
 8000f32:	4a1c      	ldr	r2, [pc, #112]	; (8000fa4 <MX_SPI2_Init+0x78>)
 8000f34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <MX_SPI2_Init+0x74>)
 8000f38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <MX_SPI2_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <MX_SPI2_Init+0x74>)
 8000f46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f4a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_SPI2_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MX_SPI2_Init+0x74>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_SPI2_Init+0x74>)
 8000f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_SPI2_Init+0x74>)
 8000f62:	2230      	movs	r2, #48	; 0x30
 8000f64:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_SPI2_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_SPI2_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_SPI2_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_SPI2_Init+0x74>)
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <MX_SPI2_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_SPI2_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_SPI2_Init+0x74>)
 8000f8c:	f005 fe32 	bl	8006bf4 <HAL_SPI_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f96:	f7ff fef7 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000070c 	.word	0x2000070c
 8000fa4:	40003800 	.word	0x40003800

08000fa8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <MX_SPI3_Init+0x74>)
 8000fae:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <MX_SPI3_Init+0x78>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <MX_SPI3_Init+0x74>)
 8000fb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fb8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <MX_SPI3_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc0:	4b16      	ldr	r3, [pc, #88]	; (800101c <MX_SPI3_Init+0x74>)
 8000fc2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fc6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_SPI3_Init+0x74>)
 8000fca:	2202      	movs	r2, #2
 8000fcc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <MX_SPI3_Init+0x74>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_SPI3_Init+0x74>)
 8000fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fda:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_SPI3_Init+0x74>)
 8000fde:	2218      	movs	r2, #24
 8000fe0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_SPI3_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_SPI3_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <MX_SPI3_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_SPI3_Init+0x74>)
 8000ff6:	2207      	movs	r2, #7
 8000ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <MX_SPI3_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_SPI3_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_SPI3_Init+0x74>)
 8001008:	f005 fdf4 	bl	8006bf4 <HAL_SPI_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001012:	f7ff feb9 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000770 	.word	0x20000770
 8001020:	40003c00 	.word	0x40003c00

08001024 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08e      	sub	sp, #56	; 0x38
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a64      	ldr	r2, [pc, #400]	; (80011d4 <HAL_SPI_MspInit+0x1b0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d13a      	bne.n	80010bc <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001046:	4b64      	ldr	r3, [pc, #400]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104a:	4a63      	ldr	r2, [pc, #396]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 800104c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001050:	6613      	str	r3, [r2, #96]	; 0x60
 8001052:	4b61      	ldr	r3, [pc, #388]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800105a:	623b      	str	r3, [r7, #32]
 800105c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800105e:	4b5e      	ldr	r3, [pc, #376]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	4a5d      	ldr	r2, [pc, #372]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 8001064:	f043 0310 	orr.w	r3, r3, #16
 8001068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106a:	4b5b      	ldr	r3, [pc, #364]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	61fb      	str	r3, [r7, #28]
 8001074:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE14     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI2_SCKE13_Pin;
 8001076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001080:	2301      	movs	r3, #1
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001088:	2305      	movs	r3, #5
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_SCKE13_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	4852      	ldr	r0, [pc, #328]	; (80011dc <HAL_SPI_MspInit+0x1b8>)
 8001094:	f001 ff14 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin|GPIO_PIN_14;
 8001098:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010aa:	2305      	movs	r3, #5
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	4619      	mov	r1, r3
 80010b4:	4849      	ldr	r0, [pc, #292]	; (80011dc <HAL_SPI_MspInit+0x1b8>)
 80010b6:	f001 ff03 	bl	8002ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80010ba:	e086      	b.n	80011ca <HAL_SPI_MspInit+0x1a6>
  else if(spiHandle->Instance==SPI2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a47      	ldr	r2, [pc, #284]	; (80011e0 <HAL_SPI_MspInit+0x1bc>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d144      	bne.n	8001150 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010c6:	4b44      	ldr	r3, [pc, #272]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	4a43      	ldr	r2, [pc, #268]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d0:	6593      	str	r3, [r2, #88]	; 0x58
 80010d2:	4b41      	ldr	r3, [pc, #260]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010de:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a3d      	ldr	r2, [pc, #244]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a37      	ldr	r2, [pc, #220]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b35      	ldr	r3, [pc, #212]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_SCK_Pin;
 800110e:	230a      	movs	r3, #10
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800111e:	2305      	movs	r3, #5
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001126:	4619      	mov	r1, r3
 8001128:	482e      	ldr	r0, [pc, #184]	; (80011e4 <HAL_SPI_MspInit+0x1c0>)
 800112a:	f001 fec9 	bl	8002ec0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 800112e:	2308      	movs	r3, #8
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800113e:	2305      	movs	r3, #5
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	4827      	ldr	r0, [pc, #156]	; (80011e8 <HAL_SPI_MspInit+0x1c4>)
 800114a:	f001 feb9 	bl	8002ec0 <HAL_GPIO_Init>
}
 800114e:	e03c      	b.n	80011ca <HAL_SPI_MspInit+0x1a6>
  else if(spiHandle->Instance==SPI3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a25      	ldr	r2, [pc, #148]	; (80011ec <HAL_SPI_MspInit+0x1c8>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d137      	bne.n	80011ca <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 8001160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001164:	6593      	str	r3, [r2, #88]	; 0x58
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	4a18      	ldr	r2, [pc, #96]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_SPI_MspInit+0x1b4>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin;
 800118a:	2330      	movs	r3, #48	; 0x30
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800119a:	2306      	movs	r3, #6
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a2:	4619      	mov	r1, r3
 80011a4:	4812      	ldr	r0, [pc, #72]	; (80011f0 <HAL_SPI_MspInit+0x1cc>)
 80011a6:	f001 fe8b 	bl	8002ec0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin;
 80011aa:	2308      	movs	r3, #8
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011ba:	2306      	movs	r3, #6
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c2:	4619      	mov	r1, r3
 80011c4:	480a      	ldr	r0, [pc, #40]	; (80011f0 <HAL_SPI_MspInit+0x1cc>)
 80011c6:	f001 fe7b 	bl	8002ec0 <HAL_GPIO_Init>
}
 80011ca:	bf00      	nop
 80011cc:	3738      	adds	r7, #56	; 0x38
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40013000 	.word	0x40013000
 80011d8:	40021000 	.word	0x40021000
 80011dc:	48001000 	.word	0x48001000
 80011e0:	40003800 	.word	0x40003800
 80011e4:	48000c00 	.word	0x48000c00
 80011e8:	48000800 	.word	0x48000800
 80011ec:	40003c00 	.word	0x40003c00
 80011f0:	48000400 	.word	0x48000400

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_MspInit+0x44>)
 80011fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fe:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <HAL_MspInit+0x44>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6613      	str	r3, [r2, #96]	; 0x60
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <HAL_MspInit+0x44>)
 8001208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_MspInit+0x44>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_MspInit+0x44>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	6593      	str	r3, [r2, #88]	; 0x58
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_MspInit+0x44>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <NMI_Handler+0x4>

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001288:	f000 f9f6 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <DMA1_Channel4_IRQHandler+0x10>)
 8001296:	f001 fd01 	bl	8002c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000528 	.word	0x20000528

080012a4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <SDMMC1_IRQHandler+0x10>)
 80012aa:	f005 fa01 	bl	80066b0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000068c 	.word	0x2000068c

080012b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <TIM6_DAC_IRQHandler+0x10>)
 80012be:	f006 fc00 	bl	8007ac2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000838 	.word	0x20000838

080012cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <OTG_FS_IRQHandler+0x10>)
 80012d2:	f002 fa18 	bl	8003706 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20001e00 	.word	0x20001e00

080012e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e8:	4a14      	ldr	r2, [pc, #80]	; (800133c <_sbrk+0x5c>)
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <_sbrk+0x60>)
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d102      	bne.n	8001302 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <_sbrk+0x64>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <_sbrk+0x68>)
 8001300:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	429a      	cmp	r2, r3
 800130e:	d207      	bcs.n	8001320 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001310:	f00b f83a 	bl	800c388 <__errno>
 8001314:	4603      	mov	r3, r0
 8001316:	220c      	movs	r2, #12
 8001318:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	e009      	b.n	8001334 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	4a05      	ldr	r2, [pc, #20]	; (8001344 <_sbrk+0x64>)
 8001330:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200a0000 	.word	0x200a0000
 8001340:	00000400 	.word	0x00000400
 8001344:	20000218 	.word	0x20000218
 8001348:	20002320 	.word	0x20002320

0800134c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <SystemInit+0x20>)
 8001352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <SystemInit+0x20>)
 8001358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800135c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <MX_TIM2_Init+0x98>)
 8001390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001394:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <MX_TIM2_Init+0x98>)
 8001398:	2277      	movs	r2, #119	; 0x77
 800139a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MX_TIM2_Init+0x98>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <MX_TIM2_Init+0x98>)
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <MX_TIM2_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <MX_TIM2_Init+0x98>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013b6:	4814      	ldr	r0, [pc, #80]	; (8001408 <MX_TIM2_Init+0x98>)
 80013b8:	f006 fb2c 	bl	8007a14 <HAL_TIM_Base_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013c2:	f7ff fce1 	bl	8000d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	480d      	ldr	r0, [pc, #52]	; (8001408 <MX_TIM2_Init+0x98>)
 80013d4:	f006 fc94 	bl	8007d00 <HAL_TIM_ConfigClockSource>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013de:	f7ff fcd3 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	4619      	mov	r1, r3
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <MX_TIM2_Init+0x98>)
 80013f0:	f006 feb6 	bl	8008160 <HAL_TIMEx_MasterConfigSynchronization>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013fa:	f7ff fcc5 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	3720      	adds	r7, #32
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000884 	.word	0x20000884

0800140c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <MX_TIM6_Init+0x64>)
 800141e:	4a15      	ldr	r2, [pc, #84]	; (8001474 <MX_TIM6_Init+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <MX_TIM6_Init+0x64>)
 8001424:	2277      	movs	r2, #119	; 0x77
 8001426:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_TIM6_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <MX_TIM6_Init+0x64>)
 8001430:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001434:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_TIM6_Init+0x64>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800143c:	480c      	ldr	r0, [pc, #48]	; (8001470 <MX_TIM6_Init+0x64>)
 800143e:	f006 fae9 	bl	8007a14 <HAL_TIM_Base_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001448:	f7ff fc9e 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_TIM6_Init+0x64>)
 800145a:	f006 fe81 	bl	8008160 <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001464:	f7ff fc90 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000838 	.word	0x20000838
 8001474:	40001000 	.word	0x40001000

08001478 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <MX_TIM7_Init+0x64>)
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <MX_TIM7_Init+0x68>)
 800148c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 119;
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <MX_TIM7_Init+0x64>)
 8001490:	2277      	movs	r2, #119	; 0x77
 8001492:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_TIM7_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xFFFF;
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <MX_TIM7_Init+0x64>)
 800149c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_TIM7_Init+0x64>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <MX_TIM7_Init+0x64>)
 80014aa:	f006 fab3 	bl	8007a14 <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80014b4:	f7ff fc68 	bl	8000d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_TIM7_Init+0x64>)
 80014c6:	f006 fe4b 	bl	8008160 <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80014d0:	f7ff fc5a 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200008d0 	.word	0x200008d0
 80014e0:	40001400 	.word	0x40001400

080014e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f4:	d10c      	bne.n	8001510 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_TIM_Base_MspInit+0x8c>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <HAL_TIM_Base_MspInit+0x8c>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6593      	str	r3, [r2, #88]	; 0x58
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_TIM_Base_MspInit+0x8c>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800150e:	e02a      	b.n	8001566 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM6)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a17      	ldr	r2, [pc, #92]	; (8001574 <HAL_TIM_Base_MspInit+0x90>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d114      	bne.n	8001544 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_TIM_Base_MspInit+0x8c>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151e:	4a14      	ldr	r2, [pc, #80]	; (8001570 <HAL_TIM_Base_MspInit+0x8c>)
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	6593      	str	r3, [r2, #88]	; 0x58
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_TIM_Base_MspInit+0x8c>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2036      	movs	r0, #54	; 0x36
 8001538:	f001 f8a5 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800153c:	2036      	movs	r0, #54	; 0x36
 800153e:	f001 f8be 	bl	80026be <HAL_NVIC_EnableIRQ>
}
 8001542:	e010      	b.n	8001566 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM7)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <HAL_TIM_Base_MspInit+0x94>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d10b      	bne.n	8001566 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_TIM_Base_MspInit+0x8c>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001552:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_TIM_Base_MspInit+0x8c>)
 8001554:	f043 0320 	orr.w	r3, r3, #32
 8001558:	6593      	str	r3, [r2, #88]	; 0x58
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_TIM_Base_MspInit+0x8c>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155e:	f003 0320 	and.w	r3, r3, #32
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	40001000 	.word	0x40001000
 8001578:	40001400 	.word	0x40001400

0800157c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001580:	f7ff fee4 	bl	800134c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001584:	480c      	ldr	r0, [pc, #48]	; (80015b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001586:	490d      	ldr	r1, [pc, #52]	; (80015bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <LoopForever+0xe>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800159c:	4c0a      	ldr	r4, [pc, #40]	; (80015c8 <LoopForever+0x16>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015aa:	f00a fef3 	bl	800c394 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ae:	f7ff fb45 	bl	8000c3c <main>

080015b2 <LoopForever>:

LoopForever:
    b LoopForever
 80015b2:	e7fe      	b.n	80015b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015b4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80015c0:	0800cd2c 	.word	0x0800cd2c
  ldr r2, =_sbss
 80015c4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80015c8:	2000231c 	.word	0x2000231c

080015cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC1_IRQHandler>

080015ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f001 f849 	bl	8002670 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015de:	2000      	movs	r0, #0
 80015e0:	f000 f80e 	bl	8001600 <HAL_InitTick>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d002      	beq.n	80015f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	e001      	b.n	80015f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015f0:	f7ff fe00 	bl	80011f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015f4:	79fb      	ldrb	r3, [r7, #7]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_InitTick+0x6c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d023      	beq.n	800165c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <HAL_InitTick+0x70>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_InitTick+0x6c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001622:	fbb3 f3f1 	udiv	r3, r3, r1
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f001 f855 	bl	80026da <HAL_SYSTICK_Config>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10f      	bne.n	8001656 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d809      	bhi.n	8001650 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f001 f81f 	bl	8002686 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001648:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <HAL_InitTick+0x74>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e007      	b.n	8001660 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
 8001654:	e004      	b.n	8001660 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	e001      	b.n	8001660 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008
 8001670:	20000000 	.word	0x20000000
 8001674:	20000004 	.word	0x20000004

08001678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_IncTick+0x20>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_IncTick+0x24>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_IncTick+0x24>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000008 	.word	0x20000008
 800169c:	2000091c 	.word	0x2000091c

080016a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	2000091c 	.word	0x2000091c

080016b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff ffee 	bl	80016a0 <HAL_GetTick>
 80016c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	d005      	beq.n	80016de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_Delay+0x44>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4413      	add	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016de:	bf00      	nop
 80016e0:	f7ff ffde 	bl	80016a0 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d8f7      	bhi.n	80016e0 <HAL_Delay+0x28>
  {
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008

08001700 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	609a      	str	r2, [r3, #8]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	609a      	str	r2, [r3, #8]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3360      	adds	r3, #96	; 0x60
 800177a:	461a      	mov	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <LL_ADC_SetOffset+0x44>)
 800178a:	4013      	ands	r3, r2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	4313      	orrs	r3, r2
 8001798:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017a0:	bf00      	nop
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	03fff000 	.word	0x03fff000

080017b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3360      	adds	r3, #96	; 0x60
 80017be:	461a      	mov	r2, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3360      	adds	r3, #96	; 0x60
 80017ec:	461a      	mov	r2, r3
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	431a      	orrs	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001806:	bf00      	nop
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	615a      	str	r2, [r3, #20]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3330      	adds	r3, #48	; 0x30
 8001848:	461a      	mov	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	4413      	add	r3, r2
 8001856:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	211f      	movs	r1, #31
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	0e9b      	lsrs	r3, r3, #26
 8001870:	f003 011f 	and.w	r1, r3, #31
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	431a      	orrs	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001884:	bf00      	nop
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3314      	adds	r3, #20
 80018a0:	461a      	mov	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	0e5b      	lsrs	r3, r3, #25
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	4413      	add	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	0d1b      	lsrs	r3, r3, #20
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	2107      	movs	r1, #7
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	401a      	ands	r2, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	0d1b      	lsrs	r3, r3, #20
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	431a      	orrs	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018da:	bf00      	nop
 80018dc:	371c      	adds	r7, #28
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001900:	43db      	mvns	r3, r3
 8001902:	401a      	ands	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0318 	and.w	r3, r3, #24
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <LL_ADC_SetChannelSingleDiff+0x44>)
 800190c:	40d9      	lsrs	r1, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	400b      	ands	r3, r1
 8001912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001916:	431a      	orrs	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	0007ffff 	.word	0x0007ffff

08001930 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001940:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6093      	str	r3, [r2, #8]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001968:	d101      	bne.n	800196e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800198c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001990:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019b8:	d101      	bne.n	80019be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <LL_ADC_IsEnabled+0x18>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <LL_ADC_IsEnabled+0x1a>
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d101      	bne.n	8001a0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d101      	bne.n	8001a30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e12f      	b.n	8001cba <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7fe fc7d 	bl	8000368 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff67 	bl	8001954 <LL_ADC_IsDeepPowerDownEnabled>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff4d 	bl	8001930 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff82 	bl	80019a4 <LL_ADC_IsInternalRegulatorEnabled>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d115      	bne.n	8001ad2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff66 	bl	800197c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ab0:	4b84      	ldr	r3, [pc, #528]	; (8001cc4 <HAL_ADC_Init+0x284>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	099b      	lsrs	r3, r3, #6
 8001ab6:	4a84      	ldr	r2, [pc, #528]	; (8001cc8 <HAL_ADC_Init+0x288>)
 8001ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8001abc:	099b      	lsrs	r3, r3, #6
 8001abe:	3301      	adds	r3, #1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ac4:	e002      	b.n	8001acc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f9      	bne.n	8001ac6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff64 	bl	80019a4 <LL_ADC_IsInternalRegulatorEnabled>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10d      	bne.n	8001afe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	f043 0210 	orr.w	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff75 	bl	80019f2 <LL_ADC_REG_IsConversionOngoing>
 8001b08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 80c8 	bne.w	8001ca8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 80c4 	bne.w	8001ca8 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b28:	f043 0202 	orr.w	r2, r3, #2
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff49 	bl	80019cc <LL_ADC_IsEnabled>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10b      	bne.n	8001b58 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b40:	4862      	ldr	r0, [pc, #392]	; (8001ccc <HAL_ADC_Init+0x28c>)
 8001b42:	f7ff ff43 	bl	80019cc <LL_ADC_IsEnabled>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d105      	bne.n	8001b58 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	4619      	mov	r1, r3
 8001b52:	485f      	ldr	r0, [pc, #380]	; (8001cd0 <HAL_ADC_Init+0x290>)
 8001b54:	f7ff fdd4 	bl	8001700 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7e5b      	ldrb	r3, [r3, #25]
 8001b5c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b62:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b68:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b6e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b76:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d106      	bne.n	8001b94 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	045b      	lsls	r3, r3, #17
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d009      	beq.n	8001bb0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <HAL_ADC_Init+0x294>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	69b9      	ldr	r1, [r7, #24]
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff12 	bl	80019f2 <LL_ADC_REG_IsConversionOngoing>
 8001bce:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff1f 	bl	8001a18 <LL_ADC_INJ_IsConversionOngoing>
 8001bda:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d140      	bne.n	8001c64 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d13d      	bne.n	8001c64 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7e1b      	ldrb	r3, [r3, #24]
 8001bf0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bf2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bfa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c0a:	f023 0306 	bic.w	r3, r3, #6
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	430b      	orrs	r3, r1
 8001c16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d118      	bne.n	8001c54 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c2c:	f023 0304 	bic.w	r3, r3, #4
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c38:	4311      	orrs	r1, r2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c3e:	4311      	orrs	r1, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c44:	430a      	orrs	r2, r1
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0201 	orr.w	r2, r2, #1
 8001c50:	611a      	str	r2, [r3, #16]
 8001c52:	e007      	b.n	8001c64 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10c      	bne.n	8001c86 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f023 010f 	bic.w	r1, r3, #15
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	1e5a      	subs	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30
 8001c84:	e007      	b.n	8001c96 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 020f 	bic.w	r2, r2, #15
 8001c94:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	f023 0303 	bic.w	r3, r3, #3
 8001c9e:	f043 0201 	orr.w	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	659a      	str	r2, [r3, #88]	; 0x58
 8001ca6:	e007      	b.n	8001cb8 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	f043 0210 	orr.w	r2, r3, #16
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3720      	adds	r7, #32
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	053e2d63 	.word	0x053e2d63
 8001ccc:	50040000 	.word	0x50040000
 8001cd0:	50040300 	.word	0x50040300
 8001cd4:	fff0c007 	.word	0xfff0c007

08001cd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b0b6      	sub	sp, #216	; 0xd8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x22>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e3d5      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x7ce>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fe73 	bl	80019f2 <LL_ADC_REG_IsConversionOngoing>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f040 83ba 	bne.w	8002488 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d824      	bhi.n	8001d66 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	3b02      	subs	r3, #2
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d81b      	bhi.n	8001d5e <HAL_ADC_ConfigChannel+0x86>
 8001d26:	a201      	add	r2, pc, #4	; (adr r2, 8001d2c <HAL_ADC_ConfigChannel+0x54>)
 8001d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2c:	08001d3d 	.word	0x08001d3d
 8001d30:	08001d45 	.word	0x08001d45
 8001d34:	08001d4d 	.word	0x08001d4d
 8001d38:	08001d55 	.word	0x08001d55
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	220c      	movs	r2, #12
 8001d40:	605a      	str	r2, [r3, #4]
          break;
 8001d42:	e011      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2212      	movs	r2, #18
 8001d48:	605a      	str	r2, [r3, #4]
          break;
 8001d4a:	e00d      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2218      	movs	r2, #24
 8001d50:	605a      	str	r2, [r3, #4]
          break;
 8001d52:	e009      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d5a:	605a      	str	r2, [r3, #4]
          break;
 8001d5c:	e004      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2206      	movs	r2, #6
 8001d62:	605a      	str	r2, [r3, #4]
          break;
 8001d64:	e000      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d66:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	f7ff fd5f 	bl	8001838 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fe37 	bl	80019f2 <LL_ADC_REG_IsConversionOngoing>
 8001d84:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fe43 	bl	8001a18 <LL_ADC_INJ_IsConversionOngoing>
 8001d92:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 81c1 	bne.w	8002122 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001da0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 81bc 	bne.w	8002122 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001db2:	d10f      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f7ff fd66 	bl	8001890 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fd20 	bl	8001812 <LL_ADC_SetSamplingTimeCommonConfig>
 8001dd2:	e00e      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	6819      	ldr	r1, [r3, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	461a      	mov	r2, r3
 8001de2:	f7ff fd55 	bl	8001890 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fd10 	bl	8001812 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	08db      	lsrs	r3, r3, #3
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d00a      	beq.n	8001e2a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6919      	ldr	r1, [r3, #16]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e24:	f7ff fca0 	bl	8001768 <LL_ADC_SetOffset>
 8001e28:	e17b      	b.n	8002122 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fcbd 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10a      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x17e>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fcb2 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	0e9b      	lsrs	r3, r3, #26
 8001e50:	f003 021f 	and.w	r2, r3, #31
 8001e54:	e01e      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x1bc>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fca7 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001e84:	2320      	movs	r3, #32
 8001e86:	e004      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d105      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x1d4>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0e9b      	lsrs	r3, r3, #26
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	e018      	b.n	8001ede <HAL_ADC_ConfigChannel+0x206>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001eb8:	fa93 f3a3 	rbit	r3, r3
 8001ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001ec0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001ec8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	e004      	b.n	8001ede <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001ed4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d106      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fc76 	bl	80017dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fc5a 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10a      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x244>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fc4f 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	0e9b      	lsrs	r3, r3, #26
 8001f16:	f003 021f 	and.w	r2, r3, #31
 8001f1a:	e01e      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x282>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fc44 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001f4a:	2320      	movs	r3, #32
 8001f4c:	e004      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001f4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d105      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x29a>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	0e9b      	lsrs	r3, r3, #26
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	e018      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x2cc>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001f96:	2320      	movs	r3, #32
 8001f98:	e004      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001f9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d106      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2200      	movs	r2, #0
 8001fae:	2101      	movs	r1, #1
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fc13 	bl	80017dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2102      	movs	r1, #2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fbf7 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10a      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x30a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fbec 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	0e9b      	lsrs	r3, r3, #26
 8001fdc:	f003 021f 	and.w	r2, r3, #31
 8001fe0:	e01e      	b.n	8002020 <HAL_ADC_ConfigChannel+0x348>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fbe1 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002000:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002004:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002008:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002010:	2320      	movs	r3, #32
 8002012:	e004      	b.n	800201e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002014:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x360>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	0e9b      	lsrs	r3, r3, #26
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	e016      	b.n	8002066 <HAL_ADC_ConfigChannel+0x38e>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800204a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800204c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002050:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002058:	2320      	movs	r3, #32
 800205a:	e004      	b.n	8002066 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800205c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002066:	429a      	cmp	r2, r3
 8002068:	d106      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2200      	movs	r2, #0
 8002070:	2102      	movs	r1, #2
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fbb2 	bl	80017dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2103      	movs	r1, #3
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fb96 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10a      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x3cc>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2103      	movs	r1, #3
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fb8b 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	f003 021f 	and.w	r2, r3, #31
 80020a2:	e017      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x3fc>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2103      	movs	r1, #3
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fb80 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 80020b0:	4603      	mov	r3, r0
 80020b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80020bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020be:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80020c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80020c6:	2320      	movs	r3, #32
 80020c8:	e003      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80020ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x414>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0e9b      	lsrs	r3, r3, #26
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	e011      	b.n	8002110 <HAL_ADC_ConfigChannel+0x438>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80020fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80020fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002104:	2320      	movs	r3, #32
 8002106:	e003      	b.n	8002110 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002110:	429a      	cmp	r2, r3
 8002112:	d106      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2200      	movs	r2, #0
 800211a:	2103      	movs	r1, #3
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fb5d 	bl	80017dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fc50 	bl	80019cc <LL_ADC_IsEnabled>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	f040 8140 	bne.w	80023b4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	6819      	ldr	r1, [r3, #0]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	461a      	mov	r2, r3
 8002142:	f7ff fbd1 	bl	80018e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	4a8f      	ldr	r2, [pc, #572]	; (8002388 <HAL_ADC_ConfigChannel+0x6b0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	f040 8131 	bne.w	80023b4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10b      	bne.n	800217a <HAL_ADC_ConfigChannel+0x4a2>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	0e9b      	lsrs	r3, r3, #26
 8002168:	3301      	adds	r3, #1
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	2b09      	cmp	r3, #9
 8002170:	bf94      	ite	ls
 8002172:	2301      	movls	r3, #1
 8002174:	2300      	movhi	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	e019      	b.n	80021ae <HAL_ADC_ConfigChannel+0x4d6>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800218a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800218c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002192:	2320      	movs	r3, #32
 8002194:	e003      	b.n	800219e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002198:	fab3 f383 	clz	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	3301      	adds	r3, #1
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	2b09      	cmp	r3, #9
 80021a6:	bf94      	ite	ls
 80021a8:	2301      	movls	r3, #1
 80021aa:	2300      	movhi	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d079      	beq.n	80022a6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d107      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x4f6>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	0e9b      	lsrs	r3, r3, #26
 80021c4:	3301      	adds	r3, #1
 80021c6:	069b      	lsls	r3, r3, #26
 80021c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021cc:	e015      	b.n	80021fa <HAL_ADC_ConfigChannel+0x522>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021de:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80021e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80021e6:	2320      	movs	r3, #32
 80021e8:	e003      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80021ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ec:	fab3 f383 	clz	r3, r3
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	3301      	adds	r3, #1
 80021f4:	069b      	lsls	r3, r3, #26
 80021f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <HAL_ADC_ConfigChannel+0x542>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0e9b      	lsrs	r3, r3, #26
 800220c:	3301      	adds	r3, #1
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	2101      	movs	r1, #1
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	e017      	b.n	800224a <HAL_ADC_ConfigChannel+0x572>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800222a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800222c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002232:	2320      	movs	r3, #32
 8002234:	e003      	b.n	800223e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002238:	fab3 f383 	clz	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	3301      	adds	r3, #1
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	ea42 0103 	orr.w	r1, r2, r3
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10a      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x598>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	0e9b      	lsrs	r3, r3, #26
 8002260:	3301      	adds	r3, #1
 8002262:	f003 021f 	and.w	r2, r3, #31
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	051b      	lsls	r3, r3, #20
 800226e:	e018      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x5ca>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800227e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002280:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002288:	2320      	movs	r3, #32
 800228a:	e003      	b.n	8002294 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800228c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	3301      	adds	r3, #1
 8002296:	f003 021f 	and.w	r2, r3, #31
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a2:	430b      	orrs	r3, r1
 80022a4:	e081      	b.n	80023aa <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d107      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x5ea>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0e9b      	lsrs	r3, r3, #26
 80022b8:	3301      	adds	r3, #1
 80022ba:	069b      	lsls	r3, r3, #26
 80022bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022c0:	e015      	b.n	80022ee <HAL_ADC_ConfigChannel+0x616>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80022d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80022d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80022da:	2320      	movs	r3, #32
 80022dc:	e003      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80022de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e0:	fab3 f383 	clz	r3, r3
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	3301      	adds	r3, #1
 80022e8:	069b      	lsls	r3, r3, #26
 80022ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <HAL_ADC_ConfigChannel+0x636>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0e9b      	lsrs	r3, r3, #26
 8002300:	3301      	adds	r3, #1
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	2101      	movs	r1, #1
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	e017      	b.n	800233e <HAL_ADC_ConfigChannel+0x666>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	61fb      	str	r3, [r7, #28]
  return result;
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002326:	2320      	movs	r3, #32
 8002328:	e003      	b.n	8002332 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	3301      	adds	r3, #1
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	2101      	movs	r1, #1
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	ea42 0103 	orr.w	r1, r2, r3
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10d      	bne.n	800236a <HAL_ADC_ConfigChannel+0x692>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	0e9b      	lsrs	r3, r3, #26
 8002354:	3301      	adds	r3, #1
 8002356:	f003 021f 	and.w	r2, r3, #31
 800235a:	4613      	mov	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	3b1e      	subs	r3, #30
 8002362:	051b      	lsls	r3, r3, #20
 8002364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002368:	e01e      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x6d0>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	613b      	str	r3, [r7, #16]
  return result;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d104      	bne.n	800238c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002382:	2320      	movs	r3, #32
 8002384:	e006      	b.n	8002394 <HAL_ADC_ConfigChannel+0x6bc>
 8002386:	bf00      	nop
 8002388:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	3301      	adds	r3, #1
 8002396:	f003 021f 	and.w	r2, r3, #31
 800239a:	4613      	mov	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4413      	add	r3, r2
 80023a0:	3b1e      	subs	r3, #30
 80023a2:	051b      	lsls	r3, r3, #20
 80023a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a8:	430b      	orrs	r3, r1
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	6892      	ldr	r2, [r2, #8]
 80023ae:	4619      	mov	r1, r3
 80023b0:	f7ff fa6e 	bl	8001890 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <HAL_ADC_ConfigChannel+0x7d8>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d06c      	beq.n	800249a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023c0:	483c      	ldr	r0, [pc, #240]	; (80024b4 <HAL_ADC_ConfigChannel+0x7dc>)
 80023c2:	f7ff f9c3 	bl	800174c <LL_ADC_GetCommonPathInternalCh>
 80023c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a3a      	ldr	r2, [pc, #232]	; (80024b8 <HAL_ADC_ConfigChannel+0x7e0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d127      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d121      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a35      	ldr	r2, [pc, #212]	; (80024bc <HAL_ADC_ConfigChannel+0x7e4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d157      	bne.n	800249a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023f2:	4619      	mov	r1, r3
 80023f4:	482f      	ldr	r0, [pc, #188]	; (80024b4 <HAL_ADC_ConfigChannel+0x7dc>)
 80023f6:	f7ff f996 	bl	8001726 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023fa:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <HAL_ADC_ConfigChannel+0x7e8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	099b      	lsrs	r3, r3, #6
 8002400:	4a30      	ldr	r2, [pc, #192]	; (80024c4 <HAL_ADC_ConfigChannel+0x7ec>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	099b      	lsrs	r3, r3, #6
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002414:	e002      	b.n	800241c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3b01      	subs	r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f9      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002422:	e03a      	b.n	800249a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a27      	ldr	r2, [pc, #156]	; (80024c8 <HAL_ADC_ConfigChannel+0x7f0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d113      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x77e>
 800242e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10d      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1f      	ldr	r2, [pc, #124]	; (80024bc <HAL_ADC_ConfigChannel+0x7e4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d12a      	bne.n	800249a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002444:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002448:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244c:	4619      	mov	r1, r3
 800244e:	4819      	ldr	r0, [pc, #100]	; (80024b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002450:	f7ff f969 	bl	8001726 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002454:	e021      	b.n	800249a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a1c      	ldr	r2, [pc, #112]	; (80024cc <HAL_ADC_ConfigChannel+0x7f4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d11c      	bne.n	800249a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002460:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d116      	bne.n	800249a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a12      	ldr	r2, [pc, #72]	; (80024bc <HAL_ADC_ConfigChannel+0x7e4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d111      	bne.n	800249a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002476:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800247a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800247e:	4619      	mov	r1, r3
 8002480:	480c      	ldr	r0, [pc, #48]	; (80024b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002482:	f7ff f950 	bl	8001726 <LL_ADC_SetCommonPathInternalCh>
 8002486:	e008      	b.n	800249a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	f043 0220 	orr.w	r2, r3, #32
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80024a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	37d8      	adds	r7, #216	; 0xd8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	80080000 	.word	0x80080000
 80024b4:	50040300 	.word	0x50040300
 80024b8:	c7520000 	.word	0xc7520000
 80024bc:	50040000 	.word	0x50040000
 80024c0:	20000000 	.word	0x20000000
 80024c4:	053e2d63 	.word	0x053e2d63
 80024c8:	cb840000 	.word	0xcb840000
 80024cc:	80000001 	.word	0x80000001

080024d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024ec:	4013      	ands	r3, r2
 80024ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002502:	4a04      	ldr	r2, [pc, #16]	; (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	60d3      	str	r3, [r2, #12]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <__NVIC_GetPriorityGrouping+0x18>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	f003 0307 	and.w	r3, r3, #7
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	2b00      	cmp	r3, #0
 8002544:	db0b      	blt.n	800255e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	f003 021f 	and.w	r2, r3, #31
 800254c:	4907      	ldr	r1, [pc, #28]	; (800256c <__NVIC_EnableIRQ+0x38>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	2001      	movs	r0, #1
 8002556:	fa00 f202 	lsl.w	r2, r0, r2
 800255a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000e100 	.word	0xe000e100

08002570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	6039      	str	r1, [r7, #0]
 800257a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002580:	2b00      	cmp	r3, #0
 8002582:	db0a      	blt.n	800259a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	490c      	ldr	r1, [pc, #48]	; (80025bc <__NVIC_SetPriority+0x4c>)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	0112      	lsls	r2, r2, #4
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	440b      	add	r3, r1
 8002594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002598:	e00a      	b.n	80025b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4908      	ldr	r1, [pc, #32]	; (80025c0 <__NVIC_SetPriority+0x50>)
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	3b04      	subs	r3, #4
 80025a8:	0112      	lsls	r2, r2, #4
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	440b      	add	r3, r1
 80025ae:	761a      	strb	r2, [r3, #24]
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000e100 	.word	0xe000e100
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	; 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f1c3 0307 	rsb	r3, r3, #7
 80025de:	2b04      	cmp	r3, #4
 80025e0:	bf28      	it	cs
 80025e2:	2304      	movcs	r3, #4
 80025e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3304      	adds	r3, #4
 80025ea:	2b06      	cmp	r3, #6
 80025ec:	d902      	bls.n	80025f4 <NVIC_EncodePriority+0x30>
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3b03      	subs	r3, #3
 80025f2:	e000      	b.n	80025f6 <NVIC_EncodePriority+0x32>
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	f04f 32ff 	mov.w	r2, #4294967295
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43da      	mvns	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	401a      	ands	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800260c:	f04f 31ff 	mov.w	r1, #4294967295
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	43d9      	mvns	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	4313      	orrs	r3, r2
         );
}
 800261e:	4618      	mov	r0, r3
 8002620:	3724      	adds	r7, #36	; 0x24
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800263c:	d301      	bcc.n	8002642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800263e:	2301      	movs	r3, #1
 8002640:	e00f      	b.n	8002662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002642:	4a0a      	ldr	r2, [pc, #40]	; (800266c <SysTick_Config+0x40>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264a:	210f      	movs	r1, #15
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	f7ff ff8e 	bl	8002570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <SysTick_Config+0x40>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265a:	4b04      	ldr	r3, [pc, #16]	; (800266c <SysTick_Config+0x40>)
 800265c:	2207      	movs	r2, #7
 800265e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	e000e010 	.word	0xe000e010

08002670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff29 	bl	80024d0 <__NVIC_SetPriorityGrouping>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002698:	f7ff ff3e 	bl	8002518 <__NVIC_GetPriorityGrouping>
 800269c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	6978      	ldr	r0, [r7, #20]
 80026a4:	f7ff ff8e 	bl	80025c4 <NVIC_EncodePriority>
 80026a8:	4602      	mov	r2, r0
 80026aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff5d 	bl	8002570 <__NVIC_SetPriority>
}
 80026b6:	bf00      	nop
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff31 	bl	8002534 <__NVIC_EnableIRQ>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ffa2 	bl	800262c <SysTick_Config>
 80026e8:	4603      	mov	r3, r0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e0ac      	b.n	8002860 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f9d2 	bl	8002ab4 <DFSDM_GetChannelFromInstance>
 8002710:	4603      	mov	r3, r0
 8002712:	4a55      	ldr	r2, [pc, #340]	; (8002868 <HAL_DFSDM_ChannelInit+0x174>)
 8002714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e09f      	b.n	8002860 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7fd ff8b 	bl	800063c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002726:	4b51      	ldr	r3, [pc, #324]	; (800286c <HAL_DFSDM_ChannelInit+0x178>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3301      	adds	r3, #1
 800272c:	4a4f      	ldr	r2, [pc, #316]	; (800286c <HAL_DFSDM_ChannelInit+0x178>)
 800272e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002730:	4b4e      	ldr	r3, [pc, #312]	; (800286c <HAL_DFSDM_ChannelInit+0x178>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d125      	bne.n	8002784 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002738:	4b4d      	ldr	r3, [pc, #308]	; (8002870 <HAL_DFSDM_ChannelInit+0x17c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a4c      	ldr	r2, [pc, #304]	; (8002870 <HAL_DFSDM_ChannelInit+0x17c>)
 800273e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002742:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002744:	4b4a      	ldr	r3, [pc, #296]	; (8002870 <HAL_DFSDM_ChannelInit+0x17c>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4948      	ldr	r1, [pc, #288]	; (8002870 <HAL_DFSDM_ChannelInit+0x17c>)
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002752:	4b47      	ldr	r3, [pc, #284]	; (8002870 <HAL_DFSDM_ChannelInit+0x17c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a46      	ldr	r2, [pc, #280]	; (8002870 <HAL_DFSDM_ChannelInit+0x17c>)
 8002758:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800275c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	791b      	ldrb	r3, [r3, #4]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d108      	bne.n	8002778 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002766:	4b42      	ldr	r3, [pc, #264]	; (8002870 <HAL_DFSDM_ChannelInit+0x17c>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	3b01      	subs	r3, #1
 8002770:	041b      	lsls	r3, r3, #16
 8002772:	493f      	ldr	r1, [pc, #252]	; (8002870 <HAL_DFSDM_ChannelInit+0x17c>)
 8002774:	4313      	orrs	r3, r2
 8002776:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002778:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_DFSDM_ChannelInit+0x17c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a3c      	ldr	r2, [pc, #240]	; (8002870 <HAL_DFSDM_ChannelInit+0x17c>)
 800277e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002782:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002792:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80027a2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80027a8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 020f 	bic.w	r2, r2, #15
 80027c0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6819      	ldr	r1, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80027e8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6899      	ldr	r1, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	3b01      	subs	r3, #1
 80027fa:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f002 0207 	and.w	r2, r2, #7
 8002814:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002840:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f000 f930 	bl	8002ab4 <DFSDM_GetChannelFromInstance>
 8002854:	4602      	mov	r2, r0
 8002856:	4904      	ldr	r1, [pc, #16]	; (8002868 <HAL_DFSDM_ChannelInit+0x174>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000220 	.word	0x20000220
 800286c:	2000021c 	.word	0x2000021c
 8002870:	40016000 	.word	0x40016000

08002874 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0ca      	b.n	8002a1c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a66      	ldr	r2, [pc, #408]	; (8002a24 <HAL_DFSDM_FilterInit+0x1b0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d109      	bne.n	80028a4 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002894:	2b01      	cmp	r3, #1
 8002896:	d003      	beq.n	80028a0 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0bb      	b.n	8002a1c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7fd fe3d 	bl	800053c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80028d0:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7a1b      	ldrb	r3, [r3, #8]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d108      	bne.n	80028ec <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e007      	b.n	80028fc <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80028fa:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7a5b      	ldrb	r3, [r3, #9]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d108      	bne.n	8002916 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	e007      	b.n	8002926 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002924:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002934:	f023 0308 	bic.w	r3, r3, #8
 8002938:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d108      	bne.n	8002954 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6819      	ldr	r1, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7c1b      	ldrb	r3, [r3, #16]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d108      	bne.n	800296e <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0210 	orr.w	r2, r2, #16
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e007      	b.n	800297e <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0210 	bic.w	r2, r2, #16
 800297c:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7c5b      	ldrb	r3, [r3, #17]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d108      	bne.n	8002998 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0220 	orr.w	r2, r2, #32
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e007      	b.n	80029a8 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0220 	bic.w	r2, r2, #32
 80029a6:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80029b6:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80029ba:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6959      	ldr	r1, [r3, #20]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80029ce:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80029d6:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699a      	ldr	r2, [r3, #24]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	7c1a      	ldrb	r2, [r3, #16]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f042 0201 	orr.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40016100 	.word	0x40016100

08002a28 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d02e      	beq.n	8002aa0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002a48:	2bff      	cmp	r3, #255	; 0xff
 8002a4a:	d029      	beq.n	8002aa0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5e:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d10d      	bne.n	8002a82 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e00a      	b.n	8002a98 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6819      	ldr	r1, [r3, #0]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a9e:	e001      	b.n	8002aa4 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <DFSDM_GetChannelFromInstance+0x7c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d102      	bne.n	8002aca <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	e02b      	b.n	8002b22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <DFSDM_GetChannelFromInstance+0x80>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d102      	bne.n	8002ad8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	e024      	b.n	8002b22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <DFSDM_GetChannelFromInstance+0x84>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d102      	bne.n	8002ae6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e01d      	b.n	8002b22 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <DFSDM_GetChannelFromInstance+0x88>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d102      	bne.n	8002af4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002aee:	2304      	movs	r3, #4
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	e016      	b.n	8002b22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <DFSDM_GetChannelFromInstance+0x8c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d102      	bne.n	8002b02 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002afc:	2305      	movs	r3, #5
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	e00f      	b.n	8002b22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a0f      	ldr	r2, [pc, #60]	; (8002b44 <DFSDM_GetChannelFromInstance+0x90>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d102      	bne.n	8002b10 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002b0a:	2306      	movs	r3, #6
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	e008      	b.n	8002b22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a0d      	ldr	r2, [pc, #52]	; (8002b48 <DFSDM_GetChannelFromInstance+0x94>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d102      	bne.n	8002b1e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002b18:	2307      	movs	r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e001      	b.n	8002b22 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002b22:	68fb      	ldr	r3, [r7, #12]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	40016000 	.word	0x40016000
 8002b34:	40016020 	.word	0x40016020
 8002b38:	40016040 	.word	0x40016040
 8002b3c:	40016080 	.word	0x40016080
 8002b40:	400160a0 	.word	0x400160a0
 8002b44:	400160c0 	.word	0x400160c0
 8002b48:	400160e0 	.word	0x400160e0

08002b4c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e08d      	b.n	8002c7a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <HAL_DMA_Init+0x138>)
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d80f      	bhi.n	8002b8a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4b45      	ldr	r3, [pc, #276]	; (8002c88 <HAL_DMA_Init+0x13c>)
 8002b72:	4413      	add	r3, r2
 8002b74:	4a45      	ldr	r2, [pc, #276]	; (8002c8c <HAL_DMA_Init+0x140>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	009a      	lsls	r2, r3, #2
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a42      	ldr	r2, [pc, #264]	; (8002c90 <HAL_DMA_Init+0x144>)
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
 8002b88:	e00e      	b.n	8002ba8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4b40      	ldr	r3, [pc, #256]	; (8002c94 <HAL_DMA_Init+0x148>)
 8002b92:	4413      	add	r3, r2
 8002b94:	4a3d      	ldr	r2, [pc, #244]	; (8002c8c <HAL_DMA_Init+0x140>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	009a      	lsls	r2, r3, #2
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a3c      	ldr	r2, [pc, #240]	; (8002c98 <HAL_DMA_Init+0x14c>)
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f8fe 	bl	8002dfc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c08:	d102      	bne.n	8002c10 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c24:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d010      	beq.n	8002c50 <HAL_DMA_Init+0x104>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d80c      	bhi.n	8002c50 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f91e 	bl	8002e78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	e008      	b.n	8002c62 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40020407 	.word	0x40020407
 8002c88:	bffdfff8 	.word	0xbffdfff8
 8002c8c:	cccccccd 	.word	0xcccccccd
 8002c90:	40020000 	.word	0x40020000
 8002c94:	bffdfbf8 	.word	0xbffdfbf8
 8002c98:	40020400 	.word	0x40020400

08002c9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	f003 031c 	and.w	r3, r3, #28
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d026      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x7a>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d021      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d107      	bne.n	8002cf0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0204 	bic.w	r2, r2, #4
 8002cee:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f003 021c 	and.w	r2, r3, #28
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	2104      	movs	r1, #4
 8002cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002d02:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d071      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002d14:	e06c      	b.n	8002df0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f003 031c 	and.w	r3, r3, #28
 8002d1e:	2202      	movs	r2, #2
 8002d20:	409a      	lsls	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d02e      	beq.n	8002d88 <HAL_DMA_IRQHandler+0xec>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d029      	beq.n	8002d88 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10b      	bne.n	8002d5a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 020a 	bic.w	r2, r2, #10
 8002d50:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f003 021c 	and.w	r2, r3, #28
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	2102      	movs	r1, #2
 8002d68:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d038      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d86:	e033      	b.n	8002df0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8c:	f003 031c 	and.w	r3, r3, #28
 8002d90:	2208      	movs	r2, #8
 8002d92:	409a      	lsls	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d02a      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x156>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d025      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 020e 	bic.w	r2, r2, #14
 8002db4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f003 021c 	and.w	r2, r3, #28
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002df0:	bf00      	nop
 8002df2:	bf00      	nop
}
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d80a      	bhi.n	8002e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e1c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6493      	str	r3, [r2, #72]	; 0x48
 8002e24:	e007      	b.n	8002e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	009a      	lsls	r2, r3, #2
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e30:	4413      	add	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	3b08      	subs	r3, #8
 8002e3e:	4a0c      	ldr	r2, [pc, #48]	; (8002e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	2201      	movs	r2, #1
 8002e56:	409a      	lsls	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40020407 	.word	0x40020407
 8002e6c:	4002081c 	.word	0x4002081c
 8002e70:	cccccccd 	.word	0xcccccccd
 8002e74:	40020880 	.word	0x40020880

08002e78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	461a      	mov	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e9a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	1000823f 	.word	0x1000823f
 8002ebc:	40020940 	.word	0x40020940

08002ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ece:	e166      	b.n	800319e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8002edc:	4013      	ands	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8158 	beq.w	8003198 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d005      	beq.n	8002f00 <HAL_GPIO_Init+0x40>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d130      	bne.n	8002f62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f36:	2201      	movs	r2, #1
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4013      	ands	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	091b      	lsrs	r3, r3, #4
 8002f4c:	f003 0201 	and.w	r2, r3, #1
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d017      	beq.n	8002f9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	2203      	movs	r2, #3
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4013      	ands	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d123      	bne.n	8002ff2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3208      	adds	r2, #8
 8002fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	220f      	movs	r2, #15
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	08da      	lsrs	r2, r3, #3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3208      	adds	r2, #8
 8002fec:	6939      	ldr	r1, [r7, #16]
 8002fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0203 	and.w	r2, r3, #3
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 80b2 	beq.w	8003198 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003034:	4b61      	ldr	r3, [pc, #388]	; (80031bc <HAL_GPIO_Init+0x2fc>)
 8003036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003038:	4a60      	ldr	r2, [pc, #384]	; (80031bc <HAL_GPIO_Init+0x2fc>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6613      	str	r3, [r2, #96]	; 0x60
 8003040:	4b5e      	ldr	r3, [pc, #376]	; (80031bc <HAL_GPIO_Init+0x2fc>)
 8003042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800304c:	4a5c      	ldr	r2, [pc, #368]	; (80031c0 <HAL_GPIO_Init+0x300>)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	089b      	lsrs	r3, r3, #2
 8003052:	3302      	adds	r3, #2
 8003054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003058:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	220f      	movs	r2, #15
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4013      	ands	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003076:	d02b      	beq.n	80030d0 <HAL_GPIO_Init+0x210>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a52      	ldr	r2, [pc, #328]	; (80031c4 <HAL_GPIO_Init+0x304>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d025      	beq.n	80030cc <HAL_GPIO_Init+0x20c>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a51      	ldr	r2, [pc, #324]	; (80031c8 <HAL_GPIO_Init+0x308>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d01f      	beq.n	80030c8 <HAL_GPIO_Init+0x208>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a50      	ldr	r2, [pc, #320]	; (80031cc <HAL_GPIO_Init+0x30c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d019      	beq.n	80030c4 <HAL_GPIO_Init+0x204>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a4f      	ldr	r2, [pc, #316]	; (80031d0 <HAL_GPIO_Init+0x310>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d013      	beq.n	80030c0 <HAL_GPIO_Init+0x200>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a4e      	ldr	r2, [pc, #312]	; (80031d4 <HAL_GPIO_Init+0x314>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00d      	beq.n	80030bc <HAL_GPIO_Init+0x1fc>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a4d      	ldr	r2, [pc, #308]	; (80031d8 <HAL_GPIO_Init+0x318>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d007      	beq.n	80030b8 <HAL_GPIO_Init+0x1f8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a4c      	ldr	r2, [pc, #304]	; (80031dc <HAL_GPIO_Init+0x31c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d101      	bne.n	80030b4 <HAL_GPIO_Init+0x1f4>
 80030b0:	2307      	movs	r3, #7
 80030b2:	e00e      	b.n	80030d2 <HAL_GPIO_Init+0x212>
 80030b4:	2308      	movs	r3, #8
 80030b6:	e00c      	b.n	80030d2 <HAL_GPIO_Init+0x212>
 80030b8:	2306      	movs	r3, #6
 80030ba:	e00a      	b.n	80030d2 <HAL_GPIO_Init+0x212>
 80030bc:	2305      	movs	r3, #5
 80030be:	e008      	b.n	80030d2 <HAL_GPIO_Init+0x212>
 80030c0:	2304      	movs	r3, #4
 80030c2:	e006      	b.n	80030d2 <HAL_GPIO_Init+0x212>
 80030c4:	2303      	movs	r3, #3
 80030c6:	e004      	b.n	80030d2 <HAL_GPIO_Init+0x212>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e002      	b.n	80030d2 <HAL_GPIO_Init+0x212>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_GPIO_Init+0x212>
 80030d0:	2300      	movs	r3, #0
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	f002 0203 	and.w	r2, r2, #3
 80030d8:	0092      	lsls	r2, r2, #2
 80030da:	4093      	lsls	r3, r2
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030e2:	4937      	ldr	r1, [pc, #220]	; (80031c0 <HAL_GPIO_Init+0x300>)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	3302      	adds	r3, #2
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030f0:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <HAL_GPIO_Init+0x320>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003114:	4a32      	ldr	r2, [pc, #200]	; (80031e0 <HAL_GPIO_Init+0x320>)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800311a:	4b31      	ldr	r3, [pc, #196]	; (80031e0 <HAL_GPIO_Init+0x320>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	43db      	mvns	r3, r3
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4013      	ands	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800313e:	4a28      	ldr	r2, [pc, #160]	; (80031e0 <HAL_GPIO_Init+0x320>)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003144:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <HAL_GPIO_Init+0x320>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	43db      	mvns	r3, r3
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003168:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <HAL_GPIO_Init+0x320>)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800316e:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <HAL_GPIO_Init+0x320>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	43db      	mvns	r3, r3
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003192:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <HAL_GPIO_Init+0x320>)
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	3301      	adds	r3, #1
 800319c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f47f ae91 	bne.w	8002ed0 <HAL_GPIO_Init+0x10>
  }
}
 80031ae:	bf00      	nop
 80031b0:	bf00      	nop
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40010000 	.word	0x40010000
 80031c4:	48000400 	.word	0x48000400
 80031c8:	48000800 	.word	0x48000800
 80031cc:	48000c00 	.word	0x48000c00
 80031d0:	48001000 	.word	0x48001000
 80031d4:	48001400 	.word	0x48001400
 80031d8:	48001800 	.word	0x48001800
 80031dc:	48001c00 	.word	0x48001c00
 80031e0:	40010400 	.word	0x40010400

080031e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
 80031f0:	4613      	mov	r3, r2
 80031f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031f4:	787b      	ldrb	r3, [r7, #1]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003200:	e002      	b.n	8003208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003202:	887a      	ldrh	r2, [r7, #2]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e081      	b.n	800332a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fd fc58 	bl	8000af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2224      	movs	r2, #36	; 0x24
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003264:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003274:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	e006      	b.n	800329c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800329a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d104      	bne.n	80032ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69d9      	ldr	r1, [r3, #28]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1a      	ldr	r2, [r3, #32]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b20      	cmp	r3, #32
 8003346:	d138      	bne.n	80033ba <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003352:	2302      	movs	r3, #2
 8003354:	e032      	b.n	80033bc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2224      	movs	r2, #36	; 0x24
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0201 	bic.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003384:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6819      	ldr	r1, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e000      	b.n	80033bc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033ba:	2302      	movs	r3, #2
  }
}
 80033bc:	4618      	mov	r0, r3
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b20      	cmp	r3, #32
 80033dc:	d139      	bne.n	8003452 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e033      	b.n	8003454 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2224      	movs	r2, #36	; 0x24
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0201 	bic.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800341a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0201 	orr.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	e000      	b.n	8003454 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003452:	2302      	movs	r3, #2
  }
}
 8003454:	4618      	mov	r0, r3
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003462:	b08f      	sub	sp, #60	; 0x3c
 8003464:	af0a      	add	r7, sp, #40	; 0x28
 8003466:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e116      	b.n	80036a0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f008 fb49 	bl	800bb24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2203      	movs	r2, #3
 8003496:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d102      	bne.n	80034ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f005 f964 	bl	800877e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	687e      	ldr	r6, [r7, #4]
 80034be:	466d      	mov	r5, sp
 80034c0:	f106 0410 	add.w	r4, r6, #16
 80034c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80034d4:	1d33      	adds	r3, r6, #4
 80034d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034d8:	6838      	ldr	r0, [r7, #0]
 80034da:	f005 f877 	bl	80085cc <USB_CoreInit>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0d7      	b.n	80036a0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2100      	movs	r1, #0
 80034f6:	4618      	mov	r0, r3
 80034f8:	f005 f952 	bl	80087a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]
 8003500:	e04a      	b.n	8003598 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003502:	7bfa      	ldrb	r2, [r7, #15]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	333d      	adds	r3, #61	; 0x3d
 8003512:	2201      	movs	r2, #1
 8003514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	333c      	adds	r3, #60	; 0x3c
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800352a:	7bfa      	ldrb	r2, [r7, #15]
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	b298      	uxth	r0, r3
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	3344      	adds	r3, #68	; 0x44
 800353e:	4602      	mov	r2, r0
 8003540:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003542:	7bfa      	ldrb	r2, [r7, #15]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	3340      	adds	r3, #64	; 0x40
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003556:	7bfa      	ldrb	r2, [r7, #15]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	3348      	adds	r3, #72	; 0x48
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	334c      	adds	r3, #76	; 0x4c
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	3354      	adds	r3, #84	; 0x54
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	3301      	adds	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d3af      	bcc.n	8003502 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	73fb      	strb	r3, [r7, #15]
 80035a6:	e044      	b.n	8003632 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035e6:	2200      	movs	r2, #0
 80035e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	3301      	adds	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	d3b5      	bcc.n	80035a8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	687e      	ldr	r6, [r7, #4]
 8003644:	466d      	mov	r5, sp
 8003646:	f106 0410 	add.w	r4, r6, #16
 800364a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800364c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800364e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003652:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003656:	e885 0003 	stmia.w	r5, {r0, r1}
 800365a:	1d33      	adds	r3, r6, #4
 800365c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800365e:	6838      	ldr	r0, [r7, #0]
 8003660:	f005 f8ea 	bl	8008838 <USB_DevInit>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2202      	movs	r2, #2
 800366e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e014      	b.n	80036a0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	2b01      	cmp	r3, #1
 800368c:	d102      	bne.n	8003694 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f001 f882 	bl	8004798 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f006 f972 	bl	8009982 <USB_DevDisconnect>

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_PCD_Start+0x1c>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e01c      	b.n	80036fe <HAL_PCD_Start+0x56>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d105      	bne.n	80036e0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f005 f839 	bl	800875c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f006 f926 	bl	8009940 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003706:	b590      	push	{r4, r7, lr}
 8003708:	b08d      	sub	sp, #52	; 0x34
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f006 f9e4 	bl	8009aea <USB_GetMode>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	f040 847e 	bne.w	8004026 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f006 f948 	bl	80099c4 <USB_ReadInterrupts>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8474 	beq.w	8004024 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	0a1b      	lsrs	r3, r3, #8
 8003746:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f006 f935 	bl	80099c4 <USB_ReadInterrupts>
 800375a:	4603      	mov	r3, r0
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b02      	cmp	r3, #2
 8003762:	d107      	bne.n	8003774 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f002 0202 	and.w	r2, r2, #2
 8003772:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f006 f923 	bl	80099c4 <USB_ReadInterrupts>
 800377e:	4603      	mov	r3, r0
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	2b10      	cmp	r3, #16
 8003786:	d161      	bne.n	800384c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0210 	bic.w	r2, r2, #16
 8003796:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	f003 020f 	and.w	r2, r3, #15
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	4413      	add	r3, r2
 80037b4:	3304      	adds	r3, #4
 80037b6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	0c5b      	lsrs	r3, r3, #17
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d124      	bne.n	800380e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d035      	beq.n	800383c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037de:	b29b      	uxth	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	6a38      	ldr	r0, [r7, #32]
 80037e4:	f005 ff5a 	bl	800969c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037f4:	441a      	add	r2, r3
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	6a1a      	ldr	r2, [r3, #32]
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003806:	441a      	add	r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	621a      	str	r2, [r3, #32]
 800380c:	e016      	b.n	800383c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	0c5b      	lsrs	r3, r3, #17
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	2b06      	cmp	r3, #6
 8003818:	d110      	bne.n	800383c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003820:	2208      	movs	r2, #8
 8003822:	4619      	mov	r1, r3
 8003824:	6a38      	ldr	r0, [r7, #32]
 8003826:	f005 ff39 	bl	800969c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	6a1a      	ldr	r2, [r3, #32]
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	091b      	lsrs	r3, r3, #4
 8003832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003836:	441a      	add	r2, r3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0210 	orr.w	r2, r2, #16
 800384a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f006 f8b7 	bl	80099c4 <USB_ReadInterrupts>
 8003856:	4603      	mov	r3, r0
 8003858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800385c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003860:	f040 80a7 	bne.w	80039b2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f006 f8bc 	bl	80099ea <USB_ReadDevAllOutEpInterrupt>
 8003872:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003874:	e099      	b.n	80039aa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 808e 	beq.w	800399e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f006 f8e0 	bl	8009a52 <USB_ReadDevOutEPInterrupt>
 8003892:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00c      	beq.n	80038b8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038aa:	461a      	mov	r2, r3
 80038ac:	2301      	movs	r3, #1
 80038ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fe96 	bl	80045e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00c      	beq.n	80038dc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ce:	461a      	mov	r2, r3
 80038d0:	2308      	movs	r3, #8
 80038d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fed2 	bl	8004680 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d008      	beq.n	80038f8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f2:	461a      	mov	r2, r3
 80038f4:	2310      	movs	r3, #16
 80038f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d030      	beq.n	8003964 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390a:	2b80      	cmp	r3, #128	; 0x80
 800390c:	d109      	bne.n	8003922 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800391c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003920:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4413      	add	r3, r2
 8003934:	3304      	adds	r3, #4
 8003936:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	78db      	ldrb	r3, [r3, #3]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d108      	bne.n	8003952 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	2200      	movs	r2, #0
 8003944:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	b2db      	uxtb	r3, r3
 800394a:	4619      	mov	r1, r3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f008 fa2d 	bl	800bdac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395e:	461a      	mov	r2, r3
 8003960:	2302      	movs	r3, #2
 8003962:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d008      	beq.n	8003980 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397a:	461a      	mov	r2, r3
 800397c:	2320      	movs	r3, #32
 800397e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d009      	beq.n	800399e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003996:	461a      	mov	r2, r3
 8003998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800399c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	3301      	adds	r3, #1
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	085b      	lsrs	r3, r3, #1
 80039a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f47f af62 	bne.w	8003876 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f006 f804 	bl	80099c4 <USB_ReadInterrupts>
 80039bc:	4603      	mov	r3, r0
 80039be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039c6:	f040 80a4 	bne.w	8003b12 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f006 f825 	bl	8009a1e <USB_ReadDevAllInEpInterrupt>
 80039d4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039da:	e096      	b.n	8003b0a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 808b 	beq.w	8003afe <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f006 f84b 	bl	8009a8e <USB_ReadDevInEPInterrupt>
 80039f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69f9      	ldr	r1, [r7, #28]
 8003a20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a24:	4013      	ands	r3, r2
 8003a26:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a34:	461a      	mov	r2, r3
 8003a36:	2301      	movs	r3, #1
 8003a38:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f008 f91e 	bl	800bc82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2308      	movs	r3, #8
 8003a60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2310      	movs	r3, #16
 8003a7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a94:	461a      	mov	r2, r3
 8003a96:	2340      	movs	r3, #64	; 0x40
 8003a98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d023      	beq.n	8003aec <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003aa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aa6:	6a38      	ldr	r0, [r7, #32]
 8003aa8:	f005 f812 	bl	8008ad0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	3338      	adds	r3, #56	; 0x38
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	4413      	add	r3, r2
 8003abc:	3304      	adds	r3, #4
 8003abe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	78db      	ldrb	r3, [r3, #3]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d108      	bne.n	8003ada <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2200      	movs	r2, #0
 8003acc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f008 f97b 	bl	800bdd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	2302      	movs	r3, #2
 8003aea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003af6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fcea 	bl	80044d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	3301      	adds	r3, #1
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b06:	085b      	lsrs	r3, r3, #1
 8003b08:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f47f af65 	bne.w	80039dc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f005 ff54 	bl	80099c4 <USB_ReadInterrupts>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b26:	d122      	bne.n	8003b6e <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d108      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b4e:	2100      	movs	r1, #0
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f008 fbad 	bl	800c2b0 <HAL_PCDEx_LPM_Callback>
 8003b56:	e002      	b.n	8003b5e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f008 f8ff 	bl	800bd5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f005 ff26 	bl	80099c4 <USB_ReadInterrupts>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b82:	d112      	bne.n	8003baa <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d102      	bne.n	8003b9a <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f008 f8bb 	bl	800bd10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ba8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f005 ff08 	bl	80099c4 <USB_ReadInterrupts>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bbe:	d121      	bne.n	8003c04 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003bce:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d111      	bne.n	8003bfe <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	089b      	lsrs	r3, r3, #2
 8003bea:	f003 020f 	and.w	r2, r3, #15
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f008 fb5a 	bl	800c2b0 <HAL_PCDEx_LPM_Callback>
 8003bfc:	e002      	b.n	8003c04 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f008 f886 	bl	800bd10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f005 fedb 	bl	80099c4 <USB_ReadInterrupts>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c18:	f040 80b5 	bne.w	8003d86 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2110      	movs	r1, #16
 8003c36:	4618      	mov	r0, r3
 8003c38:	f004 ff4a 	bl	8008ad0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c40:	e046      	b.n	8003cd0 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c54:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c82:	461a      	mov	r2, r3
 8003c84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c88:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c9a:	0151      	lsls	r1, r2, #5
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	440a      	add	r2, r1
 8003ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ca4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ca8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cba:	0151      	lsls	r1, r2, #5
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	440a      	add	r2, r1
 8003cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cc8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ccc:	3301      	adds	r3, #1
 8003cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d3b3      	bcc.n	8003c42 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ce8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003cec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d016      	beq.n	8003d24 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d06:	f043 030b 	orr.w	r3, r3, #11
 8003d0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d1c:	f043 030b 	orr.w	r3, r3, #11
 8003d20:	6453      	str	r3, [r2, #68]	; 0x44
 8003d22:	e015      	b.n	8003d50 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d36:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d4a:	f043 030b 	orr.w	r3, r3, #11
 8003d4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f005 feeb 	bl	8009b4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695a      	ldr	r2, [r3, #20]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f005 fe1a 	bl	80099c4 <USB_ReadInterrupts>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9a:	d124      	bne.n	8003de6 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f005 feb0 	bl	8009b06 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f004 ff0d 	bl	8008bca <USB_GetDevSpeed>
 8003db0:	4603      	mov	r3, r0
 8003db2:	461a      	mov	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681c      	ldr	r4, [r3, #0]
 8003dbc:	f001 fbe0 	bl	8005580 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f004 fc2a 	bl	8008624 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f007 ff7e 	bl	800bcd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f005 fdea 	bl	80099c4 <USB_ReadInterrupts>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d10a      	bne.n	8003e10 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f007 ff5b 	bl	800bcb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f002 0208 	and.w	r2, r2, #8
 8003e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f005 fdd5 	bl	80099c4 <USB_ReadInterrupts>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e20:	2b80      	cmp	r3, #128	; 0x80
 8003e22:	d122      	bne.n	8003e6a <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e30:	2301      	movs	r3, #1
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
 8003e34:	e014      	b.n	8003e60 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d105      	bne.n	8003e5a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	4619      	mov	r1, r3
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fb0b 	bl	8004470 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d3e5      	bcc.n	8003e36 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f005 fda8 	bl	80099c4 <USB_ReadInterrupts>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e7e:	d13b      	bne.n	8003ef8 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e80:	2301      	movs	r3, #1
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
 8003e84:	e02b      	b.n	8003ede <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	3340      	adds	r3, #64	; 0x40
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d115      	bne.n	8003ed8 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003eac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	da12      	bge.n	8003ed8 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	333f      	adds	r3, #63	; 0x3f
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 facc 	bl	8004470 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	3301      	adds	r3, #1
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d3ce      	bcc.n	8003e86 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ef6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f005 fd61 	bl	80099c4 <USB_ReadInterrupts>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f0c:	d155      	bne.n	8003fba <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f0e:	2301      	movs	r3, #1
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
 8003f12:	e045      	b.n	8003fa0 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f28:	4613      	mov	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d12e      	bne.n	8003f9a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	da2b      	bge.n	8003f9a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003f4e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d121      	bne.n	8003f9a <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003f68:	2201      	movs	r2, #1
 8003f6a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f96:	6053      	str	r3, [r2, #4]
            break;
 8003f98:	e007      	b.n	8003faa <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d3b4      	bcc.n	8003f14 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003fb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f005 fd00 	bl	80099c4 <USB_ReadInterrupts>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fce:	d10a      	bne.n	8003fe6 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f007 ff0f 	bl	800bdf4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f005 fcea 	bl	80099c4 <USB_ReadInterrupts>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d115      	bne.n	8004026 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f007 feff 	bl	800be10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
 8004022:	e000      	b.n	8004026 <HAL_PCD_IRQHandler+0x920>
      return;
 8004024:	bf00      	nop
    }
  }
}
 8004026:	3734      	adds	r7, #52	; 0x34
 8004028:	46bd      	mov	sp, r7
 800402a:	bd90      	pop	{r4, r7, pc}

0800402c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_PCD_SetAddress+0x1a>
 8004042:	2302      	movs	r3, #2
 8004044:	e013      	b.n	800406e <HAL_PCD_SetAddress+0x42>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	78fa      	ldrb	r2, [r7, #3]
 800405c:	4611      	mov	r1, r2
 800405e:	4618      	mov	r0, r3
 8004060:	f005 fc48 	bl	80098f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	4608      	mov	r0, r1
 8004080:	4611      	mov	r1, r2
 8004082:	461a      	mov	r2, r3
 8004084:	4603      	mov	r3, r0
 8004086:	70fb      	strb	r3, [r7, #3]
 8004088:	460b      	mov	r3, r1
 800408a:	803b      	strh	r3, [r7, #0]
 800408c:	4613      	mov	r3, r2
 800408e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004098:	2b00      	cmp	r3, #0
 800409a:	da0f      	bge.n	80040bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	f003 020f 	and.w	r2, r3, #15
 80040a2:	4613      	mov	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	3338      	adds	r3, #56	; 0x38
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	4413      	add	r3, r2
 80040b0:	3304      	adds	r3, #4
 80040b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	705a      	strb	r2, [r3, #1]
 80040ba:	e00f      	b.n	80040dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	f003 020f 	and.w	r2, r3, #15
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4413      	add	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4413      	add	r3, r2
 80040d2:	3304      	adds	r3, #4
 80040d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040e8:	883a      	ldrh	r2, [r7, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	78ba      	ldrb	r2, [r7, #2]
 80040f2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	785b      	ldrb	r3, [r3, #1]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d004      	beq.n	8004106 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004106:	78bb      	ldrb	r3, [r7, #2]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d102      	bne.n	8004112 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_PCD_EP_Open+0xaa>
 800411c:	2302      	movs	r3, #2
 800411e:	e00e      	b.n	800413e <HAL_PCD_EP_Open+0xc8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68f9      	ldr	r1, [r7, #12]
 800412e:	4618      	mov	r0, r3
 8004130:	f004 fd6a 	bl	8008c08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800413c:	7afb      	ldrb	r3, [r7, #11]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	460b      	mov	r3, r1
 8004150:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004152:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004156:	2b00      	cmp	r3, #0
 8004158:	da0f      	bge.n	800417a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	f003 020f 	and.w	r2, r3, #15
 8004160:	4613      	mov	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	3338      	adds	r3, #56	; 0x38
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	3304      	adds	r3, #4
 8004170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	705a      	strb	r2, [r3, #1]
 8004178:	e00f      	b.n	800419a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	f003 020f 	and.w	r2, r3, #15
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	4413      	add	r3, r2
 8004190:	3304      	adds	r3, #4
 8004192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_PCD_EP_Close+0x6e>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e00e      	b.n	80041d2 <HAL_PCD_EP_Close+0x8c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68f9      	ldr	r1, [r7, #12]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f004 fda8 	bl	8008d18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b086      	sub	sp, #24
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
 80041e6:	460b      	mov	r3, r1
 80041e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041ea:	7afb      	ldrb	r3, [r7, #11]
 80041ec:	f003 020f 	and.w	r2, r3, #15
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	3304      	adds	r3, #4
 8004202:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2200      	movs	r2, #0
 8004214:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2200      	movs	r2, #0
 800421a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800421c:	7afb      	ldrb	r3, [r7, #11]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	b2da      	uxtb	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004228:	7afb      	ldrb	r3, [r7, #11]
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6979      	ldr	r1, [r7, #20]
 8004238:	4618      	mov	r0, r3
 800423a:	f005 f829 	bl	8009290 <USB_EP0StartXfer>
 800423e:	e005      	b.n	800424c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6979      	ldr	r1, [r7, #20]
 8004246:	4618      	mov	r0, r3
 8004248:	f004 fe42 	bl	8008ed0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	460b      	mov	r3, r1
 8004260:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	f003 020f 	and.w	r2, r3, #15
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004278:	681b      	ldr	r3, [r3, #0]
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b086      	sub	sp, #24
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
 8004292:	460b      	mov	r3, r1
 8004294:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004296:	7afb      	ldrb	r3, [r7, #11]
 8004298:	f003 020f 	and.w	r2, r3, #15
 800429c:	4613      	mov	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4413      	add	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	3338      	adds	r3, #56	; 0x38
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4413      	add	r3, r2
 80042aa:	3304      	adds	r3, #4
 80042ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2200      	movs	r2, #0
 80042be:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2201      	movs	r2, #1
 80042c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042c6:	7afb      	ldrb	r3, [r7, #11]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042d2:	7afb      	ldrb	r3, [r7, #11]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d106      	bne.n	80042ea <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6979      	ldr	r1, [r7, #20]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f004 ffd4 	bl	8009290 <USB_EP0StartXfer>
 80042e8:	e005      	b.n	80042f6 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6979      	ldr	r1, [r7, #20]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f004 fded 	bl	8008ed0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	f003 020f 	and.w	r2, r3, #15
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	429a      	cmp	r2, r3
 8004318:	d901      	bls.n	800431e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e04e      	b.n	80043bc <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800431e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004322:	2b00      	cmp	r3, #0
 8004324:	da0f      	bge.n	8004346 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004326:	78fb      	ldrb	r3, [r7, #3]
 8004328:	f003 020f 	and.w	r2, r3, #15
 800432c:	4613      	mov	r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	3338      	adds	r3, #56	; 0x38
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	4413      	add	r3, r2
 800433a:	3304      	adds	r3, #4
 800433c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	705a      	strb	r2, [r3, #1]
 8004344:	e00d      	b.n	8004362 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	4613      	mov	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	3304      	adds	r3, #4
 800435a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	b2da      	uxtb	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_PCD_EP_SetStall+0x82>
 800437e:	2302      	movs	r3, #2
 8004380:	e01c      	b.n	80043bc <HAL_PCD_EP_SetStall+0xbc>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68f9      	ldr	r1, [r7, #12]
 8004390:	4618      	mov	r0, r3
 8004392:	f005 f9db 	bl	800974c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	2b00      	cmp	r3, #0
 800439e:	d108      	bne.n	80043b2 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043aa:	4619      	mov	r1, r3
 80043ac:	4610      	mov	r0, r2
 80043ae:	f005 fbcd 	bl	8009b4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	f003 020f 	and.w	r2, r3, #15
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d901      	bls.n	80043e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e042      	b.n	8004468 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	da0f      	bge.n	800440a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	f003 020f 	and.w	r2, r3, #15
 80043f0:	4613      	mov	r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	3338      	adds	r3, #56	; 0x38
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	4413      	add	r3, r2
 80043fe:	3304      	adds	r3, #4
 8004400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	705a      	strb	r2, [r3, #1]
 8004408:	e00f      	b.n	800442a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	f003 020f 	and.w	r2, r3, #15
 8004410:	4613      	mov	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	4413      	add	r3, r2
 8004420:	3304      	adds	r3, #4
 8004422:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	b2da      	uxtb	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_PCD_EP_ClrStall+0x86>
 8004446:	2302      	movs	r3, #2
 8004448:	e00e      	b.n	8004468 <HAL_PCD_EP_ClrStall+0xa4>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68f9      	ldr	r1, [r7, #12]
 8004458:	4618      	mov	r0, r3
 800445a:	f005 f9e5 	bl	8009828 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800447c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004480:	2b00      	cmp	r3, #0
 8004482:	da0c      	bge.n	800449e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	f003 020f 	and.w	r2, r3, #15
 800448a:	4613      	mov	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	3338      	adds	r3, #56	; 0x38
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	4413      	add	r3, r2
 8004498:	3304      	adds	r3, #4
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	e00c      	b.n	80044b8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	4613      	mov	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	4413      	add	r3, r2
 80044b4:	3304      	adds	r3, #4
 80044b6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68f9      	ldr	r1, [r7, #12]
 80044be:	4618      	mov	r0, r3
 80044c0:	f005 f808 	bl	80094d4 <USB_EPStopXfer>
 80044c4:	4603      	mov	r3, r0
 80044c6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80044c8:	7afb      	ldrb	r3, [r7, #11]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b088      	sub	sp, #32
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	3338      	adds	r3, #56	; 0x38
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	3304      	adds	r3, #4
 80044f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a1a      	ldr	r2, [r3, #32]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	429a      	cmp	r2, r3
 8004504:	d901      	bls.n	800450a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e067      	b.n	80045da <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	429a      	cmp	r2, r3
 800451e:	d902      	bls.n	8004526 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	3303      	adds	r3, #3
 800452a:	089b      	lsrs	r3, r3, #2
 800452c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800452e:	e026      	b.n	800457e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	699a      	ldr	r2, [r3, #24]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	429a      	cmp	r2, r3
 8004544:	d902      	bls.n	800454c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	3303      	adds	r3, #3
 8004550:	089b      	lsrs	r3, r3, #2
 8004552:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6919      	ldr	r1, [r3, #16]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	b2da      	uxtb	r2, r3
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	b29b      	uxth	r3, r3
 8004560:	6978      	ldr	r0, [r7, #20]
 8004562:	f005 f861 	bl	8009628 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	441a      	add	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1a      	ldr	r2, [r3, #32]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	441a      	add	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	b29b      	uxth	r3, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	429a      	cmp	r2, r3
 8004592:	d809      	bhi.n	80045a8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a1a      	ldr	r2, [r3, #32]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800459c:	429a      	cmp	r2, r3
 800459e:	d203      	bcs.n	80045a8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1c3      	bne.n	8004530 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	699a      	ldr	r2, [r3, #24]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d811      	bhi.n	80045d8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	2201      	movs	r2, #1
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	43db      	mvns	r3, r3
 80045ce:	6939      	ldr	r1, [r7, #16]
 80045d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045d4:	4013      	ands	r3, r2
 80045d6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3720      	adds	r7, #32
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	333c      	adds	r3, #60	; 0x3c
 80045fc:	3304      	adds	r3, #4
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4a19      	ldr	r2, [pc, #100]	; (800467c <PCD_EP_OutXfrComplete_int+0x98>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d124      	bne.n	8004664 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004630:	461a      	mov	r2, r3
 8004632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004636:	6093      	str	r3, [r2, #8]
 8004638:	e01a      	b.n	8004670 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f003 0320 	and.w	r3, r3, #32
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004650:	461a      	mov	r2, r3
 8004652:	2320      	movs	r3, #32
 8004654:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	4619      	mov	r1, r3
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f007 faf5 	bl	800bc4c <HAL_PCD_DataOutStageCallback>
 8004662:	e005      	b.n	8004670 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	4619      	mov	r1, r3
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f007 faee 	bl	800bc4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	4f54310a 	.word	0x4f54310a

08004680 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	333c      	adds	r3, #60	; 0x3c
 8004698:	3304      	adds	r3, #4
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4a0c      	ldr	r2, [pc, #48]	; (80046e4 <PCD_EP_OutSetupPacket_int+0x64>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d90e      	bls.n	80046d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d009      	beq.n	80046d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046cc:	461a      	mov	r2, r3
 80046ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f007 faa7 	bl	800bc28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	4f54300a 	.word	0x4f54300a

080046e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	70fb      	strb	r3, [r7, #3]
 80046f4:	4613      	mov	r3, r2
 80046f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d107      	bne.n	8004716 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004706:	883b      	ldrh	r3, [r7, #0]
 8004708:	0419      	lsls	r1, r3, #16
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	430a      	orrs	r2, r1
 8004712:	629a      	str	r2, [r3, #40]	; 0x28
 8004714:	e028      	b.n	8004768 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	0c1b      	lsrs	r3, r3, #16
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	4413      	add	r3, r2
 8004722:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004724:	2300      	movs	r3, #0
 8004726:	73fb      	strb	r3, [r7, #15]
 8004728:	e00d      	b.n	8004746 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	3340      	adds	r3, #64	; 0x40
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	0c1b      	lsrs	r3, r3, #16
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	4413      	add	r3, r2
 800473e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	3301      	adds	r3, #1
 8004744:	73fb      	strb	r3, [r7, #15]
 8004746:	7bfa      	ldrb	r2, [r7, #15]
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	3b01      	subs	r3, #1
 800474c:	429a      	cmp	r2, r3
 800474e:	d3ec      	bcc.n	800472a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004750:	883b      	ldrh	r3, [r7, #0]
 8004752:	0418      	lsls	r0, r3, #16
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6819      	ldr	r1, [r3, #0]
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	3b01      	subs	r3, #1
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	4302      	orrs	r2, r0
 8004760:	3340      	adds	r3, #64	; 0x40
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	887a      	ldrh	r2, [r7, #2]
 8004788:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ca:	f043 0303 	orr.w	r3, r3, #3
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a04      	ldr	r2, [pc, #16]	; (80047fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ee:	6013      	str	r3, [r2, #0]
}
 80047f0:	bf00      	nop
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40007000 	.word	0x40007000

08004800 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004804:	4b0d      	ldr	r3, [pc, #52]	; (800483c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800480c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004810:	d102      	bne.n	8004818 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004816:	e00b      	b.n	8004830 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004818:	4b08      	ldr	r3, [pc, #32]	; (800483c <HAL_PWREx_GetVoltageRange+0x3c>)
 800481a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800481e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004826:	d102      	bne.n	800482e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800482c:	e000      	b.n	8004830 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800482e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40007000 	.word	0x40007000

08004840 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d141      	bne.n	80048d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800484e:	4b4b      	ldr	r3, [pc, #300]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485a:	d131      	bne.n	80048c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800485c:	4b47      	ldr	r3, [pc, #284]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004862:	4a46      	ldr	r2, [pc, #280]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004868:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800486c:	4b43      	ldr	r3, [pc, #268]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004874:	4a41      	ldr	r2, [pc, #260]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800487a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800487c:	4b40      	ldr	r3, [pc, #256]	; (8004980 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2232      	movs	r2, #50	; 0x32
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	4a3f      	ldr	r2, [pc, #252]	; (8004984 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004888:	fba2 2303 	umull	r2, r3, r2, r3
 800488c:	0c9b      	lsrs	r3, r3, #18
 800488e:	3301      	adds	r3, #1
 8004890:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004892:	e002      	b.n	800489a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3b01      	subs	r3, #1
 8004898:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800489a:	4b38      	ldr	r3, [pc, #224]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a6:	d102      	bne.n	80048ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f2      	bne.n	8004894 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048ae:	4b33      	ldr	r3, [pc, #204]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ba:	d158      	bne.n	800496e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e057      	b.n	8004970 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048c0:	4b2e      	ldr	r3, [pc, #184]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048c6:	4a2d      	ldr	r2, [pc, #180]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048d0:	e04d      	b.n	800496e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d8:	d141      	bne.n	800495e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048da:	4b28      	ldr	r3, [pc, #160]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e6:	d131      	bne.n	800494c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048e8:	4b24      	ldr	r3, [pc, #144]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ee:	4a23      	ldr	r2, [pc, #140]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048f8:	4b20      	ldr	r3, [pc, #128]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004900:	4a1e      	ldr	r2, [pc, #120]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004906:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004908:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2232      	movs	r2, #50	; 0x32
 800490e:	fb02 f303 	mul.w	r3, r2, r3
 8004912:	4a1c      	ldr	r2, [pc, #112]	; (8004984 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004914:	fba2 2303 	umull	r2, r3, r2, r3
 8004918:	0c9b      	lsrs	r3, r3, #18
 800491a:	3301      	adds	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800491e:	e002      	b.n	8004926 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3b01      	subs	r3, #1
 8004924:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004926:	4b15      	ldr	r3, [pc, #84]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800492e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004932:	d102      	bne.n	800493a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1f2      	bne.n	8004920 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800493a:	4b10      	ldr	r3, [pc, #64]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004946:	d112      	bne.n	800496e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e011      	b.n	8004970 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800494c:	4b0b      	ldr	r3, [pc, #44]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004952:	4a0a      	ldr	r2, [pc, #40]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004958:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800495c:	e007      	b.n	800496e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800495e:	4b07      	ldr	r3, [pc, #28]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004966:	4a05      	ldr	r2, [pc, #20]	; (800497c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004968:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800496c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	40007000 	.word	0x40007000
 8004980:	20000000 	.word	0x20000000
 8004984:	431bde83 	.word	0x431bde83

08004988 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	4a04      	ldr	r2, [pc, #16]	; (80049a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004996:	6053      	str	r3, [r2, #4]
}
 8004998:	bf00      	nop
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40007000 	.word	0x40007000

080049a8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80049ac:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a04      	ldr	r2, [pc, #16]	; (80049c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80049b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049b6:	6053      	str	r3, [r2, #4]
}
 80049b8:	bf00      	nop
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40007000 	.word	0x40007000

080049c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f000 bc04 	b.w	80051e4 <HAL_RCC_OscConfig+0x81c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049dc:	4ba0      	ldr	r3, [pc, #640]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049e6:	4b9e      	ldr	r3, [pc, #632]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80e4 	beq.w	8004bc6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <HAL_RCC_OscConfig+0x4c>
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	f040 808b 	bne.w	8004b22 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	f040 8087 	bne.w	8004b22 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a14:	4b92      	ldr	r3, [pc, #584]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_RCC_OscConfig+0x64>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e3db      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1a      	ldr	r2, [r3, #32]
 8004a30:	4b8b      	ldr	r3, [pc, #556]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <HAL_RCC_OscConfig+0x7e>
 8004a3c:	4b88      	ldr	r3, [pc, #544]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a44:	e005      	b.n	8004a52 <HAL_RCC_OscConfig+0x8a>
 8004a46:	4b86      	ldr	r3, [pc, #536]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d223      	bcs.n	8004a9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fd9c 	bl	8005598 <RCC_SetFlashLatencyFromMSIRange>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e3bc      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a6a:	4b7d      	ldr	r3, [pc, #500]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a7c      	ldr	r2, [pc, #496]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004a70:	f043 0308 	orr.w	r3, r3, #8
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4b7a      	ldr	r3, [pc, #488]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	4977      	ldr	r1, [pc, #476]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a88:	4b75      	ldr	r3, [pc, #468]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	4972      	ldr	r1, [pc, #456]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	604b      	str	r3, [r1, #4]
 8004a9c:	e025      	b.n	8004aea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a9e:	4b70      	ldr	r3, [pc, #448]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a6f      	ldr	r2, [pc, #444]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004aa4:	f043 0308 	orr.w	r3, r3, #8
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4b6d      	ldr	r3, [pc, #436]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	496a      	ldr	r1, [pc, #424]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004abc:	4b68      	ldr	r3, [pc, #416]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	021b      	lsls	r3, r3, #8
 8004aca:	4965      	ldr	r1, [pc, #404]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fd5c 	bl	8005598 <RCC_SetFlashLatencyFromMSIRange>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e37c      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aea:	f000 fcbf 	bl	800546c <HAL_RCC_GetSysClockFreq>
 8004aee:	4602      	mov	r2, r0
 8004af0:	4b5b      	ldr	r3, [pc, #364]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	495a      	ldr	r1, [pc, #360]	; (8004c64 <HAL_RCC_OscConfig+0x29c>)
 8004afc:	5ccb      	ldrb	r3, [r1, r3]
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	fa22 f303 	lsr.w	r3, r2, r3
 8004b06:	4a58      	ldr	r2, [pc, #352]	; (8004c68 <HAL_RCC_OscConfig+0x2a0>)
 8004b08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b0a:	4b58      	ldr	r3, [pc, #352]	; (8004c6c <HAL_RCC_OscConfig+0x2a4>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fc fd76 	bl	8001600 <HAL_InitTick>
 8004b14:	4603      	mov	r3, r0
 8004b16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d052      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	e360      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d032      	beq.n	8004b90 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b2a:	4b4d      	ldr	r3, [pc, #308]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a4c      	ldr	r2, [pc, #304]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b36:	f7fc fdb3 	bl	80016a0 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b3e:	f7fc fdaf 	bl	80016a0 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e349      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b50:	4b43      	ldr	r3, [pc, #268]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b5c:	4b40      	ldr	r3, [pc, #256]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a3f      	ldr	r2, [pc, #252]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004b62:	f043 0308 	orr.w	r3, r3, #8
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	4b3d      	ldr	r3, [pc, #244]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	493a      	ldr	r1, [pc, #232]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b7a:	4b39      	ldr	r3, [pc, #228]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	021b      	lsls	r3, r3, #8
 8004b88:	4935      	ldr	r1, [pc, #212]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	604b      	str	r3, [r1, #4]
 8004b8e:	e01a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b90:	4b33      	ldr	r3, [pc, #204]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a32      	ldr	r2, [pc, #200]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004b96:	f023 0301 	bic.w	r3, r3, #1
 8004b9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b9c:	f7fc fd80 	bl	80016a0 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ba4:	f7fc fd7c 	bl	80016a0 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e316      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bb6:	4b2a      	ldr	r3, [pc, #168]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x1dc>
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d073      	beq.n	8004cba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d005      	beq.n	8004be4 <HAL_RCC_OscConfig+0x21c>
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2b0c      	cmp	r3, #12
 8004bdc:	d10e      	bne.n	8004bfc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d10b      	bne.n	8004bfc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	4b1e      	ldr	r3, [pc, #120]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d063      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x2f0>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d15f      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e2f3      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c04:	d106      	bne.n	8004c14 <HAL_RCC_OscConfig+0x24c>
 8004c06:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a15      	ldr	r2, [pc, #84]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e01d      	b.n	8004c50 <HAL_RCC_OscConfig+0x288>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x270>
 8004c1e:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a0f      	ldr	r2, [pc, #60]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a0c      	ldr	r2, [pc, #48]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e00b      	b.n	8004c50 <HAL_RCC_OscConfig+0x288>
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a08      	ldr	r2, [pc, #32]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a05      	ldr	r2, [pc, #20]	; (8004c60 <HAL_RCC_OscConfig+0x298>)
 8004c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01b      	beq.n	8004c90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fc fd22 	bl	80016a0 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c5e:	e010      	b.n	8004c82 <HAL_RCC_OscConfig+0x2ba>
 8004c60:	40021000 	.word	0x40021000
 8004c64:	0800ccb0 	.word	0x0800ccb0
 8004c68:	20000000 	.word	0x20000000
 8004c6c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c70:	f7fc fd16 	bl	80016a0 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b64      	cmp	r3, #100	; 0x64
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e2b0      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c82:	4baf      	ldr	r3, [pc, #700]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f0      	beq.n	8004c70 <HAL_RCC_OscConfig+0x2a8>
 8004c8e:	e014      	b.n	8004cba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c90:	f7fc fd06 	bl	80016a0 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c98:	f7fc fd02 	bl	80016a0 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b64      	cmp	r3, #100	; 0x64
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e29c      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004caa:	4ba5      	ldr	r3, [pc, #660]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f0      	bne.n	8004c98 <HAL_RCC_OscConfig+0x2d0>
 8004cb6:	e000      	b.n	8004cba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d060      	beq.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x310>
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2b0c      	cmp	r3, #12
 8004cd0:	d119      	bne.n	8004d06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d116      	bne.n	8004d06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cd8:	4b99      	ldr	r3, [pc, #612]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x328>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e279      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf0:	4b93      	ldr	r3, [pc, #588]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	061b      	lsls	r3, r3, #24
 8004cfe:	4990      	ldr	r1, [pc, #576]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d04:	e040      	b.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d023      	beq.n	8004d56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d0e:	4b8c      	ldr	r3, [pc, #560]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a8b      	ldr	r2, [pc, #556]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1a:	f7fc fcc1 	bl	80016a0 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d22:	f7fc fcbd 	bl	80016a0 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e257      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d34:	4b82      	ldr	r3, [pc, #520]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d40:	4b7f      	ldr	r3, [pc, #508]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	061b      	lsls	r3, r3, #24
 8004d4e:	497c      	ldr	r1, [pc, #496]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	604b      	str	r3, [r1, #4]
 8004d54:	e018      	b.n	8004d88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d56:	4b7a      	ldr	r3, [pc, #488]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a79      	ldr	r2, [pc, #484]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d62:	f7fc fc9d 	bl	80016a0 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d6a:	f7fc fc99 	bl	80016a0 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e233      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d7c:	4b70      	ldr	r3, [pc, #448]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f0      	bne.n	8004d6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d03c      	beq.n	8004e0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01c      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d9c:	4b68      	ldr	r3, [pc, #416]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004da2:	4a67      	ldr	r2, [pc, #412]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dac:	f7fc fc78 	bl	80016a0 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db4:	f7fc fc74 	bl	80016a0 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e20e      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dc6:	4b5e      	ldr	r3, [pc, #376]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0ef      	beq.n	8004db4 <HAL_RCC_OscConfig+0x3ec>
 8004dd4:	e01b      	b.n	8004e0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dd6:	4b5a      	ldr	r3, [pc, #360]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ddc:	4a58      	ldr	r2, [pc, #352]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de6:	f7fc fc5b 	bl	80016a0 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dee:	f7fc fc57 	bl	80016a0 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e1f1      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e00:	4b4f      	ldr	r3, [pc, #316]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1ef      	bne.n	8004dee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 80a6 	beq.w	8004f68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e20:	4b47      	ldr	r3, [pc, #284]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10d      	bne.n	8004e48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e2c:	4b44      	ldr	r3, [pc, #272]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e30:	4a43      	ldr	r2, [pc, #268]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e36:	6593      	str	r3, [r2, #88]	; 0x58
 8004e38:	4b41      	ldr	r3, [pc, #260]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e44:	2301      	movs	r3, #1
 8004e46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e48:	4b3e      	ldr	r3, [pc, #248]	; (8004f44 <HAL_RCC_OscConfig+0x57c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d118      	bne.n	8004e86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e54:	4b3b      	ldr	r3, [pc, #236]	; (8004f44 <HAL_RCC_OscConfig+0x57c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a3a      	ldr	r2, [pc, #232]	; (8004f44 <HAL_RCC_OscConfig+0x57c>)
 8004e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e60:	f7fc fc1e 	bl	80016a0 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e68:	f7fc fc1a 	bl	80016a0 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e1b4      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e7a:	4b32      	ldr	r3, [pc, #200]	; (8004f44 <HAL_RCC_OscConfig+0x57c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d108      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x4d8>
 8004e8e:	4b2c      	ldr	r3, [pc, #176]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e94:	4a2a      	ldr	r2, [pc, #168]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004e96:	f043 0301 	orr.w	r3, r3, #1
 8004e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e9e:	e024      	b.n	8004eea <HAL_RCC_OscConfig+0x522>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b05      	cmp	r3, #5
 8004ea6:	d110      	bne.n	8004eca <HAL_RCC_OscConfig+0x502>
 8004ea8:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eae:	4a24      	ldr	r2, [pc, #144]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004eb0:	f043 0304 	orr.w	r3, r3, #4
 8004eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004eb8:	4b21      	ldr	r3, [pc, #132]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebe:	4a20      	ldr	r2, [pc, #128]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ec8:	e00f      	b.n	8004eea <HAL_RCC_OscConfig+0x522>
 8004eca:	4b1d      	ldr	r3, [pc, #116]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed0:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
 8004ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004eda:	4b19      	ldr	r3, [pc, #100]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee0:	4a17      	ldr	r2, [pc, #92]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004ee2:	f023 0304 	bic.w	r3, r3, #4
 8004ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d016      	beq.n	8004f20 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef2:	f7fc fbd5 	bl	80016a0 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef8:	e00a      	b.n	8004f10 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efa:	f7fc fbd1 	bl	80016a0 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e169      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f10:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <HAL_RCC_OscConfig+0x578>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0ed      	beq.n	8004efa <HAL_RCC_OscConfig+0x532>
 8004f1e:	e01a      	b.n	8004f56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f20:	f7fc fbbe 	bl	80016a0 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f26:	e00f      	b.n	8004f48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f28:	f7fc fbba 	bl	80016a0 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d906      	bls.n	8004f48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e152      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
 8004f3e:	bf00      	nop
 8004f40:	40021000 	.word	0x40021000
 8004f44:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f48:	4ba8      	ldr	r3, [pc, #672]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e8      	bne.n	8004f28 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f56:	7ffb      	ldrb	r3, [r7, #31]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d105      	bne.n	8004f68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f5c:	4ba3      	ldr	r3, [pc, #652]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8004f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f60:	4aa2      	ldr	r2, [pc, #648]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8004f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d03c      	beq.n	8004fee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01c      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f7c:	4b9b      	ldr	r3, [pc, #620]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8004f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f82:	4a9a      	ldr	r2, [pc, #616]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8c:	f7fc fb88 	bl	80016a0 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f94:	f7fc fb84 	bl	80016a0 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e11e      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fa6:	4b91      	ldr	r3, [pc, #580]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8004fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0ef      	beq.n	8004f94 <HAL_RCC_OscConfig+0x5cc>
 8004fb4:	e01b      	b.n	8004fee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fb6:	4b8d      	ldr	r3, [pc, #564]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8004fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fbc:	4a8b      	ldr	r2, [pc, #556]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc6:	f7fc fb6b 	bl	80016a0 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fce:	f7fc fb67 	bl	80016a0 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e101      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fe0:	4b82      	ldr	r3, [pc, #520]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8004fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1ef      	bne.n	8004fce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 80f5 	beq.w	80051e2 <HAL_RCC_OscConfig+0x81a>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	f040 80cb 	bne.w	8005198 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005002:	4b7a      	ldr	r3, [pc, #488]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f003 0203 	and.w	r2, r3, #3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005012:	429a      	cmp	r2, r3
 8005014:	d12c      	bne.n	8005070 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005020:	3b01      	subs	r3, #1
 8005022:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d123      	bne.n	8005070 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005032:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005034:	429a      	cmp	r2, r3
 8005036:	d11b      	bne.n	8005070 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005044:	429a      	cmp	r2, r3
 8005046:	d113      	bne.n	8005070 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	3b01      	subs	r3, #1
 8005056:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005058:	429a      	cmp	r2, r3
 800505a:	d109      	bne.n	8005070 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	3b01      	subs	r3, #1
 800506a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800506c:	429a      	cmp	r2, r3
 800506e:	d06d      	beq.n	800514c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	2b0c      	cmp	r3, #12
 8005074:	d068      	beq.n	8005148 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005076:	4b5d      	ldr	r3, [pc, #372]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d105      	bne.n	800508e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005082:	4b5a      	ldr	r3, [pc, #360]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e0a8      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005092:	4b56      	ldr	r3, [pc, #344]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a55      	ldr	r2, [pc, #340]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8005098:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800509c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800509e:	f7fc faff 	bl	80016a0 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a6:	f7fc fafb 	bl	80016a0 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e095      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050b8:	4b4c      	ldr	r3, [pc, #304]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1f0      	bne.n	80050a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050c4:	4b49      	ldr	r3, [pc, #292]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	4b49      	ldr	r3, [pc, #292]	; (80051f0 <HAL_RCC_OscConfig+0x828>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80050d4:	3a01      	subs	r2, #1
 80050d6:	0112      	lsls	r2, r2, #4
 80050d8:	4311      	orrs	r1, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050de:	0212      	lsls	r2, r2, #8
 80050e0:	4311      	orrs	r1, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050e6:	0852      	lsrs	r2, r2, #1
 80050e8:	3a01      	subs	r2, #1
 80050ea:	0552      	lsls	r2, r2, #21
 80050ec:	4311      	orrs	r1, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80050f2:	0852      	lsrs	r2, r2, #1
 80050f4:	3a01      	subs	r2, #1
 80050f6:	0652      	lsls	r2, r2, #25
 80050f8:	4311      	orrs	r1, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050fe:	06d2      	lsls	r2, r2, #27
 8005100:	430a      	orrs	r2, r1
 8005102:	493a      	ldr	r1, [pc, #232]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8005104:	4313      	orrs	r3, r2
 8005106:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005108:	4b38      	ldr	r3, [pc, #224]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a37      	ldr	r2, [pc, #220]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 800510e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005112:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005114:	4b35      	ldr	r3, [pc, #212]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	4a34      	ldr	r2, [pc, #208]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 800511a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800511e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005120:	f7fc fabe 	bl	80016a0 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005128:	f7fc faba 	bl	80016a0 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e054      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800513a:	4b2c      	ldr	r3, [pc, #176]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005146:	e04c      	b.n	80051e2 <HAL_RCC_OscConfig+0x81a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e04b      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800514c:	4b27      	ldr	r3, [pc, #156]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d144      	bne.n	80051e2 <HAL_RCC_OscConfig+0x81a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005158:	4b24      	ldr	r3, [pc, #144]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a23      	ldr	r2, [pc, #140]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 800515e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005162:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005164:	4b21      	ldr	r3, [pc, #132]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4a20      	ldr	r2, [pc, #128]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 800516a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800516e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005170:	f7fc fa96 	bl	80016a0 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005178:	f7fc fa92 	bl	80016a0 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e02c      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800518a:	4b18      	ldr	r3, [pc, #96]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0x7b0>
 8005196:	e024      	b.n	80051e2 <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	2b0c      	cmp	r3, #12
 800519c:	d01f      	beq.n	80051de <HAL_RCC_OscConfig+0x816>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519e:	4b13      	ldr	r3, [pc, #76]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a12      	ldr	r2, [pc, #72]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 80051a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051aa:	f7fc fa79 	bl	80016a0 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051b0:	e008      	b.n	80051c4 <HAL_RCC_OscConfig+0x7fc>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b2:	f7fc fa75 	bl	80016a0 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x7fc>
          {
            return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e00f      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c4:	4b09      	ldr	r3, [pc, #36]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1f0      	bne.n	80051b2 <HAL_RCC_OscConfig+0x7ea>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80051d0:	4b06      	ldr	r3, [pc, #24]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	4905      	ldr	r1, [pc, #20]	; (80051ec <HAL_RCC_OscConfig+0x824>)
 80051d6:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <HAL_RCC_OscConfig+0x82c>)
 80051d8:	4013      	ands	r3, r2
 80051da:	60cb      	str	r3, [r1, #12]
 80051dc:	e001      	b.n	80051e2 <HAL_RCC_OscConfig+0x81a>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <HAL_RCC_OscConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3720      	adds	r7, #32
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40021000 	.word	0x40021000
 80051f0:	019d800c 	.word	0x019d800c
 80051f4:	feeefffc 	.word	0xfeeefffc

080051f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e11d      	b.n	800544c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005210:	4b90      	ldr	r3, [pc, #576]	; (8005454 <HAL_RCC_ClockConfig+0x25c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d910      	bls.n	8005240 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521e:	4b8d      	ldr	r3, [pc, #564]	; (8005454 <HAL_RCC_ClockConfig+0x25c>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f023 020f 	bic.w	r2, r3, #15
 8005226:	498b      	ldr	r1, [pc, #556]	; (8005454 <HAL_RCC_ClockConfig+0x25c>)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	4313      	orrs	r3, r2
 800522c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522e:	4b89      	ldr	r3, [pc, #548]	; (8005454 <HAL_RCC_ClockConfig+0x25c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d001      	beq.n	8005240 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e105      	b.n	800544c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d010      	beq.n	800526e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	4b81      	ldr	r3, [pc, #516]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005258:	429a      	cmp	r2, r3
 800525a:	d908      	bls.n	800526e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800525c:	4b7e      	ldr	r3, [pc, #504]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	497b      	ldr	r1, [pc, #492]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 800526a:	4313      	orrs	r3, r2
 800526c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d079      	beq.n	800536e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b03      	cmp	r3, #3
 8005280:	d11e      	bne.n	80052c0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005282:	4b75      	ldr	r3, [pc, #468]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e0dc      	b.n	800544c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005292:	f000 f9db 	bl	800564c <RCC_GetSysClockFreqFromPLLSource>
 8005296:	4603      	mov	r3, r0
 8005298:	4a70      	ldr	r2, [pc, #448]	; (800545c <HAL_RCC_ClockConfig+0x264>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d946      	bls.n	800532c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800529e:	4b6e      	ldr	r3, [pc, #440]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d140      	bne.n	800532c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052aa:	4b6b      	ldr	r3, [pc, #428]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052b2:	4a69      	ldr	r2, [pc, #420]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 80052b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052ba:	2380      	movs	r3, #128	; 0x80
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	e035      	b.n	800532c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d107      	bne.n	80052d8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052c8:	4b63      	ldr	r3, [pc, #396]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d115      	bne.n	8005300 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0b9      	b.n	800544c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d107      	bne.n	80052f0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052e0:	4b5d      	ldr	r3, [pc, #372]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d109      	bne.n	8005300 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0ad      	b.n	800544c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052f0:	4b59      	ldr	r3, [pc, #356]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0a5      	b.n	800544c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005300:	f000 f8b4 	bl	800546c <HAL_RCC_GetSysClockFreq>
 8005304:	4603      	mov	r3, r0
 8005306:	4a55      	ldr	r2, [pc, #340]	; (800545c <HAL_RCC_ClockConfig+0x264>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d90f      	bls.n	800532c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800530c:	4b52      	ldr	r3, [pc, #328]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d109      	bne.n	800532c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005318:	4b4f      	ldr	r3, [pc, #316]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005320:	4a4d      	ldr	r2, [pc, #308]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 8005322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005326:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005328:	2380      	movs	r3, #128	; 0x80
 800532a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800532c:	4b4a      	ldr	r3, [pc, #296]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f023 0203 	bic.w	r2, r3, #3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	4947      	ldr	r1, [pc, #284]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 800533a:	4313      	orrs	r3, r2
 800533c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800533e:	f7fc f9af 	bl	80016a0 <HAL_GetTick>
 8005342:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005344:	e00a      	b.n	800535c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005346:	f7fc f9ab 	bl	80016a0 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	f241 3288 	movw	r2, #5000	; 0x1388
 8005354:	4293      	cmp	r3, r2
 8005356:	d901      	bls.n	800535c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e077      	b.n	800544c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535c:	4b3e      	ldr	r3, [pc, #248]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 020c 	and.w	r2, r3, #12
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	429a      	cmp	r2, r3
 800536c:	d1eb      	bne.n	8005346 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2b80      	cmp	r3, #128	; 0x80
 8005372:	d105      	bne.n	8005380 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005374:	4b38      	ldr	r3, [pc, #224]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	4a37      	ldr	r2, [pc, #220]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 800537a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800537e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d010      	beq.n	80053ae <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	4b31      	ldr	r3, [pc, #196]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005398:	429a      	cmp	r2, r3
 800539a:	d208      	bcs.n	80053ae <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800539c:	4b2e      	ldr	r3, [pc, #184]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	492b      	ldr	r1, [pc, #172]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053ae:	4b29      	ldr	r3, [pc, #164]	; (8005454 <HAL_RCC_ClockConfig+0x25c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d210      	bcs.n	80053de <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053bc:	4b25      	ldr	r3, [pc, #148]	; (8005454 <HAL_RCC_ClockConfig+0x25c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f023 020f 	bic.w	r2, r3, #15
 80053c4:	4923      	ldr	r1, [pc, #140]	; (8005454 <HAL_RCC_ClockConfig+0x25c>)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053cc:	4b21      	ldr	r3, [pc, #132]	; (8005454 <HAL_RCC_ClockConfig+0x25c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 030f 	and.w	r3, r3, #15
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d001      	beq.n	80053de <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e036      	b.n	800544c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d008      	beq.n	80053fc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ea:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	4918      	ldr	r1, [pc, #96]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d009      	beq.n	800541c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005408:	4b13      	ldr	r3, [pc, #76]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	4910      	ldr	r1, [pc, #64]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 8005418:	4313      	orrs	r3, r2
 800541a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800541c:	f000 f826 	bl	800546c <HAL_RCC_GetSysClockFreq>
 8005420:	4602      	mov	r2, r0
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <HAL_RCC_ClockConfig+0x260>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	091b      	lsrs	r3, r3, #4
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	490c      	ldr	r1, [pc, #48]	; (8005460 <HAL_RCC_ClockConfig+0x268>)
 800542e:	5ccb      	ldrb	r3, [r1, r3]
 8005430:	f003 031f 	and.w	r3, r3, #31
 8005434:	fa22 f303 	lsr.w	r3, r2, r3
 8005438:	4a0a      	ldr	r2, [pc, #40]	; (8005464 <HAL_RCC_ClockConfig+0x26c>)
 800543a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800543c:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <HAL_RCC_ClockConfig+0x270>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f7fc f8dd 	bl	8001600 <HAL_InitTick>
 8005446:	4603      	mov	r3, r0
 8005448:	73fb      	strb	r3, [r7, #15]

  return status;
 800544a:	7bfb      	ldrb	r3, [r7, #15]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40022000 	.word	0x40022000
 8005458:	40021000 	.word	0x40021000
 800545c:	04c4b400 	.word	0x04c4b400
 8005460:	0800ccb0 	.word	0x0800ccb0
 8005464:	20000000 	.word	0x20000000
 8005468:	20000004 	.word	0x20000004

0800546c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800546c:	b480      	push	{r7}
 800546e:	b089      	sub	sp, #36	; 0x24
 8005470:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
 8005476:	2300      	movs	r3, #0
 8005478:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800547a:	4b3e      	ldr	r3, [pc, #248]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005484:	4b3b      	ldr	r3, [pc, #236]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <HAL_RCC_GetSysClockFreq+0x34>
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	2b0c      	cmp	r3, #12
 8005498:	d121      	bne.n	80054de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d11e      	bne.n	80054de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054a0:	4b34      	ldr	r3, [pc, #208]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d107      	bne.n	80054bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054ac:	4b31      	ldr	r3, [pc, #196]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 80054ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054b2:	0a1b      	lsrs	r3, r3, #8
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	61fb      	str	r3, [r7, #28]
 80054ba:	e005      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054bc:	4b2d      	ldr	r3, [pc, #180]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054c8:	4a2b      	ldr	r2, [pc, #172]	; (8005578 <HAL_RCC_GetSysClockFreq+0x10c>)
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10d      	bne.n	80054f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054dc:	e00a      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d102      	bne.n	80054ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054e4:	4b25      	ldr	r3, [pc, #148]	; (800557c <HAL_RCC_GetSysClockFreq+0x110>)
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	e004      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d101      	bne.n	80054f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054f0:	4b22      	ldr	r3, [pc, #136]	; (800557c <HAL_RCC_GetSysClockFreq+0x110>)
 80054f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b0c      	cmp	r3, #12
 80054f8:	d134      	bne.n	8005564 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054fa:	4b1e      	ldr	r3, [pc, #120]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d003      	beq.n	8005512 <HAL_RCC_GetSysClockFreq+0xa6>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b03      	cmp	r3, #3
 800550e:	d003      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0xac>
 8005510:	e005      	b.n	800551e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005512:	4b1a      	ldr	r3, [pc, #104]	; (800557c <HAL_RCC_GetSysClockFreq+0x110>)
 8005514:	617b      	str	r3, [r7, #20]
      break;
 8005516:	e005      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005518:	4b18      	ldr	r3, [pc, #96]	; (800557c <HAL_RCC_GetSysClockFreq+0x110>)
 800551a:	617b      	str	r3, [r7, #20]
      break;
 800551c:	e002      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	617b      	str	r3, [r7, #20]
      break;
 8005522:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005524:	4b13      	ldr	r3, [pc, #76]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	3301      	adds	r3, #1
 8005530:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005532:	4b10      	ldr	r3, [pc, #64]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	0a1b      	lsrs	r3, r3, #8
 8005538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	fb02 f203 	mul.w	r2, r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800554a:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <HAL_RCC_GetSysClockFreq+0x108>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	0e5b      	lsrs	r3, r3, #25
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	3301      	adds	r3, #1
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005562:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005564:	69bb      	ldr	r3, [r7, #24]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3724      	adds	r7, #36	; 0x24
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40021000 	.word	0x40021000
 8005578:	0800ccc0 	.word	0x0800ccc0
 800557c:	00f42400 	.word	0x00f42400

08005580 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005584:	4b03      	ldr	r3, [pc, #12]	; (8005594 <HAL_RCC_GetHCLKFreq+0x14>)
 8005586:	681b      	ldr	r3, [r3, #0]
}
 8005588:	4618      	mov	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	20000000 	.word	0x20000000

08005598 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055a0:	2300      	movs	r3, #0
 80055a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055a4:	4b27      	ldr	r3, [pc, #156]	; (8005644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055b0:	f7ff f926 	bl	8004800 <HAL_PWREx_GetVoltageRange>
 80055b4:	6178      	str	r0, [r7, #20]
 80055b6:	e014      	b.n	80055e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055b8:	4b22      	ldr	r3, [pc, #136]	; (8005644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055bc:	4a21      	ldr	r2, [pc, #132]	; (8005644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c2:	6593      	str	r3, [r2, #88]	; 0x58
 80055c4:	4b1f      	ldr	r3, [pc, #124]	; (8005644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055d0:	f7ff f916 	bl	8004800 <HAL_PWREx_GetVoltageRange>
 80055d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055d6:	4b1b      	ldr	r3, [pc, #108]	; (8005644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055da:	4a1a      	ldr	r2, [pc, #104]	; (8005644 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80055dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e8:	d10b      	bne.n	8005602 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b80      	cmp	r3, #128	; 0x80
 80055ee:	d913      	bls.n	8005618 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2ba0      	cmp	r3, #160	; 0xa0
 80055f4:	d902      	bls.n	80055fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055f6:	2302      	movs	r3, #2
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	e00d      	b.n	8005618 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055fc:	2301      	movs	r3, #1
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	e00a      	b.n	8005618 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b7f      	cmp	r3, #127	; 0x7f
 8005606:	d902      	bls.n	800560e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005608:	2302      	movs	r3, #2
 800560a:	613b      	str	r3, [r7, #16]
 800560c:	e004      	b.n	8005618 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b70      	cmp	r3, #112	; 0x70
 8005612:	d101      	bne.n	8005618 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005614:	2301      	movs	r3, #1
 8005616:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005618:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f023 020f 	bic.w	r2, r3, #15
 8005620:	4909      	ldr	r1, [pc, #36]	; (8005648 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005628:	4b07      	ldr	r3, [pc, #28]	; (8005648 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	429a      	cmp	r2, r3
 8005634:	d001      	beq.n	800563a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40021000 	.word	0x40021000
 8005648:	40022000 	.word	0x40022000

0800564c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005652:	4b2d      	ldr	r3, [pc, #180]	; (8005708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f003 0303 	and.w	r3, r3, #3
 800565a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b03      	cmp	r3, #3
 8005660:	d00b      	beq.n	800567a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b03      	cmp	r3, #3
 8005666:	d825      	bhi.n	80056b4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d008      	beq.n	8005680 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d11f      	bne.n	80056b4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005674:	4b25      	ldr	r3, [pc, #148]	; (800570c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005676:	613b      	str	r3, [r7, #16]
    break;
 8005678:	e01f      	b.n	80056ba <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800567a:	4b24      	ldr	r3, [pc, #144]	; (800570c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800567c:	613b      	str	r3, [r7, #16]
    break;
 800567e:	e01c      	b.n	80056ba <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005680:	4b21      	ldr	r3, [pc, #132]	; (8005708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d107      	bne.n	800569c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800568c:	4b1e      	ldr	r3, [pc, #120]	; (8005708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800568e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005692:	0a1b      	lsrs	r3, r3, #8
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	e005      	b.n	80056a8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800569c:	4b1a      	ldr	r3, [pc, #104]	; (8005708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	091b      	lsrs	r3, r3, #4
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80056a8:	4a19      	ldr	r2, [pc, #100]	; (8005710 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b0:	613b      	str	r3, [r7, #16]
    break;
 80056b2:	e002      	b.n	80056ba <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	613b      	str	r3, [r7, #16]
    break;
 80056b8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056ba:	4b13      	ldr	r3, [pc, #76]	; (8005708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	091b      	lsrs	r3, r3, #4
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	3301      	adds	r3, #1
 80056c6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056c8:	4b0f      	ldr	r3, [pc, #60]	; (8005708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	0a1b      	lsrs	r3, r3, #8
 80056ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	fb02 f203 	mul.w	r2, r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	fbb2 f3f3 	udiv	r3, r2, r3
 80056de:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056e0:	4b09      	ldr	r3, [pc, #36]	; (8005708 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	0e5b      	lsrs	r3, r3, #25
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	3301      	adds	r3, #1
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80056fa:	683b      	ldr	r3, [r7, #0]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	40021000 	.word	0x40021000
 800570c:	00f42400 	.word	0x00f42400
 8005710:	0800ccc0 	.word	0x0800ccc0

08005714 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800571c:	2300      	movs	r3, #0
 800571e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005720:	2300      	movs	r3, #0
 8005722:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800572c:	2b00      	cmp	r3, #0
 800572e:	d040      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005734:	2b80      	cmp	r3, #128	; 0x80
 8005736:	d02a      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005738:	2b80      	cmp	r3, #128	; 0x80
 800573a:	d825      	bhi.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800573c:	2b60      	cmp	r3, #96	; 0x60
 800573e:	d026      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005740:	2b60      	cmp	r3, #96	; 0x60
 8005742:	d821      	bhi.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005744:	2b40      	cmp	r3, #64	; 0x40
 8005746:	d006      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005748:	2b40      	cmp	r3, #64	; 0x40
 800574a:	d81d      	bhi.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d009      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005750:	2b20      	cmp	r3, #32
 8005752:	d010      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005754:	e018      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005756:	4b89      	ldr	r3, [pc, #548]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	4a88      	ldr	r2, [pc, #544]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800575c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005760:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005762:	e015      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	2100      	movs	r1, #0
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fb62 	bl	8005e34 <RCCEx_PLLSAI1_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005774:	e00c      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3320      	adds	r3, #32
 800577a:	2100      	movs	r1, #0
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fc4d 	bl	800601c <RCCEx_PLLSAI2_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005786:	e003      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	74fb      	strb	r3, [r7, #19]
      break;
 800578c:	e000      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800578e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005790:	7cfb      	ldrb	r3, [r7, #19]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10b      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005796:	4b79      	ldr	r3, [pc, #484]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005798:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800579c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a4:	4975      	ldr	r1, [pc, #468]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80057ac:	e001      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ae:	7cfb      	ldrb	r3, [r7, #19]
 80057b0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d047      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c6:	d030      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80057c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057cc:	d82a      	bhi.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80057ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d2:	d02a      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80057d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d8:	d824      	bhi.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80057da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057de:	d008      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80057e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e4:	d81e      	bhi.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80057ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ee:	d010      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80057f0:	e018      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057f2:	4b62      	ldr	r3, [pc, #392]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	4a61      	ldr	r2, [pc, #388]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057fe:	e015      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3304      	adds	r3, #4
 8005804:	2100      	movs	r1, #0
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fb14 	bl	8005e34 <RCCEx_PLLSAI1_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005810:	e00c      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3320      	adds	r3, #32
 8005816:	2100      	movs	r1, #0
 8005818:	4618      	mov	r0, r3
 800581a:	f000 fbff 	bl	800601c <RCCEx_PLLSAI2_Config>
 800581e:	4603      	mov	r3, r0
 8005820:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005822:	e003      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	74fb      	strb	r3, [r7, #19]
      break;
 8005828:	e000      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800582a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800582c:	7cfb      	ldrb	r3, [r7, #19]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10b      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005832:	4b52      	ldr	r3, [pc, #328]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005834:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005840:	494e      	ldr	r1, [pc, #312]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005848:	e001      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584a:	7cfb      	ldrb	r3, [r7, #19]
 800584c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 809f 	beq.w	800599a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800585c:	2300      	movs	r3, #0
 800585e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005860:	4b46      	ldr	r3, [pc, #280]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005870:	2300      	movs	r3, #0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00d      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005876:	4b41      	ldr	r3, [pc, #260]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587a:	4a40      	ldr	r2, [pc, #256]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800587c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005880:	6593      	str	r3, [r2, #88]	; 0x58
 8005882:	4b3e      	ldr	r3, [pc, #248]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800588a:	60bb      	str	r3, [r7, #8]
 800588c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800588e:	2301      	movs	r3, #1
 8005890:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005892:	4b3b      	ldr	r3, [pc, #236]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a3a      	ldr	r2, [pc, #232]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800589c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800589e:	f7fb feff 	bl	80016a0 <HAL_GetTick>
 80058a2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058a4:	e009      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a6:	f7fb fefb 	bl	80016a0 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d902      	bls.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	74fb      	strb	r3, [r7, #19]
        break;
 80058b8:	e005      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058ba:	4b31      	ldr	r3, [pc, #196]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0ef      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80058c6:	7cfb      	ldrb	r3, [r7, #19]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d15b      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058cc:	4b2b      	ldr	r3, [pc, #172]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d01f      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d019      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058ea:	4b24      	ldr	r3, [pc, #144]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058f6:	4b21      	ldr	r3, [pc, #132]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fc:	4a1f      	ldr	r2, [pc, #124]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005906:	4b1d      	ldr	r3, [pc, #116]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590c:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800590e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005916:	4a19      	ldr	r2, [pc, #100]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d016      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005928:	f7fb feba 	bl	80016a0 <HAL_GetTick>
 800592c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800592e:	e00b      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005930:	f7fb feb6 	bl	80016a0 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	f241 3288 	movw	r2, #5000	; 0x1388
 800593e:	4293      	cmp	r3, r2
 8005940:	d902      	bls.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	74fb      	strb	r3, [r7, #19]
            break;
 8005946:	e006      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005948:	4b0c      	ldr	r3, [pc, #48]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0ec      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005956:	7cfb      	ldrb	r3, [r7, #19]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10c      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800595c:	4b07      	ldr	r3, [pc, #28]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800595e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005962:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800596c:	4903      	ldr	r1, [pc, #12]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005974:	e008      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005976:	7cfb      	ldrb	r3, [r7, #19]
 8005978:	74bb      	strb	r3, [r7, #18]
 800597a:	e005      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800597c:	40021000 	.word	0x40021000
 8005980:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005984:	7cfb      	ldrb	r3, [r7, #19]
 8005986:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005988:	7c7b      	ldrb	r3, [r7, #17]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d105      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800598e:	4ba0      	ldr	r3, [pc, #640]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005992:	4a9f      	ldr	r2, [pc, #636]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005998:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059a6:	4b9a      	ldr	r3, [pc, #616]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ac:	f023 0203 	bic.w	r2, r3, #3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b4:	4996      	ldr	r1, [pc, #600]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059c8:	4b91      	ldr	r3, [pc, #580]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ce:	f023 020c 	bic.w	r2, r3, #12
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	498e      	ldr	r1, [pc, #568]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0304 	and.w	r3, r3, #4
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059ea:	4b89      	ldr	r3, [pc, #548]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f8:	4985      	ldr	r1, [pc, #532]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a0c:	4b80      	ldr	r3, [pc, #512]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a1a:	497d      	ldr	r1, [pc, #500]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a2e:	4b78      	ldr	r3, [pc, #480]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a3c:	4974      	ldr	r1, [pc, #464]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a50:	4b6f      	ldr	r3, [pc, #444]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5e:	496c      	ldr	r1, [pc, #432]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a72:	4b67      	ldr	r3, [pc, #412]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a80:	4963      	ldr	r1, [pc, #396]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a94:	4b5e      	ldr	r3, [pc, #376]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa2:	495b      	ldr	r1, [pc, #364]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ab6:	4b56      	ldr	r3, [pc, #344]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac4:	4952      	ldr	r1, [pc, #328]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ad8:	4b4d      	ldr	r3, [pc, #308]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ade:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae6:	494a      	ldr	r1, [pc, #296]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005afa:	4b45      	ldr	r3, [pc, #276]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b08:	4941      	ldr	r1, [pc, #260]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b1c:	4b3c      	ldr	r3, [pc, #240]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b22:	f023 0203 	bic.w	r2, r3, #3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b2a:	4939      	ldr	r1, [pc, #228]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d028      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b3e:	4b34      	ldr	r3, [pc, #208]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4c:	4930      	ldr	r1, [pc, #192]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b5c:	d106      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b5e:	4b2c      	ldr	r3, [pc, #176]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	4a2b      	ldr	r2, [pc, #172]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b68:	60d3      	str	r3, [r2, #12]
 8005b6a:	e011      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b74:	d10c      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 f959 	bl	8005e34 <RCCEx_PLLSAI1_Config>
 8005b82:	4603      	mov	r3, r0
 8005b84:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b86:	7cfb      	ldrb	r3, [r7, #19]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005b8c:	7cfb      	ldrb	r3, [r7, #19]
 8005b8e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d04d      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ba4:	d108      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005ba6:	4b1a      	ldr	r3, [pc, #104]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bac:	4a18      	ldr	r2, [pc, #96]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bb2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005bb6:	e012      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005bb8:	4b15      	ldr	r3, [pc, #84]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bbe:	4a14      	ldr	r2, [pc, #80]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bc4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005bc8:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bd6:	490e      	ldr	r1, [pc, #56]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005be6:	d106      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005be8:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	4a08      	ldr	r2, [pc, #32]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bf2:	60d3      	str	r3, [r2, #12]
 8005bf4:	e020      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bfe:	d109      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c00:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	4a02      	ldr	r2, [pc, #8]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c0a:	60d3      	str	r3, [r2, #12]
 8005c0c:	e014      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005c0e:	bf00      	nop
 8005c10:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c1c:	d10c      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3304      	adds	r3, #4
 8005c22:	2101      	movs	r1, #1
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 f905 	bl	8005e34 <RCCEx_PLLSAI1_Config>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c2e:	7cfb      	ldrb	r3, [r7, #19]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005c34:	7cfb      	ldrb	r3, [r7, #19]
 8005c36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d028      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c44:	4b7a      	ldr	r3, [pc, #488]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c52:	4977      	ldr	r1, [pc, #476]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c62:	d106      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c64:	4b72      	ldr	r3, [pc, #456]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	4a71      	ldr	r2, [pc, #452]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c6e:	60d3      	str	r3, [r2, #12]
 8005c70:	e011      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c7a:	d10c      	bne.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	2101      	movs	r1, #1
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 f8d6 	bl	8005e34 <RCCEx_PLLSAI1_Config>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c8c:	7cfb      	ldrb	r3, [r7, #19]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005c92:	7cfb      	ldrb	r3, [r7, #19]
 8005c94:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01e      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ca2:	4b63      	ldr	r3, [pc, #396]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cb2:	495f      	ldr	r1, [pc, #380]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cc4:	d10c      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	2102      	movs	r1, #2
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 f8b1 	bl	8005e34 <RCCEx_PLLSAI1_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cd6:	7cfb      	ldrb	r3, [r7, #19]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005cdc:	7cfb      	ldrb	r3, [r7, #19]
 8005cde:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cec:	4b50      	ldr	r3, [pc, #320]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cf2:	f023 0204 	bic.w	r2, r3, #4
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cfc:	494c      	ldr	r1, [pc, #304]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00b      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005d10:	4b47      	ldr	r3, [pc, #284]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d16:	f023 0218 	bic.w	r2, r3, #24
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d20:	4943      	ldr	r1, [pc, #268]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d035      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d34:	4b3e      	ldr	r3, [pc, #248]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a3d      	ldr	r2, [pc, #244]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d40:	f7fb fcae 	bl	80016a0 <HAL_GetTick>
 8005d44:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d46:	e009      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d48:	f7fb fcaa 	bl	80016a0 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d902      	bls.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	74fb      	strb	r3, [r7, #19]
        break;
 8005d5a:	e005      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d5c:	4b34      	ldr	r3, [pc, #208]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1ef      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005d68:	7cfb      	ldrb	r3, [r7, #19]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d113      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005d6e:	4b30      	ldr	r3, [pc, #192]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d7e:	492c      	ldr	r1, [pc, #176]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3320      	adds	r3, #32
 8005d8a:	2102      	movs	r1, #2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 f945 	bl	800601c <RCCEx_PLLSAI2_Config>
 8005d92:	4603      	mov	r3, r0
 8005d94:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005d96:	7cfb      	ldrb	r3, [r7, #19]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005d9c:	7cfb      	ldrb	r3, [r7, #19]
 8005d9e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d01e      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005dac:	4b20      	ldr	r3, [pc, #128]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005db2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dbc:	491c      	ldr	r1, [pc, #112]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dce:	d10c      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3320      	adds	r3, #32
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 f920 	bl	800601c <RCCEx_PLLSAI2_Config>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005de0:	7cfb      	ldrb	r3, [r7, #19]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8005de6:	7cfb      	ldrb	r3, [r7, #19]
 8005de8:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d017      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005df6:	4b0e      	ldr	r3, [pc, #56]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005df8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e06:	490a      	ldr	r1, [pc, #40]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e18:	d105      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	4a04      	ldr	r2, [pc, #16]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005e20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e24:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e26:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	40021000 	.word	0x40021000

08005e34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e42:	4b72      	ldr	r3, [pc, #456]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00e      	beq.n	8005e6c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e4e:	4b6f      	ldr	r3, [pc, #444]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f003 0203 	and.w	r2, r3, #3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d103      	bne.n	8005e66 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
       ||
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d142      	bne.n	8005eec <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	73fb      	strb	r3, [r7, #15]
 8005e6a:	e03f      	b.n	8005eec <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d018      	beq.n	8005ea6 <RCCEx_PLLSAI1_Config+0x72>
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d825      	bhi.n	8005ec4 <RCCEx_PLLSAI1_Config+0x90>
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d002      	beq.n	8005e82 <RCCEx_PLLSAI1_Config+0x4e>
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d009      	beq.n	8005e94 <RCCEx_PLLSAI1_Config+0x60>
 8005e80:	e020      	b.n	8005ec4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e82:	4b62      	ldr	r3, [pc, #392]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d11d      	bne.n	8005eca <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e92:	e01a      	b.n	8005eca <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e94:	4b5d      	ldr	r3, [pc, #372]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d116      	bne.n	8005ece <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ea4:	e013      	b.n	8005ece <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ea6:	4b59      	ldr	r3, [pc, #356]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10f      	bne.n	8005ed2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005eb2:	4b56      	ldr	r3, [pc, #344]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ec2:	e006      	b.n	8005ed2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ec8:	e004      	b.n	8005ed4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005eca:	bf00      	nop
 8005ecc:	e002      	b.n	8005ed4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ece:	bf00      	nop
 8005ed0:	e000      	b.n	8005ed4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ed2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d108      	bne.n	8005eec <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005eda:	4b4c      	ldr	r3, [pc, #304]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f023 0203 	bic.w	r2, r3, #3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4949      	ldr	r1, [pc, #292]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f040 8086 	bne.w	8006000 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ef4:	4b45      	ldr	r3, [pc, #276]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a44      	ldr	r2, [pc, #272]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005efa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f00:	f7fb fbce 	bl	80016a0 <HAL_GetTick>
 8005f04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f06:	e009      	b.n	8005f1c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f08:	f7fb fbca 	bl	80016a0 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d902      	bls.n	8005f1c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	73fb      	strb	r3, [r7, #15]
        break;
 8005f1a:	e005      	b.n	8005f28 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f1c:	4b3b      	ldr	r3, [pc, #236]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1ef      	bne.n	8005f08 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d168      	bne.n	8006000 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d113      	bne.n	8005f5c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f34:	4b35      	ldr	r3, [pc, #212]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f36:	691a      	ldr	r2, [r3, #16]
 8005f38:	4b35      	ldr	r3, [pc, #212]	; (8006010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6892      	ldr	r2, [r2, #8]
 8005f40:	0211      	lsls	r1, r2, #8
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	68d2      	ldr	r2, [r2, #12]
 8005f46:	06d2      	lsls	r2, r2, #27
 8005f48:	4311      	orrs	r1, r2
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6852      	ldr	r2, [r2, #4]
 8005f4e:	3a01      	subs	r2, #1
 8005f50:	0112      	lsls	r2, r2, #4
 8005f52:	430a      	orrs	r2, r1
 8005f54:	492d      	ldr	r1, [pc, #180]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	610b      	str	r3, [r1, #16]
 8005f5a:	e02d      	b.n	8005fb8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d115      	bne.n	8005f8e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f62:	4b2a      	ldr	r3, [pc, #168]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f64:	691a      	ldr	r2, [r3, #16]
 8005f66:	4b2b      	ldr	r3, [pc, #172]	; (8006014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6892      	ldr	r2, [r2, #8]
 8005f6e:	0211      	lsls	r1, r2, #8
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6912      	ldr	r2, [r2, #16]
 8005f74:	0852      	lsrs	r2, r2, #1
 8005f76:	3a01      	subs	r2, #1
 8005f78:	0552      	lsls	r2, r2, #21
 8005f7a:	4311      	orrs	r1, r2
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6852      	ldr	r2, [r2, #4]
 8005f80:	3a01      	subs	r2, #1
 8005f82:	0112      	lsls	r2, r2, #4
 8005f84:	430a      	orrs	r2, r1
 8005f86:	4921      	ldr	r1, [pc, #132]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	610b      	str	r3, [r1, #16]
 8005f8c:	e014      	b.n	8005fb8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f8e:	4b1f      	ldr	r3, [pc, #124]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f90:	691a      	ldr	r2, [r3, #16]
 8005f92:	4b21      	ldr	r3, [pc, #132]	; (8006018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	6892      	ldr	r2, [r2, #8]
 8005f9a:	0211      	lsls	r1, r2, #8
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6952      	ldr	r2, [r2, #20]
 8005fa0:	0852      	lsrs	r2, r2, #1
 8005fa2:	3a01      	subs	r2, #1
 8005fa4:	0652      	lsls	r2, r2, #25
 8005fa6:	4311      	orrs	r1, r2
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6852      	ldr	r2, [r2, #4]
 8005fac:	3a01      	subs	r2, #1
 8005fae:	0112      	lsls	r2, r2, #4
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	4916      	ldr	r1, [pc, #88]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005fb8:	4b14      	ldr	r3, [pc, #80]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a13      	ldr	r2, [pc, #76]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc4:	f7fb fb6c 	bl	80016a0 <HAL_GetTick>
 8005fc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fca:	e009      	b.n	8005fe0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fcc:	f7fb fb68 	bl	80016a0 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d902      	bls.n	8005fe0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	73fb      	strb	r3, [r7, #15]
          break;
 8005fde:	e005      	b.n	8005fec <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fe0:	4b0a      	ldr	r3, [pc, #40]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0ef      	beq.n	8005fcc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ff2:	4b06      	ldr	r3, [pc, #24]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	4904      	ldr	r1, [pc, #16]	; (800600c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006000:	7bfb      	ldrb	r3, [r7, #15]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40021000 	.word	0x40021000
 8006010:	07ff800f 	.word	0x07ff800f
 8006014:	ff9f800f 	.word	0xff9f800f
 8006018:	f9ff800f 	.word	0xf9ff800f

0800601c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800602a:	4b72      	ldr	r3, [pc, #456]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00e      	beq.n	8006054 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006036:	4b6f      	ldr	r3, [pc, #444]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f003 0203 	and.w	r2, r3, #3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d103      	bne.n	800604e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
       ||
 800604a:	2b00      	cmp	r3, #0
 800604c:	d142      	bne.n	80060d4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	73fb      	strb	r3, [r7, #15]
 8006052:	e03f      	b.n	80060d4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b03      	cmp	r3, #3
 800605a:	d018      	beq.n	800608e <RCCEx_PLLSAI2_Config+0x72>
 800605c:	2b03      	cmp	r3, #3
 800605e:	d825      	bhi.n	80060ac <RCCEx_PLLSAI2_Config+0x90>
 8006060:	2b01      	cmp	r3, #1
 8006062:	d002      	beq.n	800606a <RCCEx_PLLSAI2_Config+0x4e>
 8006064:	2b02      	cmp	r3, #2
 8006066:	d009      	beq.n	800607c <RCCEx_PLLSAI2_Config+0x60>
 8006068:	e020      	b.n	80060ac <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800606a:	4b62      	ldr	r3, [pc, #392]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d11d      	bne.n	80060b2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800607a:	e01a      	b.n	80060b2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800607c:	4b5d      	ldr	r3, [pc, #372]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006084:	2b00      	cmp	r3, #0
 8006086:	d116      	bne.n	80060b6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800608c:	e013      	b.n	80060b6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800608e:	4b59      	ldr	r3, [pc, #356]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10f      	bne.n	80060ba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800609a:	4b56      	ldr	r3, [pc, #344]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d109      	bne.n	80060ba <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060aa:	e006      	b.n	80060ba <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	73fb      	strb	r3, [r7, #15]
      break;
 80060b0:	e004      	b.n	80060bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80060b2:	bf00      	nop
 80060b4:	e002      	b.n	80060bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80060b6:	bf00      	nop
 80060b8:	e000      	b.n	80060bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80060ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d108      	bne.n	80060d4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80060c2:	4b4c      	ldr	r3, [pc, #304]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f023 0203 	bic.w	r2, r3, #3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4949      	ldr	r1, [pc, #292]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f040 8086 	bne.w	80061e8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80060dc:	4b45      	ldr	r3, [pc, #276]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a44      	ldr	r2, [pc, #272]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060e8:	f7fb fada 	bl	80016a0 <HAL_GetTick>
 80060ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060ee:	e009      	b.n	8006104 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060f0:	f7fb fad6 	bl	80016a0 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d902      	bls.n	8006104 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	73fb      	strb	r3, [r7, #15]
        break;
 8006102:	e005      	b.n	8006110 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006104:	4b3b      	ldr	r3, [pc, #236]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1ef      	bne.n	80060f0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d168      	bne.n	80061e8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d113      	bne.n	8006144 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800611c:	4b35      	ldr	r3, [pc, #212]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800611e:	695a      	ldr	r2, [r3, #20]
 8006120:	4b35      	ldr	r3, [pc, #212]	; (80061f8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006122:	4013      	ands	r3, r2
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6892      	ldr	r2, [r2, #8]
 8006128:	0211      	lsls	r1, r2, #8
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	68d2      	ldr	r2, [r2, #12]
 800612e:	06d2      	lsls	r2, r2, #27
 8006130:	4311      	orrs	r1, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6852      	ldr	r2, [r2, #4]
 8006136:	3a01      	subs	r2, #1
 8006138:	0112      	lsls	r2, r2, #4
 800613a:	430a      	orrs	r2, r1
 800613c:	492d      	ldr	r1, [pc, #180]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800613e:	4313      	orrs	r3, r2
 8006140:	614b      	str	r3, [r1, #20]
 8006142:	e02d      	b.n	80061a0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d115      	bne.n	8006176 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800614a:	4b2a      	ldr	r3, [pc, #168]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800614c:	695a      	ldr	r2, [r3, #20]
 800614e:	4b2b      	ldr	r3, [pc, #172]	; (80061fc <RCCEx_PLLSAI2_Config+0x1e0>)
 8006150:	4013      	ands	r3, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6892      	ldr	r2, [r2, #8]
 8006156:	0211      	lsls	r1, r2, #8
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6912      	ldr	r2, [r2, #16]
 800615c:	0852      	lsrs	r2, r2, #1
 800615e:	3a01      	subs	r2, #1
 8006160:	0552      	lsls	r2, r2, #21
 8006162:	4311      	orrs	r1, r2
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6852      	ldr	r2, [r2, #4]
 8006168:	3a01      	subs	r2, #1
 800616a:	0112      	lsls	r2, r2, #4
 800616c:	430a      	orrs	r2, r1
 800616e:	4921      	ldr	r1, [pc, #132]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006170:	4313      	orrs	r3, r2
 8006172:	614b      	str	r3, [r1, #20]
 8006174:	e014      	b.n	80061a0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006176:	4b1f      	ldr	r3, [pc, #124]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	4b21      	ldr	r3, [pc, #132]	; (8006200 <RCCEx_PLLSAI2_Config+0x1e4>)
 800617c:	4013      	ands	r3, r2
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	6892      	ldr	r2, [r2, #8]
 8006182:	0211      	lsls	r1, r2, #8
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	6952      	ldr	r2, [r2, #20]
 8006188:	0852      	lsrs	r2, r2, #1
 800618a:	3a01      	subs	r2, #1
 800618c:	0652      	lsls	r2, r2, #25
 800618e:	4311      	orrs	r1, r2
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	6852      	ldr	r2, [r2, #4]
 8006194:	3a01      	subs	r2, #1
 8006196:	0112      	lsls	r2, r2, #4
 8006198:	430a      	orrs	r2, r1
 800619a:	4916      	ldr	r1, [pc, #88]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800619c:	4313      	orrs	r3, r2
 800619e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80061a0:	4b14      	ldr	r3, [pc, #80]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a13      	ldr	r2, [pc, #76]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ac:	f7fb fa78 	bl	80016a0 <HAL_GetTick>
 80061b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061b2:	e009      	b.n	80061c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061b4:	f7fb fa74 	bl	80016a0 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d902      	bls.n	80061c8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	73fb      	strb	r3, [r7, #15]
          break;
 80061c6:	e005      	b.n	80061d4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061c8:	4b0a      	ldr	r3, [pc, #40]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0ef      	beq.n	80061b4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d106      	bne.n	80061e8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80061da:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061dc:	695a      	ldr	r2, [r3, #20]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	4904      	ldr	r1, [pc, #16]	; (80061f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	40021000 	.word	0x40021000
 80061f8:	07ff800f 	.word	0x07ff800f
 80061fc:	ff9f800f 	.word	0xff9f800f
 8006200:	f9ff800f 	.word	0xf9ff800f

08006204 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d06c      	beq.n	80062f0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fa fe0e 	bl	8000e4c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	22ca      	movs	r2, #202	; 0xca
 800623e:	625a      	str	r2, [r3, #36]	; 0x24
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2253      	movs	r2, #83	; 0x53
 8006246:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f9a0 	bl	800658e <RTC_EnterInitMode>
 800624e:	4603      	mov	r3, r0
 8006250:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d14b      	bne.n	80062f0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6812      	ldr	r2, [r2, #0]
 8006262:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800626a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6899      	ldr	r1, [r3, #8]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	431a      	orrs	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	431a      	orrs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	68d2      	ldr	r2, [r2, #12]
 8006292:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6919      	ldr	r1, [r3, #16]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	041a      	lsls	r2, r3, #16
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f9a3 	bl	80065f4 <RTC_ExitInitMode>
 80062ae:	4603      	mov	r3, r0
 80062b0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d11b      	bne.n	80062f0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0203 	bic.w	r2, r2, #3
 80062c6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69da      	ldr	r2, [r3, #28]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	22ff      	movs	r2, #255	; 0xff
 80062e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80062fa:	b590      	push	{r4, r7, lr}
 80062fc:	b087      	sub	sp, #28
 80062fe:	af00      	add	r7, sp, #0
 8006300:	60f8      	str	r0, [r7, #12]
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_RTC_SetTime+0x1a>
 8006310:	2302      	movs	r3, #2
 8006312:	e08b      	b.n	800642c <HAL_RTC_SetTime+0x132>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	22ca      	movs	r2, #202	; 0xca
 800632a:	625a      	str	r2, [r3, #36]	; 0x24
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2253      	movs	r2, #83	; 0x53
 8006332:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f92a 	bl	800658e <RTC_EnterInitMode>
 800633a:	4603      	mov	r3, r0
 800633c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800633e:	7cfb      	ldrb	r3, [r7, #19]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d163      	bne.n	800640c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d126      	bne.n	8006398 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006354:	2b00      	cmp	r3, #0
 8006356:	d102      	bne.n	800635e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2200      	movs	r2, #0
 800635c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f000 f984 	bl	8006670 <RTC_ByteToBcd2>
 8006368:	4603      	mov	r3, r0
 800636a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	785b      	ldrb	r3, [r3, #1]
 8006370:	4618      	mov	r0, r3
 8006372:	f000 f97d 	bl	8006670 <RTC_ByteToBcd2>
 8006376:	4603      	mov	r3, r0
 8006378:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800637a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	789b      	ldrb	r3, [r3, #2]
 8006380:	4618      	mov	r0, r3
 8006382:	f000 f975 	bl	8006670 <RTC_ByteToBcd2>
 8006386:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006388:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	78db      	ldrb	r3, [r3, #3]
 8006390:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006392:	4313      	orrs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	e018      	b.n	80063ca <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d102      	bne.n	80063ac <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2200      	movs	r2, #0
 80063aa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	785b      	ldrb	r3, [r3, #1]
 80063b6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80063b8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80063be:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	78db      	ldrb	r3, [r3, #3]
 80063c4:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80063d4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80063d8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6899      	ldr	r1, [r3, #8]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	68da      	ldr	r2, [r3, #12]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	431a      	orrs	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 f8f6 	bl	80065f4 <RTC_ExitInitMode>
 8006408:	4603      	mov	r3, r0
 800640a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	22ff      	movs	r2, #255	; 0xff
 8006412:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006414:	7cfb      	ldrb	r3, [r7, #19]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d103      	bne.n	8006422 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800642a:	7cfb      	ldrb	r3, [r7, #19]
}
 800642c:	4618      	mov	r0, r3
 800642e:	371c      	adds	r7, #28
 8006430:	46bd      	mov	sp, r7
 8006432:	bd90      	pop	{r4, r7, pc}

08006434 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006434:	b590      	push	{r4, r7, lr}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d101      	bne.n	800644e <HAL_RTC_SetDate+0x1a>
 800644a:	2302      	movs	r3, #2
 800644c:	e075      	b.n	800653a <HAL_RTC_SetDate+0x106>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2202      	movs	r2, #2
 800645a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10e      	bne.n	8006482 <HAL_RTC_SetDate+0x4e>
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	785b      	ldrb	r3, [r3, #1]
 8006468:	f003 0310 	and.w	r3, r3, #16
 800646c:	2b00      	cmp	r3, #0
 800646e:	d008      	beq.n	8006482 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	785b      	ldrb	r3, [r3, #1]
 8006474:	f023 0310 	bic.w	r3, r3, #16
 8006478:	b2db      	uxtb	r3, r3
 800647a:	330a      	adds	r3, #10
 800647c:	b2da      	uxtb	r2, r3
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d11c      	bne.n	80064c2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	78db      	ldrb	r3, [r3, #3]
 800648c:	4618      	mov	r0, r3
 800648e:	f000 f8ef 	bl	8006670 <RTC_ByteToBcd2>
 8006492:	4603      	mov	r3, r0
 8006494:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	785b      	ldrb	r3, [r3, #1]
 800649a:	4618      	mov	r0, r3
 800649c:	f000 f8e8 	bl	8006670 <RTC_ByteToBcd2>
 80064a0:	4603      	mov	r3, r0
 80064a2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80064a4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	789b      	ldrb	r3, [r3, #2]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 f8e0 	bl	8006670 <RTC_ByteToBcd2>
 80064b0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80064b2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80064bc:	4313      	orrs	r3, r2
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	e00e      	b.n	80064e0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	78db      	ldrb	r3, [r3, #3]
 80064c6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	785b      	ldrb	r3, [r3, #1]
 80064cc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80064ce:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80064d4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	22ca      	movs	r2, #202	; 0xca
 80064e6:	625a      	str	r2, [r3, #36]	; 0x24
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2253      	movs	r2, #83	; 0x53
 80064ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 f84c 	bl	800658e <RTC_EnterInitMode>
 80064f6:	4603      	mov	r3, r0
 80064f8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80064fa:	7cfb      	ldrb	r3, [r7, #19]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10c      	bne.n	800651a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800650a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800650e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f86f 	bl	80065f4 <RTC_ExitInitMode>
 8006516:	4603      	mov	r3, r0
 8006518:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	22ff      	movs	r2, #255	; 0xff
 8006520:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006522:	7cfb      	ldrb	r3, [r7, #19]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d103      	bne.n	8006530 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006538:	7cfb      	ldrb	r3, [r7, #19]
}
 800653a:	4618      	mov	r0, r3
 800653c:	371c      	adds	r7, #28
 800653e:	46bd      	mov	sp, r7
 8006540:	bd90      	pop	{r4, r7, pc}

08006542 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006558:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800655a:	f7fb f8a1 	bl	80016a0 <HAL_GetTick>
 800655e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006560:	e009      	b.n	8006576 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006562:	f7fb f89d 	bl	80016a0 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006570:	d901      	bls.n	8006576 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e007      	b.n	8006586 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0ee      	beq.n	8006562 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d120      	bne.n	80065ea <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f04f 32ff 	mov.w	r2, #4294967295
 80065b0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80065b2:	f7fb f875 	bl	80016a0 <HAL_GetTick>
 80065b6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80065b8:	e00d      	b.n	80065d6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80065ba:	f7fb f871 	bl	80016a0 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065c8:	d905      	bls.n	80065d6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2203      	movs	r2, #3
 80065d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d102      	bne.n	80065ea <RTC_EnterInitMode+0x5c>
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d1e7      	bne.n	80065ba <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006600:	4b1a      	ldr	r3, [pc, #104]	; (800666c <RTC_ExitInitMode+0x78>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	4a19      	ldr	r2, [pc, #100]	; (800666c <RTC_ExitInitMode+0x78>)
 8006606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800660a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800660c:	4b17      	ldr	r3, [pc, #92]	; (800666c <RTC_ExitInitMode+0x78>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 0320 	and.w	r3, r3, #32
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10c      	bne.n	8006632 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff ff92 	bl	8006542 <HAL_RTC_WaitForSynchro>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d01e      	beq.n	8006662 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2203      	movs	r2, #3
 8006628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	73fb      	strb	r3, [r7, #15]
 8006630:	e017      	b.n	8006662 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006632:	4b0e      	ldr	r3, [pc, #56]	; (800666c <RTC_ExitInitMode+0x78>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	4a0d      	ldr	r2, [pc, #52]	; (800666c <RTC_ExitInitMode+0x78>)
 8006638:	f023 0320 	bic.w	r3, r3, #32
 800663c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7ff ff7f 	bl	8006542 <HAL_RTC_WaitForSynchro>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d005      	beq.n	8006656 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2203      	movs	r2, #3
 800664e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006656:	4b05      	ldr	r3, [pc, #20]	; (800666c <RTC_ExitInitMode+0x78>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	4a04      	ldr	r2, [pc, #16]	; (800666c <RTC_ExitInitMode+0x78>)
 800665c:	f043 0320 	orr.w	r3, r3, #32
 8006660:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006662:	7bfb      	ldrb	r3, [r7, #15]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40002800 	.word	0x40002800

08006670 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006682:	e005      	b.n	8006690 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3301      	adds	r3, #1
 8006688:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	3b0a      	subs	r3, #10
 800668e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006690:	7afb      	ldrb	r3, [r7, #11]
 8006692:	2b09      	cmp	r3, #9
 8006694:	d8f6      	bhi.n	8006684 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	b2da      	uxtb	r2, r3
 800669e:	7afb      	ldrb	r3, [r7, #11]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	b2db      	uxtb	r3, r3
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d008      	beq.n	80066de <HAL_SD_IRQHandler+0x2e>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 0308 	and.w	r3, r3, #8
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f9be 	bl	8006a58 <SD_Read_IT>
 80066dc:	e199      	b.n	8006a12 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80ae 	beq.w	800684a <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6812      	ldr	r2, [r2, #0]
 8006702:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006706:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800670a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800671a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800672a:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f003 0308 	and.w	r3, r3, #8
 8006732:	2b00      	cmp	r3, #0
 8006734:	d038      	beq.n	80067a8 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d104      	bne.n	800674a <HAL_SD_IRQHandler+0x9a>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b00      	cmp	r3, #0
 8006748:	d011      	beq.n	800676e <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4618      	mov	r0, r3
 8006750:	f001 fe14 	bl	800837c <SDMMC_CmdStopTransfer>
 8006754:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d008      	beq.n	800676e <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f96b 	bl	8006a44 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4aa0      	ldr	r2, [pc, #640]	; (80069f4 <HAL_SD_IRQHandler+0x344>)
 8006774:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d104      	bne.n	8006798 <HAL_SD_IRQHandler+0xe8>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f949 	bl	8006a30 <HAL_SD_RxCpltCallback>
 800679e:	e138      	b.n	8006a12 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f93b 	bl	8006a1c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 80067a6:	e134      	b.n	8006a12 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 812f 	beq.w	8006a12 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2200      	movs	r2, #0
 80067ba:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2200      	movs	r2, #0
 80067c2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2200      	movs	r2, #0
 80067ca:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <HAL_SD_IRQHandler+0x130>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d011      	beq.n	8006804 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 fdc9 	bl	800837c <SDMMC_CmdStopTransfer>
 80067ea:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d008      	beq.n	8006804 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	431a      	orrs	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f920 	bl	8006a44 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f003 0310 	and.w	r3, r3, #16
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <HAL_SD_IRQHandler+0x176>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f8f8 	bl	8006a1c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d105      	bne.n	8006842 <HAL_SD_IRQHandler+0x192>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 80e8 	beq.w	8006a12 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f8f4 	bl	8006a30 <HAL_SD_RxCpltCallback>
}
 8006848:	e0e3      	b.n	8006a12 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d008      	beq.n	800686a <HAL_SD_IRQHandler+0x1ba>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f949 	bl	8006afa <SD_Write_IT>
 8006868:	e0d3      	b.n	8006a12 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006870:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 809d 	beq.w	80069b4 <HAL_SD_IRQHandler+0x304>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688c:	f043 0202 	orr.w	r2, r3, #2
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	f043 0208 	orr.w	r2, r3, #8
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c0:	f043 0220 	orr.w	r2, r3, #32
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ce:	f003 0310 	and.w	r3, r3, #16
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d005      	beq.n	80068e2 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	f043 0210 	orr.w	r2, r3, #16
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a43      	ldr	r2, [pc, #268]	; (80069f4 <HAL_SD_IRQHandler+0x344>)
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80068f8:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006908:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006918:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006928:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f001 fd24 	bl	800837c <SDMMC_CmdStopTransfer>
 8006934:	4602      	mov	r2, r0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800694e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006958:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f003 0308 	and.w	r3, r3, #8
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f866 	bl	8006a44 <HAL_SD_ErrorCallback>
}
 8006978:	e04b      	b.n	8006a12 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006980:	2b00      	cmp	r3, #0
 8006982:	d046      	beq.n	8006a12 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	2b00      	cmp	r3, #0
 800698a:	d042      	beq.n	8006a12 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800699a:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2200      	movs	r2, #0
 80069a2:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f849 	bl	8006a44 <HAL_SD_ErrorCallback>
}
 80069b2:	e02e      	b.n	8006a12 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d027      	beq.n	8006a12 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ca:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10e      	bne.n	80069f8 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f8fb 	bl	8006be0 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 80069ea:	e012      	b.n	8006a12 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f8e3 	bl	8006bb8 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 80069f2:	e00e      	b.n	8006a12 <HAL_SD_IRQHandler+0x362>
 80069f4:	18000f3a 	.word	0x18000f3a
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f8e2 	bl	8006bcc <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8006a08:	e003      	b.n	8006a12 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f8ca 	bl	8006ba4 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8006a10:	e7ff      	b.n	8006a12 <HAL_SD_IRQHandler+0x362>
 8006a12:	bf00      	nop
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop

08006a1c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d03f      	beq.n	8006af2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	e033      	b.n	8006ae0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f001 fc15 	bl	80082ac <SDMMC_ReadFIFO>
 8006a82:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	0a1b      	lsrs	r3, r3, #8
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	0c1b      	lsrs	r3, r3, #16
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	0e1b      	lsrs	r3, r3, #24
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	3301      	adds	r3, #1
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	2b07      	cmp	r3, #7
 8006ae4:	d9c8      	bls.n	8006a78 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006af2:	bf00      	nop
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b086      	sub	sp, #24
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d043      	beq.n	8006b9c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	e037      	b.n	8006b8a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3301      	adds	r3, #1
 8006b24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	021a      	lsls	r2, r3, #8
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	3b01      	subs	r3, #1
 8006b42:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	041a      	lsls	r2, r3, #16
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3301      	adds	r3, #1
 8006b54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	061a      	lsls	r2, r3, #24
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	3b01      	subs	r3, #1
 8006b72:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f107 0208 	add.w	r2, r7, #8
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f001 fba1 	bl	80082c6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	3301      	adds	r3, #1
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2b07      	cmp	r3, #7
 8006b8e:	d9c4      	bls.n	8006b1a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e095      	b.n	8006d32 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d108      	bne.n	8006c20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c16:	d009      	beq.n	8006c2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	61da      	str	r2, [r3, #28]
 8006c1e:	e005      	b.n	8006c2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fa f9ec 	bl	8001024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c6c:	d902      	bls.n	8006c74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	e002      	b.n	8006c7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006c82:	d007      	beq.n	8006c94 <HAL_SPI_Init+0xa0>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c8c:	d002      	beq.n	8006c94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd6:	ea42 0103 	orr.w	r1, r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cde:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	0c1b      	lsrs	r3, r3, #16
 8006cf0:	f003 0204 	and.w	r2, r3, #4
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	f003 0310 	and.w	r3, r3, #16
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d02:	f003 0308 	and.w	r3, r3, #8
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006d10:	ea42 0103 	orr.w	r1, r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b088      	sub	sp, #32
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	603b      	str	r3, [r7, #0]
 8006d46:	4613      	mov	r3, r2
 8006d48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_SPI_Transmit+0x22>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e158      	b.n	800700e <HAL_SPI_Transmit+0x2d4>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d64:	f7fa fc9c 	bl	80016a0 <HAL_GetTick>
 8006d68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d002      	beq.n	8006d80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d7e:	e13d      	b.n	8006ffc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <HAL_SPI_Transmit+0x52>
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d102      	bne.n	8006d92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d90:	e134      	b.n	8006ffc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2203      	movs	r2, #3
 8006d96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	88fa      	ldrh	r2, [r7, #6]
 8006daa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	88fa      	ldrh	r2, [r7, #6]
 8006db0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ddc:	d10f      	bne.n	8006dfe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e08:	2b40      	cmp	r3, #64	; 0x40
 8006e0a:	d007      	beq.n	8006e1c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e24:	d94b      	bls.n	8006ebe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <HAL_SPI_Transmit+0xfa>
 8006e2e:	8afb      	ldrh	r3, [r7, #22]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d13e      	bne.n	8006eb2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e38:	881a      	ldrh	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e44:	1c9a      	adds	r2, r3, #2
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e58:	e02b      	b.n	8006eb2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d112      	bne.n	8006e8e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6c:	881a      	ldrh	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	1c9a      	adds	r2, r3, #2
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e8c:	e011      	b.n	8006eb2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e8e:	f7fa fc07 	bl	80016a0 <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d803      	bhi.n	8006ea6 <HAL_SPI_Transmit+0x16c>
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea4:	d102      	bne.n	8006eac <HAL_SPI_Transmit+0x172>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d102      	bne.n	8006eb2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006eb0:	e0a4      	b.n	8006ffc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1ce      	bne.n	8006e5a <HAL_SPI_Transmit+0x120>
 8006ebc:	e07c      	b.n	8006fb8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <HAL_SPI_Transmit+0x192>
 8006ec6:	8afb      	ldrh	r3, [r7, #22]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d170      	bne.n	8006fae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d912      	bls.n	8006efc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eda:	881a      	ldrh	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	1c9a      	adds	r2, r3, #2
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b02      	subs	r3, #2
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006efa:	e058      	b.n	8006fae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	330c      	adds	r3, #12
 8006f06:	7812      	ldrb	r2, [r2, #0]
 8006f08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006f22:	e044      	b.n	8006fae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d12b      	bne.n	8006f8a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d912      	bls.n	8006f62 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f40:	881a      	ldrh	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	1c9a      	adds	r2, r3, #2
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	3b02      	subs	r3, #2
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f60:	e025      	b.n	8006fae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	330c      	adds	r3, #12
 8006f6c:	7812      	ldrb	r2, [r2, #0]
 8006f6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f88:	e011      	b.n	8006fae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f8a:	f7fa fb89 	bl	80016a0 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d803      	bhi.n	8006fa2 <HAL_SPI_Transmit+0x268>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa0:	d102      	bne.n	8006fa8 <HAL_SPI_Transmit+0x26e>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d102      	bne.n	8006fae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fac:	e026      	b.n	8006ffc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1b5      	bne.n	8006f24 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 fce3 	bl	8007988 <SPI_EndRxTxTransaction>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10a      	bne.n	8006fec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	613b      	str	r3, [r7, #16]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	613b      	str	r3, [r7, #16]
 8006fea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	77fb      	strb	r3, [r7, #31]
 8006ff8:	e000      	b.n	8006ffc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006ffa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800700c:	7ffb      	ldrb	r3, [r7, #31]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3720      	adds	r7, #32
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b088      	sub	sp, #32
 800701a:	af02      	add	r7, sp, #8
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	603b      	str	r3, [r7, #0]
 8007022:	4613      	mov	r3, r2
 8007024:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007032:	d112      	bne.n	800705a <HAL_SPI_Receive+0x44>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10e      	bne.n	800705a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2204      	movs	r2, #4
 8007040:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007044:	88fa      	ldrh	r2, [r7, #6]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	4613      	mov	r3, r2
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	68b9      	ldr	r1, [r7, #8]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 f910 	bl	8007276 <HAL_SPI_TransmitReceive>
 8007056:	4603      	mov	r3, r0
 8007058:	e109      	b.n	800726e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007060:	2b01      	cmp	r3, #1
 8007062:	d101      	bne.n	8007068 <HAL_SPI_Receive+0x52>
 8007064:	2302      	movs	r3, #2
 8007066:	e102      	b.n	800726e <HAL_SPI_Receive+0x258>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007070:	f7fa fb16 	bl	80016a0 <HAL_GetTick>
 8007074:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b01      	cmp	r3, #1
 8007080:	d002      	beq.n	8007088 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007082:	2302      	movs	r3, #2
 8007084:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007086:	e0e9      	b.n	800725c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <HAL_SPI_Receive+0x7e>
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d102      	bne.n	800709a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007098:	e0e0      	b.n	800725c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2204      	movs	r2, #4
 800709e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	88fa      	ldrh	r2, [r7, #6]
 80070b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	88fa      	ldrh	r2, [r7, #6]
 80070ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070e4:	d908      	bls.n	80070f8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070f4:	605a      	str	r2, [r3, #4]
 80070f6:	e007      	b.n	8007108 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007106:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007110:	d10f      	bne.n	8007132 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007120:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007130:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713c:	2b40      	cmp	r3, #64	; 0x40
 800713e:	d007      	beq.n	8007150 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800714e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007158:	d867      	bhi.n	800722a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800715a:	e030      	b.n	80071be <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b01      	cmp	r3, #1
 8007168:	d117      	bne.n	800719a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f103 020c 	add.w	r2, r3, #12
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	7812      	ldrb	r2, [r2, #0]
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800718c:	b29b      	uxth	r3, r3
 800718e:	3b01      	subs	r3, #1
 8007190:	b29a      	uxth	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007198:	e011      	b.n	80071be <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800719a:	f7fa fa81 	bl	80016a0 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d803      	bhi.n	80071b2 <HAL_SPI_Receive+0x19c>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d102      	bne.n	80071b8 <HAL_SPI_Receive+0x1a2>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80071bc:	e04e      	b.n	800725c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1c8      	bne.n	800715c <HAL_SPI_Receive+0x146>
 80071ca:	e034      	b.n	8007236 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d115      	bne.n	8007206 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e4:	b292      	uxth	r2, r2
 80071e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	1c9a      	adds	r2, r3, #2
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	3b01      	subs	r3, #1
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007204:	e011      	b.n	800722a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007206:	f7fa fa4b 	bl	80016a0 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d803      	bhi.n	800721e <HAL_SPI_Receive+0x208>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721c:	d102      	bne.n	8007224 <HAL_SPI_Receive+0x20e>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d102      	bne.n	800722a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007228:	e018      	b.n	800725c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1ca      	bne.n	80071cc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fb4c 	bl	80078d8 <SPI_EndRxTransaction>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d002      	beq.n	800724c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2220      	movs	r2, #32
 800724a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	75fb      	strb	r3, [r7, #23]
 8007258:	e000      	b.n	800725c <HAL_SPI_Receive+0x246>
  }

error :
 800725a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800726c:	7dfb      	ldrb	r3, [r7, #23]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b08a      	sub	sp, #40	; 0x28
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007284:	2301      	movs	r3, #1
 8007286:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007294:	2b01      	cmp	r3, #1
 8007296:	d101      	bne.n	800729c <HAL_SPI_TransmitReceive+0x26>
 8007298:	2302      	movs	r3, #2
 800729a:	e1fb      	b.n	8007694 <HAL_SPI_TransmitReceive+0x41e>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072a4:	f7fa f9fc 	bl	80016a0 <HAL_GetTick>
 80072a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80072b8:	887b      	ldrh	r3, [r7, #2]
 80072ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80072bc:	887b      	ldrh	r3, [r7, #2]
 80072be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072c0:	7efb      	ldrb	r3, [r7, #27]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d00e      	beq.n	80072e4 <HAL_SPI_TransmitReceive+0x6e>
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072cc:	d106      	bne.n	80072dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d102      	bne.n	80072dc <HAL_SPI_TransmitReceive+0x66>
 80072d6:	7efb      	ldrb	r3, [r7, #27]
 80072d8:	2b04      	cmp	r3, #4
 80072da:	d003      	beq.n	80072e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80072dc:	2302      	movs	r3, #2
 80072de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80072e2:	e1cd      	b.n	8007680 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <HAL_SPI_TransmitReceive+0x80>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <HAL_SPI_TransmitReceive+0x80>
 80072f0:	887b      	ldrh	r3, [r7, #2]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d103      	bne.n	80072fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80072fc:	e1c0      	b.n	8007680 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b04      	cmp	r3, #4
 8007308:	d003      	beq.n	8007312 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2205      	movs	r2, #5
 800730e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	887a      	ldrh	r2, [r7, #2]
 8007322:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	887a      	ldrh	r2, [r7, #2]
 800732a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	887a      	ldrh	r2, [r7, #2]
 8007338:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	887a      	ldrh	r2, [r7, #2]
 800733e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007354:	d802      	bhi.n	800735c <HAL_SPI_TransmitReceive+0xe6>
 8007356:	8a3b      	ldrh	r3, [r7, #16]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d908      	bls.n	800736e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800736a:	605a      	str	r2, [r3, #4]
 800736c:	e007      	b.n	800737e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800737c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007388:	2b40      	cmp	r3, #64	; 0x40
 800738a:	d007      	beq.n	800739c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800739a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073a4:	d97c      	bls.n	80074a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <HAL_SPI_TransmitReceive+0x13e>
 80073ae:	8a7b      	ldrh	r3, [r7, #18]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d169      	bne.n	8007488 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b8:	881a      	ldrh	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	1c9a      	adds	r2, r3, #2
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073d8:	e056      	b.n	8007488 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d11b      	bne.n	8007420 <HAL_SPI_TransmitReceive+0x1aa>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d016      	beq.n	8007420 <HAL_SPI_TransmitReceive+0x1aa>
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d113      	bne.n	8007420 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fc:	881a      	ldrh	r2, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007408:	1c9a      	adds	r2, r3, #2
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007412:	b29b      	uxth	r3, r3
 8007414:	3b01      	subs	r3, #1
 8007416:	b29a      	uxth	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b01      	cmp	r3, #1
 800742c:	d11c      	bne.n	8007468 <HAL_SPI_TransmitReceive+0x1f2>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007434:	b29b      	uxth	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d016      	beq.n	8007468 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007444:	b292      	uxth	r2, r2
 8007446:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744c:	1c9a      	adds	r2, r3, #2
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007458:	b29b      	uxth	r3, r3
 800745a:	3b01      	subs	r3, #1
 800745c:	b29a      	uxth	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007464:	2301      	movs	r3, #1
 8007466:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007468:	f7fa f91a 	bl	80016a0 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007474:	429a      	cmp	r2, r3
 8007476:	d807      	bhi.n	8007488 <HAL_SPI_TransmitReceive+0x212>
 8007478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747e:	d003      	beq.n	8007488 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007486:	e0fb      	b.n	8007680 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800748c:	b29b      	uxth	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1a3      	bne.n	80073da <HAL_SPI_TransmitReceive+0x164>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007498:	b29b      	uxth	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d19d      	bne.n	80073da <HAL_SPI_TransmitReceive+0x164>
 800749e:	e0df      	b.n	8007660 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <HAL_SPI_TransmitReceive+0x23a>
 80074a8:	8a7b      	ldrh	r3, [r7, #18]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	f040 80cb 	bne.w	8007646 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d912      	bls.n	80074e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074be:	881a      	ldrh	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	1c9a      	adds	r2, r3, #2
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	3b02      	subs	r3, #2
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074de:	e0b2      	b.n	8007646 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	330c      	adds	r3, #12
 80074ea:	7812      	ldrb	r2, [r2, #0]
 80074ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007506:	e09e      	b.n	8007646 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b02      	cmp	r3, #2
 8007514:	d134      	bne.n	8007580 <HAL_SPI_TransmitReceive+0x30a>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800751a:	b29b      	uxth	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d02f      	beq.n	8007580 <HAL_SPI_TransmitReceive+0x30a>
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	2b01      	cmp	r3, #1
 8007524:	d12c      	bne.n	8007580 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800752a:	b29b      	uxth	r3, r3
 800752c:	2b01      	cmp	r3, #1
 800752e:	d912      	bls.n	8007556 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	881a      	ldrh	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	1c9a      	adds	r2, r3, #2
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800754a:	b29b      	uxth	r3, r3
 800754c:	3b02      	subs	r3, #2
 800754e:	b29a      	uxth	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007554:	e012      	b.n	800757c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	330c      	adds	r3, #12
 8007560:	7812      	ldrb	r2, [r2, #0]
 8007562:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b01      	subs	r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b01      	cmp	r3, #1
 800758c:	d148      	bne.n	8007620 <HAL_SPI_TransmitReceive+0x3aa>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007594:	b29b      	uxth	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d042      	beq.n	8007620 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d923      	bls.n	80075ee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68da      	ldr	r2, [r3, #12]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b0:	b292      	uxth	r2, r2
 80075b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b8:	1c9a      	adds	r2, r3, #2
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b02      	subs	r3, #2
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d81f      	bhi.n	800761c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075ea:	605a      	str	r2, [r3, #4]
 80075ec:	e016      	b.n	800761c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f103 020c 	add.w	r2, r3, #12
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	7812      	ldrb	r2, [r2, #0]
 80075fc:	b2d2      	uxtb	r2, r2
 80075fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007604:	1c5a      	adds	r2, r3, #1
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007610:	b29b      	uxth	r3, r3
 8007612:	3b01      	subs	r3, #1
 8007614:	b29a      	uxth	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800761c:	2301      	movs	r3, #1
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007620:	f7fa f83e 	bl	80016a0 <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800762c:	429a      	cmp	r2, r3
 800762e:	d803      	bhi.n	8007638 <HAL_SPI_TransmitReceive+0x3c2>
 8007630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007636:	d102      	bne.n	800763e <HAL_SPI_TransmitReceive+0x3c8>
 8007638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763a:	2b00      	cmp	r3, #0
 800763c:	d103      	bne.n	8007646 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007644:	e01c      	b.n	8007680 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800764a:	b29b      	uxth	r3, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	f47f af5b 	bne.w	8007508 <HAL_SPI_TransmitReceive+0x292>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007658:	b29b      	uxth	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	f47f af54 	bne.w	8007508 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 f98f 	bl	8007988 <SPI_EndRxTxTransaction>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d006      	beq.n	800767e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2220      	movs	r2, #32
 800767a:	661a      	str	r2, [r3, #96]	; 0x60
 800767c:	e000      	b.n	8007680 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800767e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007690:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007694:	4618      	mov	r0, r3
 8007696:	3728      	adds	r7, #40	; 0x28
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b088      	sub	sp, #32
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	603b      	str	r3, [r7, #0]
 80076a8:	4613      	mov	r3, r2
 80076aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076ac:	f7f9 fff8 	bl	80016a0 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	4413      	add	r3, r2
 80076ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076bc:	f7f9 fff0 	bl	80016a0 <HAL_GetTick>
 80076c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076c2:	4b39      	ldr	r3, [pc, #228]	; (80077a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	015b      	lsls	r3, r3, #5
 80076c8:	0d1b      	lsrs	r3, r3, #20
 80076ca:	69fa      	ldr	r2, [r7, #28]
 80076cc:	fb02 f303 	mul.w	r3, r2, r3
 80076d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076d2:	e054      	b.n	800777e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076da:	d050      	beq.n	800777e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076dc:	f7f9 ffe0 	bl	80016a0 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d902      	bls.n	80076f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d13d      	bne.n	800776e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007700:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800770a:	d111      	bne.n	8007730 <SPI_WaitFlagStateUntilTimeout+0x94>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007714:	d004      	beq.n	8007720 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800771e:	d107      	bne.n	8007730 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800772e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007738:	d10f      	bne.n	800775a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007758:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e017      	b.n	800779e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007774:	2300      	movs	r3, #0
 8007776:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	3b01      	subs	r3, #1
 800777c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	4013      	ands	r3, r2
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	429a      	cmp	r2, r3
 800778c:	bf0c      	ite	eq
 800778e:	2301      	moveq	r3, #1
 8007790:	2300      	movne	r3, #0
 8007792:	b2db      	uxtb	r3, r3
 8007794:	461a      	mov	r2, r3
 8007796:	79fb      	ldrb	r3, [r7, #7]
 8007798:	429a      	cmp	r2, r3
 800779a:	d19b      	bne.n	80076d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3720      	adds	r7, #32
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000000 	.word	0x20000000

080077ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08a      	sub	sp, #40	; 0x28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
 80077b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80077be:	f7f9 ff6f 	bl	80016a0 <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	1a9b      	subs	r3, r3, r2
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	4413      	add	r3, r2
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80077ce:	f7f9 ff67 	bl	80016a0 <HAL_GetTick>
 80077d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	330c      	adds	r3, #12
 80077da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80077dc:	4b3d      	ldr	r3, [pc, #244]	; (80078d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	00da      	lsls	r2, r3, #3
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	0d1b      	lsrs	r3, r3, #20
 80077ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ee:	fb02 f303 	mul.w	r3, r2, r3
 80077f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80077f4:	e060      	b.n	80078b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80077fc:	d107      	bne.n	800780e <SPI_WaitFifoStateUntilTimeout+0x62>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d104      	bne.n	800780e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	b2db      	uxtb	r3, r3
 800780a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800780c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007814:	d050      	beq.n	80078b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007816:	f7f9 ff43 	bl	80016a0 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007822:	429a      	cmp	r2, r3
 8007824:	d902      	bls.n	800782c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	d13d      	bne.n	80078a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800783a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007844:	d111      	bne.n	800786a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800784e:	d004      	beq.n	800785a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007858:	d107      	bne.n	800786a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007868:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007872:	d10f      	bne.n	8007894 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007892:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e010      	b.n	80078ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	3b01      	subs	r3, #1
 80078b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689a      	ldr	r2, [r3, #8]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	4013      	ands	r3, r2
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d196      	bne.n	80077f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3728      	adds	r7, #40	; 0x28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	20000000 	.word	0x20000000

080078d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af02      	add	r7, sp, #8
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078ec:	d111      	bne.n	8007912 <SPI_EndRxTransaction+0x3a>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078f6:	d004      	beq.n	8007902 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007900:	d107      	bne.n	8007912 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007910:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2200      	movs	r2, #0
 800791a:	2180      	movs	r1, #128	; 0x80
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f7ff febd 	bl	800769c <SPI_WaitFlagStateUntilTimeout>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800792c:	f043 0220 	orr.w	r2, r3, #32
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e023      	b.n	8007980 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007940:	d11d      	bne.n	800797e <SPI_EndRxTransaction+0xa6>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800794a:	d004      	beq.n	8007956 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007954:	d113      	bne.n	800797e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	2200      	movs	r2, #0
 800795e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f7ff ff22 	bl	80077ac <SPI_WaitFifoStateUntilTimeout>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d007      	beq.n	800797e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007972:	f043 0220 	orr.w	r2, r3, #32
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e000      	b.n	8007980 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af02      	add	r7, sp, #8
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2200      	movs	r2, #0
 800799c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f7ff ff03 	bl	80077ac <SPI_WaitFifoStateUntilTimeout>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d007      	beq.n	80079bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079b0:	f043 0220 	orr.w	r2, r3, #32
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e027      	b.n	8007a0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2200      	movs	r2, #0
 80079c4:	2180      	movs	r1, #128	; 0x80
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f7ff fe68 	bl	800769c <SPI_WaitFlagStateUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d007      	beq.n	80079e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079d6:	f043 0220 	orr.w	r2, r3, #32
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e014      	b.n	8007a0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f7ff fedc 	bl	80077ac <SPI_WaitFifoStateUntilTimeout>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d007      	beq.n	8007a0a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079fe:	f043 0220 	orr.w	r2, r3, #32
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e000      	b.n	8007a0c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e049      	b.n	8007aba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d106      	bne.n	8007a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7f9 fd52 	bl	80014e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3304      	adds	r3, #4
 8007a50:	4619      	mov	r1, r3
 8007a52:	4610      	mov	r0, r2
 8007a54:	f000 fa50 	bl	8007ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b082      	sub	sp, #8
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d122      	bne.n	8007b1e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d11b      	bne.n	8007b1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f06f 0202 	mvn.w	r2, #2
 8007aee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	f003 0303 	and.w	r3, r3, #3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d003      	beq.n	8007b0c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f9d8 	bl	8007eba <HAL_TIM_IC_CaptureCallback>
 8007b0a:	e005      	b.n	8007b18 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f9ca 	bl	8007ea6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f9db 	bl	8007ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d122      	bne.n	8007b72 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	f003 0304 	and.w	r3, r3, #4
 8007b36:	2b04      	cmp	r3, #4
 8007b38:	d11b      	bne.n	8007b72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f06f 0204 	mvn.w	r2, #4
 8007b42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2202      	movs	r2, #2
 8007b48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f9ae 	bl	8007eba <HAL_TIM_IC_CaptureCallback>
 8007b5e:	e005      	b.n	8007b6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f9a0 	bl	8007ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f9b1 	bl	8007ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	f003 0308 	and.w	r3, r3, #8
 8007b7c:	2b08      	cmp	r3, #8
 8007b7e:	d122      	bne.n	8007bc6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	f003 0308 	and.w	r3, r3, #8
 8007b8a:	2b08      	cmp	r3, #8
 8007b8c:	d11b      	bne.n	8007bc6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f06f 0208 	mvn.w	r2, #8
 8007b96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2204      	movs	r2, #4
 8007b9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	f003 0303 	and.w	r3, r3, #3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f984 	bl	8007eba <HAL_TIM_IC_CaptureCallback>
 8007bb2:	e005      	b.n	8007bc0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f976 	bl	8007ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f987 	bl	8007ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	f003 0310 	and.w	r3, r3, #16
 8007bd0:	2b10      	cmp	r3, #16
 8007bd2:	d122      	bne.n	8007c1a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f003 0310 	and.w	r3, r3, #16
 8007bde:	2b10      	cmp	r3, #16
 8007be0:	d11b      	bne.n	8007c1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f06f 0210 	mvn.w	r2, #16
 8007bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2208      	movs	r2, #8
 8007bf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d003      	beq.n	8007c08 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f95a 	bl	8007eba <HAL_TIM_IC_CaptureCallback>
 8007c06:	e005      	b.n	8007c14 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f94c 	bl	8007ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f95d 	bl	8007ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d10e      	bne.n	8007c46 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d107      	bne.n	8007c46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f06f 0201 	mvn.w	r2, #1
 8007c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f926 	bl	8007e92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c50:	2b80      	cmp	r3, #128	; 0x80
 8007c52:	d10e      	bne.n	8007c72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c5e:	2b80      	cmp	r3, #128	; 0x80
 8007c60:	d107      	bne.n	8007c72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fb09 	bl	8008284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c80:	d10e      	bne.n	8007ca0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8c:	2b80      	cmp	r3, #128	; 0x80
 8007c8e:	d107      	bne.n	8007ca0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fafc 	bl	8008298 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007caa:	2b40      	cmp	r3, #64	; 0x40
 8007cac:	d10e      	bne.n	8007ccc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb8:	2b40      	cmp	r3, #64	; 0x40
 8007cba:	d107      	bne.n	8007ccc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f90b 	bl	8007ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	f003 0320 	and.w	r3, r3, #32
 8007cd6:	2b20      	cmp	r3, #32
 8007cd8:	d10e      	bne.n	8007cf8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f003 0320 	and.w	r3, r3, #32
 8007ce4:	2b20      	cmp	r3, #32
 8007ce6:	d107      	bne.n	8007cf8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f06f 0220 	mvn.w	r2, #32
 8007cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fabc 	bl	8008270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cf8:	bf00      	nop
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d101      	bne.n	8007d1c <HAL_TIM_ConfigClockSource+0x1c>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e0b6      	b.n	8007e8a <HAL_TIM_ConfigClockSource+0x18a>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d58:	d03e      	beq.n	8007dd8 <HAL_TIM_ConfigClockSource+0xd8>
 8007d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d5e:	f200 8087 	bhi.w	8007e70 <HAL_TIM_ConfigClockSource+0x170>
 8007d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d66:	f000 8086 	beq.w	8007e76 <HAL_TIM_ConfigClockSource+0x176>
 8007d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6e:	d87f      	bhi.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
 8007d70:	2b70      	cmp	r3, #112	; 0x70
 8007d72:	d01a      	beq.n	8007daa <HAL_TIM_ConfigClockSource+0xaa>
 8007d74:	2b70      	cmp	r3, #112	; 0x70
 8007d76:	d87b      	bhi.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
 8007d78:	2b60      	cmp	r3, #96	; 0x60
 8007d7a:	d050      	beq.n	8007e1e <HAL_TIM_ConfigClockSource+0x11e>
 8007d7c:	2b60      	cmp	r3, #96	; 0x60
 8007d7e:	d877      	bhi.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
 8007d80:	2b50      	cmp	r3, #80	; 0x50
 8007d82:	d03c      	beq.n	8007dfe <HAL_TIM_ConfigClockSource+0xfe>
 8007d84:	2b50      	cmp	r3, #80	; 0x50
 8007d86:	d873      	bhi.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
 8007d88:	2b40      	cmp	r3, #64	; 0x40
 8007d8a:	d058      	beq.n	8007e3e <HAL_TIM_ConfigClockSource+0x13e>
 8007d8c:	2b40      	cmp	r3, #64	; 0x40
 8007d8e:	d86f      	bhi.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
 8007d90:	2b30      	cmp	r3, #48	; 0x30
 8007d92:	d064      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x15e>
 8007d94:	2b30      	cmp	r3, #48	; 0x30
 8007d96:	d86b      	bhi.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d060      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x15e>
 8007d9c:	2b20      	cmp	r3, #32
 8007d9e:	d867      	bhi.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d05c      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x15e>
 8007da4:	2b10      	cmp	r3, #16
 8007da6:	d05a      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x15e>
 8007da8:	e062      	b.n	8007e70 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	6899      	ldr	r1, [r3, #8]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f000 f9b1 	bl	8008120 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007dcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	609a      	str	r2, [r3, #8]
      break;
 8007dd6:	e04f      	b.n	8007e78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6818      	ldr	r0, [r3, #0]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	6899      	ldr	r1, [r3, #8]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	f000 f99a 	bl	8008120 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dfa:	609a      	str	r2, [r3, #8]
      break;
 8007dfc:	e03c      	b.n	8007e78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	6859      	ldr	r1, [r3, #4]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	f000 f90e 	bl	800802c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2150      	movs	r1, #80	; 0x50
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 f967 	bl	80080ea <TIM_ITRx_SetConfig>
      break;
 8007e1c:	e02c      	b.n	8007e78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	6859      	ldr	r1, [r3, #4]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f000 f92d 	bl	800808a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2160      	movs	r1, #96	; 0x60
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 f957 	bl	80080ea <TIM_ITRx_SetConfig>
      break;
 8007e3c:	e01c      	b.n	8007e78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6818      	ldr	r0, [r3, #0]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	6859      	ldr	r1, [r3, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f000 f8ee 	bl	800802c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2140      	movs	r1, #64	; 0x40
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 f947 	bl	80080ea <TIM_ITRx_SetConfig>
      break;
 8007e5c:	e00c      	b.n	8007e78 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4619      	mov	r1, r3
 8007e68:	4610      	mov	r0, r2
 8007e6a:	f000 f93e 	bl	80080ea <TIM_ITRx_SetConfig>
      break;
 8007e6e:	e003      	b.n	8007e78 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	73fb      	strb	r3, [r7, #15]
      break;
 8007e74:	e000      	b.n	8007e78 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007e76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007e9a:	bf00      	nop
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eae:	bf00      	nop
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ed6:	bf00      	nop
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
	...

08007ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a40      	ldr	r2, [pc, #256]	; (800800c <TIM_Base_SetConfig+0x114>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d013      	beq.n	8007f38 <TIM_Base_SetConfig+0x40>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f16:	d00f      	beq.n	8007f38 <TIM_Base_SetConfig+0x40>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a3d      	ldr	r2, [pc, #244]	; (8008010 <TIM_Base_SetConfig+0x118>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00b      	beq.n	8007f38 <TIM_Base_SetConfig+0x40>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a3c      	ldr	r2, [pc, #240]	; (8008014 <TIM_Base_SetConfig+0x11c>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d007      	beq.n	8007f38 <TIM_Base_SetConfig+0x40>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a3b      	ldr	r2, [pc, #236]	; (8008018 <TIM_Base_SetConfig+0x120>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d003      	beq.n	8007f38 <TIM_Base_SetConfig+0x40>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a3a      	ldr	r2, [pc, #232]	; (800801c <TIM_Base_SetConfig+0x124>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d108      	bne.n	8007f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a2f      	ldr	r2, [pc, #188]	; (800800c <TIM_Base_SetConfig+0x114>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d01f      	beq.n	8007f92 <TIM_Base_SetConfig+0x9a>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f58:	d01b      	beq.n	8007f92 <TIM_Base_SetConfig+0x9a>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a2c      	ldr	r2, [pc, #176]	; (8008010 <TIM_Base_SetConfig+0x118>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d017      	beq.n	8007f92 <TIM_Base_SetConfig+0x9a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a2b      	ldr	r2, [pc, #172]	; (8008014 <TIM_Base_SetConfig+0x11c>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d013      	beq.n	8007f92 <TIM_Base_SetConfig+0x9a>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a2a      	ldr	r2, [pc, #168]	; (8008018 <TIM_Base_SetConfig+0x120>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d00f      	beq.n	8007f92 <TIM_Base_SetConfig+0x9a>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a29      	ldr	r2, [pc, #164]	; (800801c <TIM_Base_SetConfig+0x124>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d00b      	beq.n	8007f92 <TIM_Base_SetConfig+0x9a>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a28      	ldr	r2, [pc, #160]	; (8008020 <TIM_Base_SetConfig+0x128>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d007      	beq.n	8007f92 <TIM_Base_SetConfig+0x9a>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a27      	ldr	r2, [pc, #156]	; (8008024 <TIM_Base_SetConfig+0x12c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d003      	beq.n	8007f92 <TIM_Base_SetConfig+0x9a>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a26      	ldr	r2, [pc, #152]	; (8008028 <TIM_Base_SetConfig+0x130>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d108      	bne.n	8007fa4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a10      	ldr	r2, [pc, #64]	; (800800c <TIM_Base_SetConfig+0x114>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d00f      	beq.n	8007ff0 <TIM_Base_SetConfig+0xf8>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a12      	ldr	r2, [pc, #72]	; (800801c <TIM_Base_SetConfig+0x124>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d00b      	beq.n	8007ff0 <TIM_Base_SetConfig+0xf8>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a11      	ldr	r2, [pc, #68]	; (8008020 <TIM_Base_SetConfig+0x128>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d007      	beq.n	8007ff0 <TIM_Base_SetConfig+0xf8>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a10      	ldr	r2, [pc, #64]	; (8008024 <TIM_Base_SetConfig+0x12c>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d003      	beq.n	8007ff0 <TIM_Base_SetConfig+0xf8>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a0f      	ldr	r2, [pc, #60]	; (8008028 <TIM_Base_SetConfig+0x130>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d103      	bne.n	8007ff8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	691a      	ldr	r2, [r3, #16]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	615a      	str	r2, [r3, #20]
}
 8007ffe:	bf00      	nop
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	40012c00 	.word	0x40012c00
 8008010:	40000400 	.word	0x40000400
 8008014:	40000800 	.word	0x40000800
 8008018:	40000c00 	.word	0x40000c00
 800801c:	40013400 	.word	0x40013400
 8008020:	40014000 	.word	0x40014000
 8008024:	40014400 	.word	0x40014400
 8008028:	40014800 	.word	0x40014800

0800802c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800802c:	b480      	push	{r7}
 800802e:	b087      	sub	sp, #28
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	f023 0201 	bic.w	r2, r3, #1
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	011b      	lsls	r3, r3, #4
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	4313      	orrs	r3, r2
 8008060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f023 030a 	bic.w	r3, r3, #10
 8008068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4313      	orrs	r3, r2
 8008070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	621a      	str	r2, [r3, #32]
}
 800807e:	bf00      	nop
 8008080:	371c      	adds	r7, #28
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800808a:	b480      	push	{r7}
 800808c:	b087      	sub	sp, #28
 800808e:	af00      	add	r7, sp, #0
 8008090:	60f8      	str	r0, [r7, #12]
 8008092:	60b9      	str	r1, [r7, #8]
 8008094:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	f023 0210 	bic.w	r2, r3, #16
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	031b      	lsls	r3, r3, #12
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	011b      	lsls	r3, r3, #4
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	621a      	str	r2, [r3, #32]
}
 80080de:	bf00      	nop
 80080e0:	371c      	adds	r7, #28
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b085      	sub	sp, #20
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008100:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4313      	orrs	r3, r2
 8008108:	f043 0307 	orr.w	r3, r3, #7
 800810c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	609a      	str	r2, [r3, #8]
}
 8008114:	bf00      	nop
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008120:	b480      	push	{r7}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800813a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	021a      	lsls	r2, r3, #8
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	431a      	orrs	r2, r3
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	4313      	orrs	r3, r2
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	4313      	orrs	r3, r2
 800814c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	609a      	str	r2, [r3, #8]
}
 8008154:	bf00      	nop
 8008156:	371c      	adds	r7, #28
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008170:	2b01      	cmp	r3, #1
 8008172:	d101      	bne.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008174:	2302      	movs	r3, #2
 8008176:	e068      	b.n	800824a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2202      	movs	r2, #2
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a2e      	ldr	r2, [pc, #184]	; (8008258 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d004      	beq.n	80081ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a2d      	ldr	r2, [pc, #180]	; (800825c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d108      	bne.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a1e      	ldr	r2, [pc, #120]	; (8008258 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d01d      	beq.n	800821e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ea:	d018      	beq.n	800821e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a1b      	ldr	r2, [pc, #108]	; (8008260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d013      	beq.n	800821e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a1a      	ldr	r2, [pc, #104]	; (8008264 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d00e      	beq.n	800821e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a18      	ldr	r2, [pc, #96]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d009      	beq.n	800821e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a13      	ldr	r2, [pc, #76]	; (800825c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d004      	beq.n	800821e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a14      	ldr	r2, [pc, #80]	; (800826c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d10c      	bne.n	8008238 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008224:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	4313      	orrs	r3, r2
 800822e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	40012c00 	.word	0x40012c00
 800825c:	40013400 	.word	0x40013400
 8008260:	40000400 	.word	0x40000400
 8008264:	40000800 	.word	0x40000800
 8008268:	40000c00 	.word	0x40000c00
 800826c:	40014000 	.word	0x40014000

08008270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80082c6:	b480      	push	{r7}
 80082c8:	b083      	sub	sp, #12
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80082f2:	2300      	movs	r3, #0
 80082f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008306:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800830c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008312:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	4313      	orrs	r3, r2
 8008318:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68da      	ldr	r2, [r3, #12]
 800831e:	4b06      	ldr	r3, [pc, #24]	; (8008338 <SDMMC_SendCommand+0x50>)
 8008320:	4013      	ands	r3, r2
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	431a      	orrs	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr
 8008338:	fffee0c0 	.word	0xfffee0c0

0800833c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	b2db      	uxtb	r3, r3
}
 800834a:	4618      	mov	r0, r3
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008356:	b480      	push	{r7}
 8008358:	b085      	sub	sp, #20
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	3314      	adds	r3, #20
 8008364:	461a      	mov	r2, r3
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	4413      	add	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b088      	sub	sp, #32
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008384:	2300      	movs	r3, #0
 8008386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008388:	230c      	movs	r3, #12
 800838a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800838c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008392:	2300      	movs	r3, #0
 8008394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800839a:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083b4:	f107 0308 	add.w	r3, r7, #8
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7ff ff94 	bl	80082e8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80083c0:	4a08      	ldr	r2, [pc, #32]	; (80083e4 <SDMMC_CmdStopTransfer+0x68>)
 80083c2:	210c      	movs	r1, #12
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f80f 	bl	80083e8 <SDMMC_GetCmdResp1>
 80083ca:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 80083d8:	69fb      	ldr	r3, [r7, #28]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3720      	adds	r7, #32
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	05f5e100 	.word	0x05f5e100

080083e8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b088      	sub	sp, #32
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	460b      	mov	r3, r1
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80083f6:	4b70      	ldr	r3, [pc, #448]	; (80085b8 <SDMMC_GetCmdResp1+0x1d0>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a70      	ldr	r2, [pc, #448]	; (80085bc <SDMMC_GetCmdResp1+0x1d4>)
 80083fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008400:	0a5a      	lsrs	r2, r3, #9
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	fb02 f303 	mul.w	r3, r2, r3
 8008408:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	1e5a      	subs	r2, r3, #1
 800840e:	61fa      	str	r2, [r7, #28]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d102      	bne.n	800841a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008414:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008418:	e0c9      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800841e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	4b67      	ldr	r3, [pc, #412]	; (80085c0 <SDMMC_GetCmdResp1+0x1d8>)
 8008424:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0ef      	beq.n	800840a <SDMMC_GetCmdResp1+0x22>
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1ea      	bne.n	800840a <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008438:	f003 0304 	and.w	r3, r3, #4
 800843c:	2b00      	cmp	r3, #0
 800843e:	d004      	beq.n	800844a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2204      	movs	r2, #4
 8008444:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008446:	2304      	movs	r3, #4
 8008448:	e0b1      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844e:	f003 0301 	and.w	r3, r3, #1
 8008452:	2b00      	cmp	r3, #0
 8008454:	d004      	beq.n	8008460 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2201      	movs	r2, #1
 800845a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800845c:	2301      	movs	r3, #1
 800845e:	e0a6      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4a58      	ldr	r2, [pc, #352]	; (80085c4 <SDMMC_GetCmdResp1+0x1dc>)
 8008464:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f7ff ff68 	bl	800833c <SDMMC_GetCommandResponse>
 800846c:	4603      	mov	r3, r0
 800846e:	461a      	mov	r2, r3
 8008470:	7afb      	ldrb	r3, [r7, #11]
 8008472:	4293      	cmp	r3, r2
 8008474:	d001      	beq.n	800847a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008476:	2301      	movs	r3, #1
 8008478:	e099      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800847a:	2100      	movs	r1, #0
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f7ff ff6a 	bl	8008356 <SDMMC_GetResponse>
 8008482:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	4b50      	ldr	r3, [pc, #320]	; (80085c8 <SDMMC_GetCmdResp1+0x1e0>)
 8008488:	4013      	ands	r3, r2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800848e:	2300      	movs	r3, #0
 8008490:	e08d      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	da02      	bge.n	800849e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008498:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800849c:	e087      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80084a8:	2340      	movs	r3, #64	; 0x40
 80084aa:	e080      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80084b6:	2380      	movs	r3, #128	; 0x80
 80084b8:	e079      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80084c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084c8:	e071      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80084d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084d8:	e069      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80084e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084e8:	e061      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80084f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084f8:	e059      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008508:	e051      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008518:	e049      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008524:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008528:	e041      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d002      	beq.n	800853a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008538:	e039      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d002      	beq.n	800854a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008548:	e031      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008554:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008558:	e029      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008564:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008568:	e021      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d002      	beq.n	800857a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008574:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008578:	e019      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008584:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008588:	e011      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008594:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008598:	e009      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f003 0308 	and.w	r3, r3, #8
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80085a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80085a8:	e001      	b.n	80085ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80085aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3720      	adds	r7, #32
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	20000000 	.word	0x20000000
 80085bc:	10624dd3 	.word	0x10624dd3
 80085c0:	00200045 	.word	0x00200045
 80085c4:	002000c5 	.word	0x002000c5
 80085c8:	fdffe008 	.word	0xfdffe008

080085cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085cc:	b084      	sub	sp, #16
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	f107 001c 	add.w	r0, r7, #28
 80085da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f001 faf6 	bl	8009bdc <USB_CoreReset>
 80085f0:	4603      	mov	r3, r0
 80085f2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80085f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d106      	bne.n	8008608 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	639a      	str	r2, [r3, #56]	; 0x38
 8008606:	e005      	b.n	8008614 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008614:	7bfb      	ldrb	r3, [r7, #15]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008620:	b004      	add	sp, #16
 8008622:	4770      	bx	lr

08008624 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	4613      	mov	r3, r2
 8008630:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008632:	79fb      	ldrb	r3, [r7, #7]
 8008634:	2b02      	cmp	r3, #2
 8008636:	d165      	bne.n	8008704 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	4a3e      	ldr	r2, [pc, #248]	; (8008734 <USB_SetTurnaroundTime+0x110>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d906      	bls.n	800864e <USB_SetTurnaroundTime+0x2a>
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	4a3d      	ldr	r2, [pc, #244]	; (8008738 <USB_SetTurnaroundTime+0x114>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d202      	bcs.n	800864e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008648:	230f      	movs	r3, #15
 800864a:	617b      	str	r3, [r7, #20]
 800864c:	e05c      	b.n	8008708 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	4a39      	ldr	r2, [pc, #228]	; (8008738 <USB_SetTurnaroundTime+0x114>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d306      	bcc.n	8008664 <USB_SetTurnaroundTime+0x40>
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	4a38      	ldr	r2, [pc, #224]	; (800873c <USB_SetTurnaroundTime+0x118>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d202      	bcs.n	8008664 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800865e:	230e      	movs	r3, #14
 8008660:	617b      	str	r3, [r7, #20]
 8008662:	e051      	b.n	8008708 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	4a35      	ldr	r2, [pc, #212]	; (800873c <USB_SetTurnaroundTime+0x118>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d306      	bcc.n	800867a <USB_SetTurnaroundTime+0x56>
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	4a34      	ldr	r2, [pc, #208]	; (8008740 <USB_SetTurnaroundTime+0x11c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d202      	bcs.n	800867a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008674:	230d      	movs	r3, #13
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	e046      	b.n	8008708 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	4a30      	ldr	r2, [pc, #192]	; (8008740 <USB_SetTurnaroundTime+0x11c>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d306      	bcc.n	8008690 <USB_SetTurnaroundTime+0x6c>
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	4a2f      	ldr	r2, [pc, #188]	; (8008744 <USB_SetTurnaroundTime+0x120>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d802      	bhi.n	8008690 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800868a:	230c      	movs	r3, #12
 800868c:	617b      	str	r3, [r7, #20]
 800868e:	e03b      	b.n	8008708 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	4a2c      	ldr	r2, [pc, #176]	; (8008744 <USB_SetTurnaroundTime+0x120>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d906      	bls.n	80086a6 <USB_SetTurnaroundTime+0x82>
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	4a2b      	ldr	r2, [pc, #172]	; (8008748 <USB_SetTurnaroundTime+0x124>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d802      	bhi.n	80086a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80086a0:	230b      	movs	r3, #11
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	e030      	b.n	8008708 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	4a27      	ldr	r2, [pc, #156]	; (8008748 <USB_SetTurnaroundTime+0x124>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d906      	bls.n	80086bc <USB_SetTurnaroundTime+0x98>
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	4a26      	ldr	r2, [pc, #152]	; (800874c <USB_SetTurnaroundTime+0x128>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d802      	bhi.n	80086bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80086b6:	230a      	movs	r3, #10
 80086b8:	617b      	str	r3, [r7, #20]
 80086ba:	e025      	b.n	8008708 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	4a23      	ldr	r2, [pc, #140]	; (800874c <USB_SetTurnaroundTime+0x128>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d906      	bls.n	80086d2 <USB_SetTurnaroundTime+0xae>
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	4a22      	ldr	r2, [pc, #136]	; (8008750 <USB_SetTurnaroundTime+0x12c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d202      	bcs.n	80086d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80086cc:	2309      	movs	r3, #9
 80086ce:	617b      	str	r3, [r7, #20]
 80086d0:	e01a      	b.n	8008708 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	4a1e      	ldr	r2, [pc, #120]	; (8008750 <USB_SetTurnaroundTime+0x12c>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d306      	bcc.n	80086e8 <USB_SetTurnaroundTime+0xc4>
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	4a1d      	ldr	r2, [pc, #116]	; (8008754 <USB_SetTurnaroundTime+0x130>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d802      	bhi.n	80086e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80086e2:	2308      	movs	r3, #8
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	e00f      	b.n	8008708 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	4a1a      	ldr	r2, [pc, #104]	; (8008754 <USB_SetTurnaroundTime+0x130>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d906      	bls.n	80086fe <USB_SetTurnaroundTime+0xda>
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	4a19      	ldr	r2, [pc, #100]	; (8008758 <USB_SetTurnaroundTime+0x134>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d202      	bcs.n	80086fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80086f8:	2307      	movs	r3, #7
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	e004      	b.n	8008708 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80086fe:	2306      	movs	r3, #6
 8008700:	617b      	str	r3, [r7, #20]
 8008702:	e001      	b.n	8008708 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008704:	2309      	movs	r3, #9
 8008706:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	029b      	lsls	r3, r3, #10
 800871c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008720:	431a      	orrs	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	371c      	adds	r7, #28
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	00d8acbf 	.word	0x00d8acbf
 8008738:	00e4e1c0 	.word	0x00e4e1c0
 800873c:	00f42400 	.word	0x00f42400
 8008740:	01067380 	.word	0x01067380
 8008744:	011a499f 	.word	0x011a499f
 8008748:	01312cff 	.word	0x01312cff
 800874c:	014ca43f 	.word	0x014ca43f
 8008750:	016e3600 	.word	0x016e3600
 8008754:	01a6ab1f 	.word	0x01a6ab1f
 8008758:	01e84800 	.word	0x01e84800

0800875c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f043 0201 	orr.w	r2, r3, #1
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800877e:	b480      	push	{r7}
 8008780:	b083      	sub	sp, #12
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f023 0201 	bic.w	r2, r3, #1
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80087bc:	78fb      	ldrb	r3, [r7, #3]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d115      	bne.n	80087ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80087ce:	2001      	movs	r0, #1
 80087d0:	f7f8 ff72 	bl	80016b8 <HAL_Delay>
      ms++;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	3301      	adds	r3, #1
 80087d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f001 f985 	bl	8009aea <USB_GetMode>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d01e      	beq.n	8008824 <USB_SetCurrentMode+0x84>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b31      	cmp	r3, #49	; 0x31
 80087ea:	d9f0      	bls.n	80087ce <USB_SetCurrentMode+0x2e>
 80087ec:	e01a      	b.n	8008824 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80087ee:	78fb      	ldrb	r3, [r7, #3]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d115      	bne.n	8008820 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008800:	2001      	movs	r0, #1
 8008802:	f7f8 ff59 	bl	80016b8 <HAL_Delay>
      ms++;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3301      	adds	r3, #1
 800880a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f001 f96c 	bl	8009aea <USB_GetMode>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d005      	beq.n	8008824 <USB_SetCurrentMode+0x84>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2b31      	cmp	r3, #49	; 0x31
 800881c:	d9f0      	bls.n	8008800 <USB_SetCurrentMode+0x60>
 800881e:	e001      	b.n	8008824 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e005      	b.n	8008830 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b32      	cmp	r3, #50	; 0x32
 8008828:	d101      	bne.n	800882e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e000      	b.n	8008830 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008838:	b084      	sub	sp, #16
 800883a:	b580      	push	{r7, lr}
 800883c:	b086      	sub	sp, #24
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008852:	2300      	movs	r3, #0
 8008854:	613b      	str	r3, [r7, #16]
 8008856:	e009      	b.n	800886c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	3340      	adds	r3, #64	; 0x40
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	2200      	movs	r2, #0
 8008864:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	3301      	adds	r3, #1
 800886a:	613b      	str	r3, [r7, #16]
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	2b0e      	cmp	r3, #14
 8008870:	d9f2      	bls.n	8008858 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008874:	2b00      	cmp	r3, #0
 8008876:	d11c      	bne.n	80088b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008886:	f043 0302 	orr.w	r3, r3, #2
 800888a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008890:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	e005      	b.n	80088be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088c4:	461a      	mov	r2, r3
 80088c6:	2300      	movs	r3, #0
 80088c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d0:	4619      	mov	r1, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d8:	461a      	mov	r2, r3
 80088da:	680b      	ldr	r3, [r1, #0]
 80088dc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80088de:	2103      	movs	r1, #3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f959 	bl	8008b98 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80088e6:	2110      	movs	r1, #16
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f8f1 	bl	8008ad0 <USB_FlushTxFifo>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f91d 	bl	8008b38 <USB_FlushRxFifo>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800890e:	461a      	mov	r2, r3
 8008910:	2300      	movs	r3, #0
 8008912:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800891a:	461a      	mov	r2, r3
 800891c:	2300      	movs	r3, #0
 800891e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008926:	461a      	mov	r2, r3
 8008928:	2300      	movs	r3, #0
 800892a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800892c:	2300      	movs	r3, #0
 800892e:	613b      	str	r3, [r7, #16]
 8008930:	e043      	b.n	80089ba <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	015a      	lsls	r2, r3, #5
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4413      	add	r3, r2
 800893a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008948:	d118      	bne.n	800897c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800895c:	461a      	mov	r2, r3
 800895e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	e013      	b.n	800898e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	015a      	lsls	r2, r3, #5
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	4413      	add	r3, r2
 800896e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008972:	461a      	mov	r2, r3
 8008974:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008978:	6013      	str	r3, [r2, #0]
 800897a:	e008      	b.n	800898e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4413      	add	r3, r2
 8008984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008988:	461a      	mov	r2, r3
 800898a:	2300      	movs	r3, #0
 800898c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	4413      	add	r3, r2
 8008996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800899a:	461a      	mov	r2, r3
 800899c:	2300      	movs	r3, #0
 800899e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	015a      	lsls	r2, r3, #5
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ac:	461a      	mov	r2, r3
 80089ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	3301      	adds	r3, #1
 80089b8:	613b      	str	r3, [r7, #16]
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d3b7      	bcc.n	8008932 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089c2:	2300      	movs	r3, #0
 80089c4:	613b      	str	r3, [r7, #16]
 80089c6:	e043      	b.n	8008a50 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089de:	d118      	bne.n	8008a12 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10a      	bne.n	80089fc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	015a      	lsls	r2, r3, #5
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f2:	461a      	mov	r2, r3
 80089f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	e013      	b.n	8008a24 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a08:	461a      	mov	r2, r3
 8008a0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	e008      	b.n	8008a24 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a1e:	461a      	mov	r2, r3
 8008a20:	2300      	movs	r3, #0
 8008a22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	015a      	lsls	r2, r3, #5
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a30:	461a      	mov	r2, r3
 8008a32:	2300      	movs	r3, #0
 8008a34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a42:	461a      	mov	r2, r3
 8008a44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	613b      	str	r3, [r7, #16]
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d3b7      	bcc.n	80089c8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008a78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	f043 0210 	orr.w	r2, r3, #16
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	699a      	ldr	r2, [r3, #24]
 8008a8a:	4b10      	ldr	r3, [pc, #64]	; (8008acc <USB_DevInit+0x294>)
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d005      	beq.n	8008aa4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	f043 0208 	orr.w	r2, r3, #8
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d107      	bne.n	8008aba <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ab2:	f043 0304 	orr.w	r3, r3, #4
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3718      	adds	r7, #24
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ac6:	b004      	add	sp, #16
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	803c3800 	.word	0x803c3800

08008ad0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4a13      	ldr	r2, [pc, #76]	; (8008b34 <USB_FlushTxFifo+0x64>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d901      	bls.n	8008af0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e01b      	b.n	8008b28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	daf2      	bge.n	8008ade <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	019b      	lsls	r3, r3, #6
 8008b00:	f043 0220 	orr.w	r2, r3, #32
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	4a08      	ldr	r2, [pc, #32]	; (8008b34 <USB_FlushTxFifo+0x64>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d901      	bls.n	8008b1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e006      	b.n	8008b28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	f003 0320 	and.w	r3, r3, #32
 8008b22:	2b20      	cmp	r3, #32
 8008b24:	d0f0      	beq.n	8008b08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	00030d40 	.word	0x00030d40

08008b38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b40:	2300      	movs	r3, #0
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	3301      	adds	r3, #1
 8008b48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	4a11      	ldr	r2, [pc, #68]	; (8008b94 <USB_FlushRxFifo+0x5c>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d901      	bls.n	8008b56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e018      	b.n	8008b88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	daf2      	bge.n	8008b44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2210      	movs	r2, #16
 8008b66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	4a08      	ldr	r2, [pc, #32]	; (8008b94 <USB_FlushRxFifo+0x5c>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d901      	bls.n	8008b7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e006      	b.n	8008b88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	f003 0310 	and.w	r3, r3, #16
 8008b82:	2b10      	cmp	r3, #16
 8008b84:	d0f0      	beq.n	8008b68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	00030d40 	.word	0x00030d40

08008b98 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	68f9      	ldr	r1, [r7, #12]
 8008bb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b087      	sub	sp, #28
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f003 0306 	and.w	r3, r3, #6
 8008be2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d002      	beq.n	8008bf0 <USB_GetDevSpeed+0x26>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2b06      	cmp	r3, #6
 8008bee:	d102      	bne.n	8008bf6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	75fb      	strb	r3, [r7, #23]
 8008bf4:	e001      	b.n	8008bfa <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008bf6:	230f      	movs	r3, #15
 8008bf8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	371c      	adds	r7, #28
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	785b      	ldrb	r3, [r3, #1]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d13a      	bne.n	8008c9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c2a:	69da      	ldr	r2, [r3, #28]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	f003 030f 	and.w	r3, r3, #15
 8008c34:	2101      	movs	r1, #1
 8008c36:	fa01 f303 	lsl.w	r3, r1, r3
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	68f9      	ldr	r1, [r7, #12]
 8008c3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c42:	4313      	orrs	r3, r2
 8008c44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	015a      	lsls	r2, r3, #5
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d155      	bne.n	8008d08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	015a      	lsls	r2, r3, #5
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	791b      	ldrb	r3, [r3, #4]
 8008c76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	059b      	lsls	r3, r3, #22
 8008c7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c80:	4313      	orrs	r3, r2
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	0151      	lsls	r1, r2, #5
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	440a      	add	r2, r1
 8008c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	e036      	b.n	8008d08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca0:	69da      	ldr	r2, [r3, #28]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	f003 030f 	and.w	r3, r3, #15
 8008caa:	2101      	movs	r1, #1
 8008cac:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb0:	041b      	lsls	r3, r3, #16
 8008cb2:	68f9      	ldr	r1, [r7, #12]
 8008cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d11a      	bne.n	8008d08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	791b      	ldrb	r3, [r3, #4]
 8008cec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008cee:	430b      	orrs	r3, r1
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	0151      	lsls	r1, r2, #5
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	440a      	add	r2, r1
 8008cfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
	...

08008d18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	785b      	ldrb	r3, [r3, #1]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d161      	bne.n	8008df8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d4a:	d11f      	bne.n	8008d8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	015a      	lsls	r2, r3, #5
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	0151      	lsls	r1, r2, #5
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	440a      	add	r2, r1
 8008d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	0151      	lsls	r1, r2, #5
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	440a      	add	r2, r1
 8008d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	f003 030f 	and.w	r3, r3, #15
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	43db      	mvns	r3, r3
 8008da6:	68f9      	ldr	r1, [r7, #12]
 8008da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dac:	4013      	ands	r3, r2
 8008dae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db6:	69da      	ldr	r2, [r3, #28]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	f003 030f 	and.w	r3, r3, #15
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	43db      	mvns	r3, r3
 8008dca:	68f9      	ldr	r1, [r7, #12]
 8008dcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	015a      	lsls	r2, r3, #5
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	4413      	add	r3, r2
 8008ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	0159      	lsls	r1, r3, #5
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	440b      	add	r3, r1
 8008dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dee:	4619      	mov	r1, r3
 8008df0:	4b35      	ldr	r3, [pc, #212]	; (8008ec8 <USB_DeactivateEndpoint+0x1b0>)
 8008df2:	4013      	ands	r3, r2
 8008df4:	600b      	str	r3, [r1, #0]
 8008df6:	e060      	b.n	8008eba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e0e:	d11f      	bne.n	8008e50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	015a      	lsls	r2, r3, #5
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4413      	add	r3, r2
 8008e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	0151      	lsls	r1, r2, #5
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	440a      	add	r2, r1
 8008e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	015a      	lsls	r2, r3, #5
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	4413      	add	r3, r2
 8008e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	0151      	lsls	r1, r2, #5
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	440a      	add	r2, r1
 8008e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	f003 030f 	and.w	r3, r3, #15
 8008e60:	2101      	movs	r1, #1
 8008e62:	fa01 f303 	lsl.w	r3, r1, r3
 8008e66:	041b      	lsls	r3, r3, #16
 8008e68:	43db      	mvns	r3, r3
 8008e6a:	68f9      	ldr	r1, [r7, #12]
 8008e6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e70:	4013      	ands	r3, r2
 8008e72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e7a:	69da      	ldr	r2, [r3, #28]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	f003 030f 	and.w	r3, r3, #15
 8008e84:	2101      	movs	r1, #1
 8008e86:	fa01 f303 	lsl.w	r3, r1, r3
 8008e8a:	041b      	lsls	r3, r3, #16
 8008e8c:	43db      	mvns	r3, r3
 8008e8e:	68f9      	ldr	r1, [r7, #12]
 8008e90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e94:	4013      	ands	r3, r2
 8008e96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	015a      	lsls	r2, r3, #5
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	0159      	lsls	r1, r3, #5
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	440b      	add	r3, r1
 8008eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <USB_DeactivateEndpoint+0x1b4>)
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr
 8008ec8:	ec337800 	.word	0xec337800
 8008ecc:	eff37800 	.word	0xeff37800

08008ed0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	785b      	ldrb	r3, [r3, #1]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	f040 810a 	bne.w	8009102 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d132      	bne.n	8008f5c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	0151      	lsls	r1, r2, #5
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	440a      	add	r2, r1
 8008f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	0151      	lsls	r1, r2, #5
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	440a      	add	r2, r1
 8008f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	0151      	lsls	r1, r2, #5
 8008f4c:	697a      	ldr	r2, [r7, #20]
 8008f4e:	440a      	add	r2, r1
 8008f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f54:	0cdb      	lsrs	r3, r3, #19
 8008f56:	04db      	lsls	r3, r3, #19
 8008f58:	6113      	str	r3, [r2, #16]
 8008f5a:	e074      	b.n	8009046 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	0151      	lsls	r1, r2, #5
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	440a      	add	r2, r1
 8008f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f76:	0cdb      	lsrs	r3, r3, #19
 8008f78:	04db      	lsls	r3, r3, #19
 8008f7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	0151      	lsls	r1, r2, #5
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	440a      	add	r2, r1
 8008f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	015a      	lsls	r2, r3, #5
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	6999      	ldr	r1, [r3, #24]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	440b      	add	r3, r1
 8008fb8:	1e59      	subs	r1, r3, #1
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8008fc2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008fc4:	4bb1      	ldr	r3, [pc, #708]	; (800928c <USB_EPStartXfer+0x3bc>)
 8008fc6:	400b      	ands	r3, r1
 8008fc8:	6939      	ldr	r1, [r7, #16]
 8008fca:	0148      	lsls	r0, r1, #5
 8008fcc:	6979      	ldr	r1, [r7, #20]
 8008fce:	4401      	add	r1, r0
 8008fd0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe4:	691a      	ldr	r2, [r3, #16]
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fee:	6939      	ldr	r1, [r7, #16]
 8008ff0:	0148      	lsls	r0, r1, #5
 8008ff2:	6979      	ldr	r1, [r7, #20]
 8008ff4:	4401      	add	r1, r0
 8008ff6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	791b      	ldrb	r3, [r3, #4]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d11f      	bne.n	8009046 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	0151      	lsls	r1, r2, #5
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	440a      	add	r2, r1
 800901c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009020:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009024:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	015a      	lsls	r2, r3, #5
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	4413      	add	r3, r2
 800902e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	0151      	lsls	r1, r2, #5
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	440a      	add	r2, r1
 800903c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009040:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009044:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	015a      	lsls	r2, r3, #5
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	4413      	add	r3, r2
 800904e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	0151      	lsls	r1, r2, #5
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	440a      	add	r2, r1
 800905c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009060:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009064:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	791b      	ldrb	r3, [r3, #4]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d015      	beq.n	800909a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	2b00      	cmp	r3, #0
 8009074:	f000 8104 	beq.w	8009280 <USB_EPStartXfer+0x3b0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800907e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	f003 030f 	and.w	r3, r3, #15
 8009088:	2101      	movs	r1, #1
 800908a:	fa01 f303 	lsl.w	r3, r1, r3
 800908e:	6979      	ldr	r1, [r7, #20]
 8009090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009094:	4313      	orrs	r3, r2
 8009096:	634b      	str	r3, [r1, #52]	; 0x34
 8009098:	e0f2      	b.n	8009280 <USB_EPStartXfer+0x3b0>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d110      	bne.n	80090cc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	015a      	lsls	r2, r3, #5
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	4413      	add	r3, r2
 80090b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	0151      	lsls	r1, r2, #5
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	440a      	add	r2, r1
 80090c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090c8:	6013      	str	r3, [r2, #0]
 80090ca:	e00f      	b.n	80090ec <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	015a      	lsls	r2, r3, #5
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	0151      	lsls	r1, r2, #5
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	440a      	add	r2, r1
 80090e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090ea:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	6919      	ldr	r1, [r3, #16]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	781a      	ldrb	r2, [r3, #0]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fa94 	bl	8009628 <USB_WritePacket>
 8009100:	e0be      	b.n	8009280 <USB_EPStartXfer+0x3b0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	4413      	add	r3, r2
 800910a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	0151      	lsls	r1, r2, #5
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	440a      	add	r2, r1
 8009118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800911c:	0cdb      	lsrs	r3, r3, #19
 800911e:	04db      	lsls	r3, r3, #19
 8009120:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	015a      	lsls	r2, r3, #5
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	4413      	add	r3, r2
 800912a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	0151      	lsls	r1, r2, #5
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	440a      	add	r2, r1
 8009138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800913c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009140:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009144:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d123      	bne.n	8009196 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	4413      	add	r3, r2
 8009156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915a:	691a      	ldr	r2, [r3, #16]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009164:	6939      	ldr	r1, [r7, #16]
 8009166:	0148      	lsls	r0, r1, #5
 8009168:	6979      	ldr	r1, [r7, #20]
 800916a:	4401      	add	r1, r0
 800916c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009170:	4313      	orrs	r3, r2
 8009172:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	0151      	lsls	r1, r2, #5
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	440a      	add	r2, r1
 800918a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800918e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009192:	6113      	str	r3, [r2, #16]
 8009194:	e037      	b.n	8009206 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	699a      	ldr	r2, [r3, #24]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	4413      	add	r3, r2
 80091a0:	1e5a      	subs	r2, r3, #1
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091aa:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	89fa      	ldrh	r2, [r7, #14]
 80091b2:	fb02 f203 	mul.w	r2, r2, r3
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	015a      	lsls	r2, r3, #5
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c6:	691a      	ldr	r2, [r3, #16]
 80091c8:	89fb      	ldrh	r3, [r7, #14]
 80091ca:	04d9      	lsls	r1, r3, #19
 80091cc:	4b2f      	ldr	r3, [pc, #188]	; (800928c <USB_EPStartXfer+0x3bc>)
 80091ce:	400b      	ands	r3, r1
 80091d0:	6939      	ldr	r1, [r7, #16]
 80091d2:	0148      	lsls	r0, r1, #5
 80091d4:	6979      	ldr	r1, [r7, #20]
 80091d6:	4401      	add	r1, r0
 80091d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80091dc:	4313      	orrs	r3, r2
 80091de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ec:	691a      	ldr	r2, [r3, #16]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091f6:	6939      	ldr	r1, [r7, #16]
 80091f8:	0148      	lsls	r0, r1, #5
 80091fa:	6979      	ldr	r1, [r7, #20]
 80091fc:	4401      	add	r1, r0
 80091fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009202:	4313      	orrs	r3, r2
 8009204:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	791b      	ldrb	r3, [r3, #4]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d128      	bne.n	8009260 <USB_EPStartXfer+0x390>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800921a:	2b00      	cmp	r3, #0
 800921c:	d110      	bne.n	8009240 <USB_EPStartXfer+0x370>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	0151      	lsls	r1, r2, #5
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	440a      	add	r2, r1
 8009234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009238:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800923c:	6013      	str	r3, [r2, #0]
 800923e:	e00f      	b.n	8009260 <USB_EPStartXfer+0x390>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	693a      	ldr	r2, [r7, #16]
 8009250:	0151      	lsls	r1, r2, #5
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	440a      	add	r2, r1
 8009256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800925a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800925e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	0151      	lsls	r1, r2, #5
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	440a      	add	r2, r1
 8009276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800927a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800927e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3718      	adds	r7, #24
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	1ff80000 	.word	0x1ff80000

08009290 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	785b      	ldrb	r3, [r3, #1]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	f040 80ab 	bne.w	8009404 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d132      	bne.n	800931c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	68ba      	ldr	r2, [r7, #8]
 80092c6:	0151      	lsls	r1, r2, #5
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	440a      	add	r2, r1
 80092cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	015a      	lsls	r2, r3, #5
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	4413      	add	r3, r2
 80092e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	0151      	lsls	r1, r2, #5
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	440a      	add	r2, r1
 80092f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	015a      	lsls	r2, r3, #5
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	4413      	add	r3, r2
 8009302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	0151      	lsls	r1, r2, #5
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	440a      	add	r2, r1
 8009310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009314:	0cdb      	lsrs	r3, r3, #19
 8009316:	04db      	lsls	r3, r3, #19
 8009318:	6113      	str	r3, [r2, #16]
 800931a:	e04e      	b.n	80093ba <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	015a      	lsls	r2, r3, #5
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4413      	add	r3, r2
 8009324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	0151      	lsls	r1, r2, #5
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	440a      	add	r2, r1
 8009332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009336:	0cdb      	lsrs	r3, r3, #19
 8009338:	04db      	lsls	r3, r3, #19
 800933a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	015a      	lsls	r2, r3, #5
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	4413      	add	r3, r2
 8009344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	0151      	lsls	r1, r2, #5
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	440a      	add	r2, r1
 8009352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009356:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800935a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800935e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	699a      	ldr	r2, [r3, #24]
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	429a      	cmp	r2, r3
 800936a:	d903      	bls.n	8009374 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	68da      	ldr	r2, [r3, #12]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	015a      	lsls	r2, r3, #5
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	4413      	add	r3, r2
 800937c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	0151      	lsls	r1, r2, #5
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	440a      	add	r2, r1
 800938a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800938e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009392:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	015a      	lsls	r2, r3, #5
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	4413      	add	r3, r2
 800939c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a0:	691a      	ldr	r2, [r3, #16]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093aa:	68b9      	ldr	r1, [r7, #8]
 80093ac:	0148      	lsls	r0, r1, #5
 80093ae:	68f9      	ldr	r1, [r7, #12]
 80093b0:	4401      	add	r1, r0
 80093b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093b6:	4313      	orrs	r3, r2
 80093b8:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	015a      	lsls	r2, r3, #5
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	0151      	lsls	r1, r2, #5
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	440a      	add	r2, r1
 80093d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093d8:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d071      	beq.n	80094c6 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	f003 030f 	and.w	r3, r3, #15
 80093f2:	2101      	movs	r1, #1
 80093f4:	fa01 f303 	lsl.w	r3, r1, r3
 80093f8:	68f9      	ldr	r1, [r7, #12]
 80093fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093fe:	4313      	orrs	r3, r2
 8009400:	634b      	str	r3, [r1, #52]	; 0x34
 8009402:	e060      	b.n	80094c6 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	015a      	lsls	r2, r3, #5
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	4413      	add	r3, r2
 800940c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	0151      	lsls	r1, r2, #5
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	440a      	add	r2, r1
 800941a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800941e:	0cdb      	lsrs	r3, r3, #19
 8009420:	04db      	lsls	r3, r3, #19
 8009422:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	0151      	lsls	r1, r2, #5
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	440a      	add	r2, r1
 800943a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800943e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009442:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009446:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d003      	beq.n	8009458 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	68da      	ldr	r2, [r3, #12]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	68da      	ldr	r2, [r3, #12]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	0151      	lsls	r1, r2, #5
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	440a      	add	r2, r1
 8009476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800947a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800947e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	015a      	lsls	r2, r3, #5
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4413      	add	r3, r2
 8009488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948c:	691a      	ldr	r2, [r3, #16]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009496:	68b9      	ldr	r1, [r7, #8]
 8009498:	0148      	lsls	r0, r1, #5
 800949a:	68f9      	ldr	r1, [r7, #12]
 800949c:	4401      	add	r1, r0
 800949e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094a2:	4313      	orrs	r3, r2
 80094a4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	0151      	lsls	r1, r2, #5
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	440a      	add	r2, r1
 80094bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b087      	sub	sp, #28
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094de:	2300      	movs	r3, #0
 80094e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	785b      	ldrb	r3, [r3, #1]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d14a      	bne.n	8009588 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	015a      	lsls	r2, r3, #5
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	4413      	add	r3, r2
 80094fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800950a:	f040 8086 	bne.w	800961a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	015a      	lsls	r2, r3, #5
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	4413      	add	r3, r2
 8009518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	7812      	ldrb	r2, [r2, #0]
 8009522:	0151      	lsls	r1, r2, #5
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	440a      	add	r2, r1
 8009528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800952c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009530:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	4413      	add	r3, r2
 800953c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	7812      	ldrb	r2, [r2, #0]
 8009546:	0151      	lsls	r1, r2, #5
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	440a      	add	r2, r1
 800954c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009550:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009554:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	3301      	adds	r3, #1
 800955a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009562:	4293      	cmp	r3, r2
 8009564:	d902      	bls.n	800956c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	75fb      	strb	r3, [r7, #23]
          break;
 800956a:	e056      	b.n	800961a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	015a      	lsls	r2, r3, #5
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	4413      	add	r3, r2
 8009576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009584:	d0e7      	beq.n	8009556 <USB_EPStopXfer+0x82>
 8009586:	e048      	b.n	800961a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	015a      	lsls	r2, r3, #5
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	4413      	add	r3, r2
 8009592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800959c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095a0:	d13b      	bne.n	800961a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	015a      	lsls	r2, r3, #5
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	683a      	ldr	r2, [r7, #0]
 80095b4:	7812      	ldrb	r2, [r2, #0]
 80095b6:	0151      	lsls	r1, r2, #5
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	440a      	add	r2, r1
 80095bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80095c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	7812      	ldrb	r2, [r2, #0]
 80095da:	0151      	lsls	r1, r2, #5
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	440a      	add	r2, r1
 80095e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	3301      	adds	r3, #1
 80095ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d902      	bls.n	8009600 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	75fb      	strb	r3, [r7, #23]
          break;
 80095fe:	e00c      	b.n	800961a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	015a      	lsls	r2, r3, #5
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	4413      	add	r3, r2
 800960a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009618:	d0e7      	beq.n	80095ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800961a:	7dfb      	ldrb	r3, [r7, #23]
}
 800961c:	4618      	mov	r0, r3
 800961e:	371c      	adds	r7, #28
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8009628:	b480      	push	{r7}
 800962a:	b089      	sub	sp, #36	; 0x24
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	4611      	mov	r1, r2
 8009634:	461a      	mov	r2, r3
 8009636:	460b      	mov	r3, r1
 8009638:	71fb      	strb	r3, [r7, #7]
 800963a:	4613      	mov	r3, r2
 800963c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009646:	88bb      	ldrh	r3, [r7, #4]
 8009648:	3303      	adds	r3, #3
 800964a:	089b      	lsrs	r3, r3, #2
 800964c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800964e:	2300      	movs	r3, #0
 8009650:	61bb      	str	r3, [r7, #24]
 8009652:	e018      	b.n	8009686 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009654:	79fb      	ldrb	r3, [r7, #7]
 8009656:	031a      	lsls	r2, r3, #12
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	4413      	add	r3, r2
 800965c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009660:	461a      	mov	r2, r3
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	3301      	adds	r3, #1
 800966c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	3301      	adds	r3, #1
 8009672:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	3301      	adds	r3, #1
 8009678:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	3301      	adds	r3, #1
 800967e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	3301      	adds	r3, #1
 8009684:	61bb      	str	r3, [r7, #24]
 8009686:	69ba      	ldr	r2, [r7, #24]
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	429a      	cmp	r2, r3
 800968c:	d3e2      	bcc.n	8009654 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3724      	adds	r7, #36	; 0x24
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800969c:	b480      	push	{r7}
 800969e:	b08b      	sub	sp, #44	; 0x2c
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	4613      	mov	r3, r2
 80096a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80096b2:	88fb      	ldrh	r3, [r7, #6]
 80096b4:	089b      	lsrs	r3, r3, #2
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80096ba:	88fb      	ldrh	r3, [r7, #6]
 80096bc:	f003 0303 	and.w	r3, r3, #3
 80096c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80096c2:	2300      	movs	r3, #0
 80096c4:	623b      	str	r3, [r7, #32]
 80096c6:	e014      	b.n	80096f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80096d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d6:	3301      	adds	r3, #1
 80096d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	3301      	adds	r3, #1
 80096de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	3301      	adds	r3, #1
 80096e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	3301      	adds	r3, #1
 80096ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80096ec:	6a3b      	ldr	r3, [r7, #32]
 80096ee:	3301      	adds	r3, #1
 80096f0:	623b      	str	r3, [r7, #32]
 80096f2:	6a3a      	ldr	r2, [r7, #32]
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d3e6      	bcc.n	80096c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80096fa:	8bfb      	ldrh	r3, [r7, #30]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d01e      	beq.n	800973e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009700:	2300      	movs	r3, #0
 8009702:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800970a:	461a      	mov	r2, r3
 800970c:	f107 0310 	add.w	r3, r7, #16
 8009710:	6812      	ldr	r2, [r2, #0]
 8009712:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	b2db      	uxtb	r3, r3
 800971a:	00db      	lsls	r3, r3, #3
 800971c:	fa22 f303 	lsr.w	r3, r2, r3
 8009720:	b2da      	uxtb	r2, r3
 8009722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009724:	701a      	strb	r2, [r3, #0]
      i++;
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	3301      	adds	r3, #1
 800972a:	623b      	str	r3, [r7, #32]
      pDest++;
 800972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972e:	3301      	adds	r3, #1
 8009730:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009732:	8bfb      	ldrh	r3, [r7, #30]
 8009734:	3b01      	subs	r3, #1
 8009736:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009738:	8bfb      	ldrh	r3, [r7, #30]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1ea      	bne.n	8009714 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009740:	4618      	mov	r0, r3
 8009742:	372c      	adds	r7, #44	; 0x2c
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	785b      	ldrb	r3, [r3, #1]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d12c      	bne.n	80097c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	db12      	blt.n	80097a0 <USB_EPSetStall+0x54>
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00f      	beq.n	80097a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4413      	add	r3, r2
 8009788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	0151      	lsls	r1, r2, #5
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	440a      	add	r2, r1
 8009796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800979a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800979e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	015a      	lsls	r2, r3, #5
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	4413      	add	r3, r2
 80097a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	0151      	lsls	r1, r2, #5
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	440a      	add	r2, r1
 80097b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	e02b      	b.n	800981a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	db12      	blt.n	80097fa <USB_EPSetStall+0xae>
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00f      	beq.n	80097fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	015a      	lsls	r2, r3, #5
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	4413      	add	r3, r2
 80097e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	0151      	lsls	r1, r2, #5
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	440a      	add	r2, r1
 80097f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80097f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	4413      	add	r3, r2
 8009802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	0151      	lsls	r1, r2, #5
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	440a      	add	r2, r1
 8009810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009814:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009818:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	785b      	ldrb	r3, [r3, #1]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d128      	bne.n	8009896 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	015a      	lsls	r2, r3, #5
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4413      	add	r3, r2
 800984c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	0151      	lsls	r1, r2, #5
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	440a      	add	r2, r1
 800985a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800985e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009862:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	791b      	ldrb	r3, [r3, #4]
 8009868:	2b03      	cmp	r3, #3
 800986a:	d003      	beq.n	8009874 <USB_EPClearStall+0x4c>
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	791b      	ldrb	r3, [r3, #4]
 8009870:	2b02      	cmp	r3, #2
 8009872:	d138      	bne.n	80098e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	4413      	add	r3, r2
 800987c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	0151      	lsls	r1, r2, #5
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	440a      	add	r2, r1
 800988a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800988e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009892:	6013      	str	r3, [r2, #0]
 8009894:	e027      	b.n	80098e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	4413      	add	r3, r2
 800989e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	0151      	lsls	r1, r2, #5
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	440a      	add	r2, r1
 80098ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	791b      	ldrb	r3, [r3, #4]
 80098ba:	2b03      	cmp	r3, #3
 80098bc:	d003      	beq.n	80098c6 <USB_EPClearStall+0x9e>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	791b      	ldrb	r3, [r3, #4]
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d10f      	bne.n	80098e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	015a      	lsls	r2, r3, #5
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	4413      	add	r3, r2
 80098ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	0151      	lsls	r1, r2, #5
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	440a      	add	r2, r1
 80098dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	460b      	mov	r3, r1
 80098fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009912:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009916:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	011b      	lsls	r3, r3, #4
 8009924:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009928:	68f9      	ldr	r1, [r7, #12]
 800992a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800992e:	4313      	orrs	r3, r2
 8009930:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800995a:	f023 0303 	bic.w	r3, r3, #3
 800995e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800996e:	f023 0302 	bic.w	r3, r3, #2
 8009972:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3714      	adds	r7, #20
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009982:	b480      	push	{r7}
 8009984:	b085      	sub	sp, #20
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800999c:	f023 0303 	bic.w	r3, r3, #3
 80099a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099b0:	f043 0302 	orr.w	r3, r3, #2
 80099b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	695b      	ldr	r3, [r3, #20]
 80099d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	4013      	ands	r3, r2
 80099da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80099dc:	68fb      	ldr	r3, [r7, #12]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b085      	sub	sp, #20
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a06:	69db      	ldr	r3, [r3, #28]
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	0c1b      	lsrs	r3, r3, #16
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr

08009a1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b085      	sub	sp, #20
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a3a:	69db      	ldr	r3, [r3, #28]
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	4013      	ands	r3, r2
 8009a40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	b29b      	uxth	r3, r3
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b085      	sub	sp, #20
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009a62:	78fb      	ldrb	r3, [r7, #3]
 8009a64:	015a      	lsls	r2, r3, #5
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	68ba      	ldr	r2, [r7, #8]
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a80:	68bb      	ldr	r3, [r7, #8]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a8e:	b480      	push	{r7}
 8009a90:	b087      	sub	sp, #28
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
 8009a96:	460b      	mov	r3, r1
 8009a98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009ab2:	78fb      	ldrb	r3, [r7, #3]
 8009ab4:	f003 030f 	and.w	r3, r3, #15
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	fa22 f303 	lsr.w	r3, r2, r3
 8009abe:	01db      	lsls	r3, r3, #7
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009ac8:	78fb      	ldrb	r3, [r7, #3]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	4013      	ands	r3, r2
 8009ada:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009adc:	68bb      	ldr	r3, [r7, #8]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	371c      	adds	r7, #28
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009aea:	b480      	push	{r7}
 8009aec:	b083      	sub	sp, #12
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	f003 0301 	and.w	r3, r3, #1
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	370c      	adds	r7, #12
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr

08009b06 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009b06:	b480      	push	{r7}
 8009b08:	b085      	sub	sp, #20
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009b24:	f023 0307 	bic.w	r3, r3, #7
 8009b28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	333c      	adds	r3, #60	; 0x3c
 8009b5e:	3304      	adds	r3, #4
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	4a1c      	ldr	r2, [pc, #112]	; (8009bd8 <USB_EP0_OutStart+0x8c>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d90a      	bls.n	8009b82 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b7c:	d101      	bne.n	8009b82 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	e024      	b.n	8009bcc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b88:	461a      	mov	r2, r3
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ba0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bb0:	f043 0318 	orr.w	r3, r3, #24
 8009bb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bc4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009bc8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	4f54300a 	.word	0x4f54300a

08009bdc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	3301      	adds	r3, #1
 8009bec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	4a13      	ldr	r2, [pc, #76]	; (8009c40 <USB_CoreReset+0x64>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d901      	bls.n	8009bfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	e01b      	b.n	8009c32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	daf2      	bge.n	8009be8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c02:	2300      	movs	r3, #0
 8009c04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	f043 0201 	orr.w	r2, r3, #1
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	4a09      	ldr	r2, [pc, #36]	; (8009c40 <USB_CoreReset+0x64>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d901      	bls.n	8009c24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e006      	b.n	8009c32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	f003 0301 	and.w	r3, r3, #1
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d0f0      	beq.n	8009c12 <USB_CoreReset+0x36>

  return HAL_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3714      	adds	r7, #20
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	00030d40 	.word	0x00030d40

08009c44 <lsm6dsox_read_reg>:
  *
  */
int32_t __weak lsm6dsox_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8009c44:	b590      	push	{r4, r7, lr}
 8009c46:	b087      	sub	sp, #28
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	607a      	str	r2, [r7, #4]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	460b      	mov	r3, r1
 8009c52:	72fb      	strb	r3, [r7, #11]
 8009c54:	4613      	mov	r3, r2
 8009c56:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	685c      	ldr	r4, [r3, #4]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	68d8      	ldr	r0, [r3, #12]
 8009c60:	893b      	ldrh	r3, [r7, #8]
 8009c62:	7af9      	ldrb	r1, [r7, #11]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	47a0      	blx	r4
 8009c68:	6178      	str	r0, [r7, #20]

  return ret;
 8009c6a:	697b      	ldr	r3, [r7, #20]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	371c      	adds	r7, #28
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd90      	pop	{r4, r7, pc}

08009c74 <lsm6dsox_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WHO_AM_I, buff, 1);
 8009c7e:	2301      	movs	r3, #1
 8009c80:	683a      	ldr	r2, [r7, #0]
 8009c82:	210f      	movs	r1, #15
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff ffdd 	bl	8009c44 <lsm6dsox_read_reg>
 8009c8a:	60f8      	str	r0, [r7, #12]

  return ret;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009ca2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009ca6:	f002 fb51 	bl	800c34c <USBD_static_malloc>
 8009caa:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d105      	bne.n	8009cbe <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009cba:	2302      	movs	r3, #2
 8009cbc:	e066      	b.n	8009d8c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	7c1b      	ldrb	r3, [r3, #16]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d119      	bne.n	8009d02 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cd2:	2202      	movs	r2, #2
 8009cd4:	2181      	movs	r1, #129	; 0x81
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f002 f924 	bl	800bf24 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	2101      	movs	r1, #1
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f002 f91a 	bl	800bf24 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2210      	movs	r2, #16
 8009cfc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009d00:	e016      	b.n	8009d30 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d02:	2340      	movs	r3, #64	; 0x40
 8009d04:	2202      	movs	r2, #2
 8009d06:	2181      	movs	r1, #129	; 0x81
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f002 f90b 	bl	800bf24 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2201      	movs	r2, #1
 8009d12:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d14:	2340      	movs	r3, #64	; 0x40
 8009d16:	2202      	movs	r2, #2
 8009d18:	2101      	movs	r1, #1
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f002 f902 	bl	800bf24 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2210      	movs	r2, #16
 8009d2c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d30:	2308      	movs	r3, #8
 8009d32:	2203      	movs	r2, #3
 8009d34:	2182      	movs	r1, #130	; 0x82
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f002 f8f4 	bl	800bf24 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	7c1b      	ldrb	r3, [r3, #16]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d109      	bne.n	8009d7a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d70:	2101      	movs	r1, #1
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f002 fa50 	bl	800c218 <USBD_LL_PrepareReceive>
 8009d78:	e007      	b.n	8009d8a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d80:	2340      	movs	r3, #64	; 0x40
 8009d82:	2101      	movs	r1, #1
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f002 fa47 	bl	800c218 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009da0:	2181      	movs	r1, #129	; 0x81
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f002 f8fc 	bl	800bfa0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009dae:	2101      	movs	r1, #1
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f002 f8f5 	bl	800bfa0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009dbe:	2182      	movs	r1, #130	; 0x82
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f002 f8ed 	bl	800bfa0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00e      	beq.n	8009dfe <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009df0:	4618      	mov	r0, r3
 8009df2:	f002 fab9 	bl	800c368 <USBD_static_free>
    pdev->pClassData = NULL;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	e0af      	b.n	8009f90 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d03f      	beq.n	8009ebc <USBD_CDC_Setup+0xb4>
 8009e3c:	2b20      	cmp	r3, #32
 8009e3e:	f040 809f 	bne.w	8009f80 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	88db      	ldrh	r3, [r3, #6]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d02e      	beq.n	8009ea8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	b25b      	sxtb	r3, r3
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	da16      	bge.n	8009e82 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009e60:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	88d2      	ldrh	r2, [r2, #6]
 8009e66:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	88db      	ldrh	r3, [r3, #6]
 8009e6c:	2b07      	cmp	r3, #7
 8009e6e:	bf28      	it	cs
 8009e70:	2307      	movcs	r3, #7
 8009e72:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	89fa      	ldrh	r2, [r7, #14]
 8009e78:	4619      	mov	r1, r3
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f001 fb43 	bl	800b506 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009e80:	e085      	b.n	8009f8e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	785a      	ldrb	r2, [r3, #1]
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	88db      	ldrh	r3, [r3, #6]
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009e98:	6939      	ldr	r1, [r7, #16]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	88db      	ldrh	r3, [r3, #6]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f001 fb5c 	bl	800b55e <USBD_CtlPrepareRx>
      break;
 8009ea6:	e072      	b.n	8009f8e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	683a      	ldr	r2, [r7, #0]
 8009eb2:	7850      	ldrb	r0, [r2, #1]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	4798      	blx	r3
      break;
 8009eba:	e068      	b.n	8009f8e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	785b      	ldrb	r3, [r3, #1]
 8009ec0:	2b0b      	cmp	r3, #11
 8009ec2:	d852      	bhi.n	8009f6a <USBD_CDC_Setup+0x162>
 8009ec4:	a201      	add	r2, pc, #4	; (adr r2, 8009ecc <USBD_CDC_Setup+0xc4>)
 8009ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eca:	bf00      	nop
 8009ecc:	08009efd 	.word	0x08009efd
 8009ed0:	08009f79 	.word	0x08009f79
 8009ed4:	08009f6b 	.word	0x08009f6b
 8009ed8:	08009f6b 	.word	0x08009f6b
 8009edc:	08009f6b 	.word	0x08009f6b
 8009ee0:	08009f6b 	.word	0x08009f6b
 8009ee4:	08009f6b 	.word	0x08009f6b
 8009ee8:	08009f6b 	.word	0x08009f6b
 8009eec:	08009f6b 	.word	0x08009f6b
 8009ef0:	08009f6b 	.word	0x08009f6b
 8009ef4:	08009f27 	.word	0x08009f27
 8009ef8:	08009f51 	.word	0x08009f51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b03      	cmp	r3, #3
 8009f06:	d107      	bne.n	8009f18 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f08:	f107 030a 	add.w	r3, r7, #10
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f001 faf8 	bl	800b506 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f16:	e032      	b.n	8009f7e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f001 fa82 	bl	800b424 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f20:	2303      	movs	r3, #3
 8009f22:	75fb      	strb	r3, [r7, #23]
          break;
 8009f24:	e02b      	b.n	8009f7e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b03      	cmp	r3, #3
 8009f30:	d107      	bne.n	8009f42 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f32:	f107 030d 	add.w	r3, r7, #13
 8009f36:	2201      	movs	r2, #1
 8009f38:	4619      	mov	r1, r3
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f001 fae3 	bl	800b506 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f40:	e01d      	b.n	8009f7e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f001 fa6d 	bl	800b424 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8009f4e:	e016      	b.n	8009f7e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	2b03      	cmp	r3, #3
 8009f5a:	d00f      	beq.n	8009f7c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f001 fa60 	bl	800b424 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f64:	2303      	movs	r3, #3
 8009f66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f68:	e008      	b.n	8009f7c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f001 fa59 	bl	800b424 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f72:	2303      	movs	r3, #3
 8009f74:	75fb      	strb	r3, [r7, #23]
          break;
 8009f76:	e002      	b.n	8009f7e <USBD_CDC_Setup+0x176>
          break;
 8009f78:	bf00      	nop
 8009f7a:	e008      	b.n	8009f8e <USBD_CDC_Setup+0x186>
          break;
 8009f7c:	bf00      	nop
      }
      break;
 8009f7e:	e006      	b.n	8009f8e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f001 fa4e 	bl	800b424 <USBD_CtlError>
      ret = USBD_FAIL;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f8c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3718      	adds	r7, #24
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009faa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d101      	bne.n	8009fba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	e04f      	b.n	800a05a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009fc2:	78fa      	ldrb	r2, [r7, #3]
 8009fc4:	6879      	ldr	r1, [r7, #4]
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	440b      	add	r3, r1
 8009fd0:	3318      	adds	r3, #24
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d029      	beq.n	800a02c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009fd8:	78fa      	ldrb	r2, [r7, #3]
 8009fda:	6879      	ldr	r1, [r7, #4]
 8009fdc:	4613      	mov	r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	4413      	add	r3, r2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	440b      	add	r3, r1
 8009fe6:	3318      	adds	r3, #24
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	78f9      	ldrb	r1, [r7, #3]
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	460b      	mov	r3, r1
 8009ff0:	00db      	lsls	r3, r3, #3
 8009ff2:	440b      	add	r3, r1
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4403      	add	r3, r0
 8009ff8:	3348      	adds	r3, #72	; 0x48
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	fbb2 f1f3 	udiv	r1, r2, r3
 800a000:	fb03 f301 	mul.w	r3, r3, r1
 800a004:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a006:	2b00      	cmp	r3, #0
 800a008:	d110      	bne.n	800a02c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a00a:	78fa      	ldrb	r2, [r7, #3]
 800a00c:	6879      	ldr	r1, [r7, #4]
 800a00e:	4613      	mov	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	440b      	add	r3, r1
 800a018:	3318      	adds	r3, #24
 800a01a:	2200      	movs	r2, #0
 800a01c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a01e:	78f9      	ldrb	r1, [r7, #3]
 800a020:	2300      	movs	r3, #0
 800a022:	2200      	movs	r2, #0
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f002 f8bf 	bl	800c1a8 <USBD_LL_Transmit>
 800a02a:	e015      	b.n	800a058 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	2200      	movs	r2, #0
 800a030:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a03a:	691b      	ldr	r3, [r3, #16]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00b      	beq.n	800a058 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a054:	78fa      	ldrb	r2, [r7, #3]
 800a056:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b084      	sub	sp, #16
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	460b      	mov	r3, r1
 800a06c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a074:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a080:	2303      	movs	r3, #3
 800a082:	e015      	b.n	800a0b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a084:	78fb      	ldrb	r3, [r7, #3]
 800a086:	4619      	mov	r1, r3
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f002 f8fd 	bl	800c288 <USBD_LL_GetRxDataSize>
 800a08e:	4602      	mov	r2, r0
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a0aa:	4611      	mov	r1, r2
 800a0ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d101      	bne.n	800a0d2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e01b      	b.n	800a10a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d015      	beq.n	800a108 <USBD_CDC_EP0_RxReady+0x50>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a0e2:	2bff      	cmp	r3, #255	; 0xff
 800a0e4:	d010      	beq.n	800a108 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a0f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a0fc:	b292      	uxth	r2, r2
 800a0fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	22ff      	movs	r2, #255	; 0xff
 800a104:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2243      	movs	r2, #67	; 0x43
 800a120:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a122:	4b03      	ldr	r3, [pc, #12]	; (800a130 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a124:	4618      	mov	r0, r3
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	20000094 	.word	0x20000094

0800a134 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2243      	movs	r2, #67	; 0x43
 800a140:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a142:	4b03      	ldr	r3, [pc, #12]	; (800a150 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a144:	4618      	mov	r0, r3
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr
 800a150:	20000050 	.word	0x20000050

0800a154 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2243      	movs	r2, #67	; 0x43
 800a160:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a162:	4b03      	ldr	r3, [pc, #12]	; (800a170 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a164:	4618      	mov	r0, r3
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr
 800a170:	200000d8 	.word	0x200000d8

0800a174 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	220a      	movs	r2, #10
 800a180:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a182:	4b03      	ldr	r3, [pc, #12]	; (800a190 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a184:	4618      	mov	r0, r3
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	2000000c 	.word	0x2000000c

0800a194 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e004      	b.n	800a1b2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	370c      	adds	r7, #12
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr

0800a1be <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	b087      	sub	sp, #28
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	60f8      	str	r0, [r7, #12]
 800a1c6:	60b9      	str	r1, [r7, #8]
 800a1c8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1d0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d101      	bne.n	800a1dc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e008      	b.n	800a1ee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	371c      	adds	r7, #28
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr

0800a1fa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	b085      	sub	sp, #20
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
 800a202:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a20a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d101      	bne.n	800a216 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a212:	2303      	movs	r3, #3
 800a214:	e004      	b.n	800a220 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	683a      	ldr	r2, [r7, #0]
 800a21a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a23a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a23c:	2301      	movs	r3, #1
 800a23e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a246:	2b00      	cmp	r3, #0
 800a248:	d101      	bne.n	800a24e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a24a:	2303      	movs	r3, #3
 800a24c:	e01a      	b.n	800a284 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a254:	2b00      	cmp	r3, #0
 800a256:	d114      	bne.n	800a282 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a276:	2181      	movs	r1, #129	; 0x81
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f001 ff95 	bl	800c1a8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a282:	7bfb      	ldrb	r3, [r7, #15]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a29a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e016      	b.n	800a2d8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	7c1b      	ldrb	r3, [r3, #16]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d109      	bne.n	800a2c6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2bc:	2101      	movs	r1, #1
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f001 ffaa 	bl	800c218 <USBD_LL_PrepareReceive>
 800a2c4:	e007      	b.n	800a2d6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2cc:	2340      	movs	r3, #64	; 0x40
 800a2ce:	2101      	movs	r1, #1
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f001 ffa1 	bl	800c218 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d101      	bne.n	800a2f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	e01f      	b.n	800a338 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d003      	beq.n	800a31e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	68ba      	ldr	r2, [r7, #8]
 800a31a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	79fa      	ldrb	r2, [r7, #7]
 800a32a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f001 fd7d 	bl	800be2c <USBD_LL_Init>
 800a332:	4603      	mov	r3, r0
 800a334:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a336:	7dfb      	ldrb	r3, [r7, #23]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3718      	adds	r7, #24
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a34a:	2300      	movs	r3, #0
 800a34c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a354:	2303      	movs	r3, #3
 800a356:	e016      	b.n	800a386 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	683a      	ldr	r2, [r7, #0]
 800a35c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00b      	beq.n	800a384 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a374:	f107 020e 	add.w	r2, r7, #14
 800a378:	4610      	mov	r0, r2
 800a37a:	4798      	blx	r3
 800a37c:	4602      	mov	r2, r0
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b082      	sub	sp, #8
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f001 fd92 	bl	800bec0 <USBD_LL_Start>
 800a39c:	4603      	mov	r3, r0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d009      	beq.n	800a3ea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	78fa      	ldrb	r2, [r7, #3]
 800a3e0:	4611      	mov	r1, r2
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	4798      	blx	r3
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a406:	2b00      	cmp	r3, #0
 800a408:	d007      	beq.n	800a41a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	78fa      	ldrb	r2, [r7, #3]
 800a414:	4611      	mov	r1, r2
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	4798      	blx	r3
  }

  return USBD_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a434:	6839      	ldr	r1, [r7, #0]
 800a436:	4618      	mov	r0, r3
 800a438:	f000 ffba 	bl	800b3b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a44a:	461a      	mov	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a458:	f003 031f 	and.w	r3, r3, #31
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d01a      	beq.n	800a496 <USBD_LL_SetupStage+0x72>
 800a460:	2b02      	cmp	r3, #2
 800a462:	d822      	bhi.n	800a4aa <USBD_LL_SetupStage+0x86>
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <USBD_LL_SetupStage+0x4a>
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d00a      	beq.n	800a482 <USBD_LL_SetupStage+0x5e>
 800a46c:	e01d      	b.n	800a4aa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a474:	4619      	mov	r1, r3
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fa62 	bl	800a940 <USBD_StdDevReq>
 800a47c:	4603      	mov	r3, r0
 800a47e:	73fb      	strb	r3, [r7, #15]
      break;
 800a480:	e020      	b.n	800a4c4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a488:	4619      	mov	r1, r3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fac6 	bl	800aa1c <USBD_StdItfReq>
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]
      break;
 800a494:	e016      	b.n	800a4c4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 fb05 	bl	800aaae <USBD_StdEPReq>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4a8:	e00c      	b.n	800a4c4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a4b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f001 fda7 	bl	800c00c <USBD_LL_StallEP>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	73fb      	strb	r3, [r7, #15]
      break;
 800a4c2:	bf00      	nop
  }

  return ret;
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b086      	sub	sp, #24
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	60f8      	str	r0, [r7, #12]
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	607a      	str	r2, [r7, #4]
 800a4da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a4dc:	7afb      	ldrb	r3, [r7, #11]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d138      	bne.n	800a554 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a4e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4f0:	2b03      	cmp	r3, #3
 800a4f2:	d14a      	bne.n	800a58a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	689a      	ldr	r2, [r3, #8]
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d913      	bls.n	800a528 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	689a      	ldr	r2, [r3, #8]
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	1ad2      	subs	r2, r2, r3
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	68da      	ldr	r2, [r3, #12]
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	4293      	cmp	r3, r2
 800a518:	bf28      	it	cs
 800a51a:	4613      	movcs	r3, r2
 800a51c:	461a      	mov	r2, r3
 800a51e:	6879      	ldr	r1, [r7, #4]
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f001 f839 	bl	800b598 <USBD_CtlContinueRx>
 800a526:	e030      	b.n	800a58a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2b03      	cmp	r3, #3
 800a532:	d10b      	bne.n	800a54c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d005      	beq.n	800a54c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f001 f834 	bl	800b5ba <USBD_CtlSendStatus>
 800a552:	e01a      	b.n	800a58a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	2b03      	cmp	r3, #3
 800a55e:	d114      	bne.n	800a58a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00e      	beq.n	800a58a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	7afa      	ldrb	r2, [r7, #11]
 800a576:	4611      	mov	r1, r2
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	4798      	blx	r3
 800a57c:	4603      	mov	r3, r0
 800a57e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a580:	7dfb      	ldrb	r3, [r7, #23]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d001      	beq.n	800a58a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a586:	7dfb      	ldrb	r3, [r7, #23]
 800a588:	e000      	b.n	800a58c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3718      	adds	r7, #24
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	460b      	mov	r3, r1
 800a59e:	607a      	str	r2, [r7, #4]
 800a5a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a5a2:	7afb      	ldrb	r3, [r7, #11]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d16b      	bne.n	800a680 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	3314      	adds	r3, #20
 800a5ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	d156      	bne.n	800a666 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	689a      	ldr	r2, [r3, #8]
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d914      	bls.n	800a5ee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	689a      	ldr	r2, [r3, #8]
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	1ad2      	subs	r2, r2, r3
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	6879      	ldr	r1, [r7, #4]
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f000 ffae 	bl	800b53c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2100      	movs	r1, #0
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f001 fe16 	bl	800c218 <USBD_LL_PrepareReceive>
 800a5ec:	e03b      	b.n	800a666 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	68da      	ldr	r2, [r3, #12]
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d11c      	bne.n	800a634 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	685a      	ldr	r2, [r3, #4]
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a602:	429a      	cmp	r2, r3
 800a604:	d316      	bcc.n	800a634 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	685a      	ldr	r2, [r3, #4]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a610:	429a      	cmp	r2, r3
 800a612:	d20f      	bcs.n	800a634 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a614:	2200      	movs	r2, #0
 800a616:	2100      	movs	r1, #0
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f000 ff8f 	bl	800b53c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a626:	2300      	movs	r3, #0
 800a628:	2200      	movs	r2, #0
 800a62a:	2100      	movs	r1, #0
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f001 fdf3 	bl	800c218 <USBD_LL_PrepareReceive>
 800a632:	e018      	b.n	800a666 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b03      	cmp	r3, #3
 800a63e:	d10b      	bne.n	800a658 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d005      	beq.n	800a658 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a658:	2180      	movs	r1, #128	; 0x80
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f001 fcd6 	bl	800c00c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f000 ffbd 	bl	800b5e0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d122      	bne.n	800a6b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f7ff fe98 	bl	800a3a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a67e:	e01a      	b.n	800a6b6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a686:	b2db      	uxtb	r3, r3
 800a688:	2b03      	cmp	r3, #3
 800a68a:	d114      	bne.n	800a6b6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a692:	695b      	ldr	r3, [r3, #20]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00e      	beq.n	800a6b6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a69e:	695b      	ldr	r3, [r3, #20]
 800a6a0:	7afa      	ldrb	r2, [r7, #11]
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	4798      	blx	r3
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a6ac:	7dfb      	ldrb	r3, [r7, #23]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a6b2:	7dfb      	ldrb	r3, [r7, #23]
 800a6b4:	e000      	b.n	800a6b8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3718      	adds	r7, #24
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e02f      	b.n	800a754 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00f      	beq.n	800a71e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d009      	beq.n	800a71e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	6852      	ldr	r2, [r2, #4]
 800a716:	b2d2      	uxtb	r2, r2
 800a718:	4611      	mov	r1, r2
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a71e:	2340      	movs	r3, #64	; 0x40
 800a720:	2200      	movs	r2, #0
 800a722:	2100      	movs	r1, #0
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f001 fbfd 	bl	800bf24 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2240      	movs	r2, #64	; 0x40
 800a736:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a73a:	2340      	movs	r3, #64	; 0x40
 800a73c:	2200      	movs	r2, #0
 800a73e:	2180      	movs	r1, #128	; 0x80
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f001 fbef 	bl	800bf24 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2240      	movs	r2, #64	; 0x40
 800a750:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	460b      	mov	r3, r1
 800a766:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	78fa      	ldrb	r2, [r7, #3]
 800a76c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2204      	movs	r2, #4
 800a796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	2b04      	cmp	r3, #4
 800a7ba:	d106      	bne.n	800a7ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a7c2:	b2da      	uxtb	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d101      	bne.n	800a7ee <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	e012      	b.n	800a814 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b03      	cmp	r3, #3
 800a7f8:	d10b      	bne.n	800a812 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a800:	69db      	ldr	r3, [r3, #28]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d005      	beq.n	800a812 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	460b      	mov	r3, r1
 800a826:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d101      	bne.n	800a836 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a832:	2303      	movs	r3, #3
 800a834:	e014      	b.n	800a860 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	2b03      	cmp	r3, #3
 800a840:	d10d      	bne.n	800a85e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d007      	beq.n	800a85e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a854:	6a1b      	ldr	r3, [r3, #32]
 800a856:	78fa      	ldrb	r2, [r7, #3]
 800a858:	4611      	mov	r1, r2
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	460b      	mov	r3, r1
 800a872:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a87e:	2303      	movs	r3, #3
 800a880:	e014      	b.n	800a8ac <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b03      	cmp	r3, #3
 800a88c:	d10d      	bne.n	800a8aa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	2b00      	cmp	r3, #0
 800a898:	d007      	beq.n	800a8aa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a2:	78fa      	ldrb	r2, [r7, #3]
 800a8a4:	4611      	mov	r1, r2
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3708      	adds	r7, #8
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	370c      	adds	r7, #12
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b082      	sub	sp, #8
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d009      	beq.n	800a8f8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	6852      	ldr	r2, [r2, #4]
 800a8f0:	b2d2      	uxtb	r2, r2
 800a8f2:	4611      	mov	r1, r2
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	4798      	blx	r3
  }

  return USBD_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a902:	b480      	push	{r7}
 800a904:	b087      	sub	sp, #28
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	3301      	adds	r3, #1
 800a918:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a920:	8a3b      	ldrh	r3, [r7, #16]
 800a922:	021b      	lsls	r3, r3, #8
 800a924:	b21a      	sxth	r2, r3
 800a926:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	b21b      	sxth	r3, r3
 800a92e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a930:	89fb      	ldrh	r3, [r7, #14]
}
 800a932:	4618      	mov	r0, r3
 800a934:	371c      	adds	r7, #28
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
	...

0800a940 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a94a:	2300      	movs	r3, #0
 800a94c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a956:	2b40      	cmp	r3, #64	; 0x40
 800a958:	d005      	beq.n	800a966 <USBD_StdDevReq+0x26>
 800a95a:	2b40      	cmp	r3, #64	; 0x40
 800a95c:	d853      	bhi.n	800aa06 <USBD_StdDevReq+0xc6>
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00b      	beq.n	800a97a <USBD_StdDevReq+0x3a>
 800a962:	2b20      	cmp	r3, #32
 800a964:	d14f      	bne.n	800aa06 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	4798      	blx	r3
 800a974:	4603      	mov	r3, r0
 800a976:	73fb      	strb	r3, [r7, #15]
      break;
 800a978:	e04a      	b.n	800aa10 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	785b      	ldrb	r3, [r3, #1]
 800a97e:	2b09      	cmp	r3, #9
 800a980:	d83b      	bhi.n	800a9fa <USBD_StdDevReq+0xba>
 800a982:	a201      	add	r2, pc, #4	; (adr r2, 800a988 <USBD_StdDevReq+0x48>)
 800a984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a988:	0800a9dd 	.word	0x0800a9dd
 800a98c:	0800a9f1 	.word	0x0800a9f1
 800a990:	0800a9fb 	.word	0x0800a9fb
 800a994:	0800a9e7 	.word	0x0800a9e7
 800a998:	0800a9fb 	.word	0x0800a9fb
 800a99c:	0800a9bb 	.word	0x0800a9bb
 800a9a0:	0800a9b1 	.word	0x0800a9b1
 800a9a4:	0800a9fb 	.word	0x0800a9fb
 800a9a8:	0800a9d3 	.word	0x0800a9d3
 800a9ac:	0800a9c5 	.word	0x0800a9c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a9b0:	6839      	ldr	r1, [r7, #0]
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f9de 	bl	800ad74 <USBD_GetDescriptor>
          break;
 800a9b8:	e024      	b.n	800aa04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fb6d 	bl	800b09c <USBD_SetAddress>
          break;
 800a9c2:	e01f      	b.n	800aa04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fbac 	bl	800b124 <USBD_SetConfig>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	73fb      	strb	r3, [r7, #15]
          break;
 800a9d0:	e018      	b.n	800aa04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a9d2:	6839      	ldr	r1, [r7, #0]
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fc4b 	bl	800b270 <USBD_GetConfig>
          break;
 800a9da:	e013      	b.n	800aa04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a9dc:	6839      	ldr	r1, [r7, #0]
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 fc7c 	bl	800b2dc <USBD_GetStatus>
          break;
 800a9e4:	e00e      	b.n	800aa04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a9e6:	6839      	ldr	r1, [r7, #0]
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fcab 	bl	800b344 <USBD_SetFeature>
          break;
 800a9ee:	e009      	b.n	800aa04 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fcba 	bl	800b36c <USBD_ClrFeature>
          break;
 800a9f8:	e004      	b.n	800aa04 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fd11 	bl	800b424 <USBD_CtlError>
          break;
 800aa02:	bf00      	nop
      }
      break;
 800aa04:	e004      	b.n	800aa10 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800aa06:	6839      	ldr	r1, [r7, #0]
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 fd0b 	bl	800b424 <USBD_CtlError>
      break;
 800aa0e:	bf00      	nop
  }

  return ret;
 800aa10:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop

0800aa1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa26:	2300      	movs	r3, #0
 800aa28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa32:	2b40      	cmp	r3, #64	; 0x40
 800aa34:	d005      	beq.n	800aa42 <USBD_StdItfReq+0x26>
 800aa36:	2b40      	cmp	r3, #64	; 0x40
 800aa38:	d82f      	bhi.n	800aa9a <USBD_StdItfReq+0x7e>
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d001      	beq.n	800aa42 <USBD_StdItfReq+0x26>
 800aa3e:	2b20      	cmp	r3, #32
 800aa40:	d12b      	bne.n	800aa9a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d81d      	bhi.n	800aa8c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	889b      	ldrh	r3, [r3, #4]
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d813      	bhi.n	800aa82 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	6839      	ldr	r1, [r7, #0]
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	4798      	blx	r3
 800aa68:	4603      	mov	r3, r0
 800aa6a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	88db      	ldrh	r3, [r3, #6]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d110      	bne.n	800aa96 <USBD_StdItfReq+0x7a>
 800aa74:	7bfb      	ldrb	r3, [r7, #15]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10d      	bne.n	800aa96 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fd9d 	bl	800b5ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa80:	e009      	b.n	800aa96 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800aa82:	6839      	ldr	r1, [r7, #0]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fccd 	bl	800b424 <USBD_CtlError>
          break;
 800aa8a:	e004      	b.n	800aa96 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fcc8 	bl	800b424 <USBD_CtlError>
          break;
 800aa94:	e000      	b.n	800aa98 <USBD_StdItfReq+0x7c>
          break;
 800aa96:	bf00      	nop
      }
      break;
 800aa98:	e004      	b.n	800aaa4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800aa9a:	6839      	ldr	r1, [r7, #0]
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 fcc1 	bl	800b424 <USBD_CtlError>
      break;
 800aaa2:	bf00      	nop
  }

  return ret;
 800aaa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b084      	sub	sp, #16
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aab8:	2300      	movs	r3, #0
 800aaba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	889b      	ldrh	r3, [r3, #4]
 800aac0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aaca:	2b40      	cmp	r3, #64	; 0x40
 800aacc:	d007      	beq.n	800aade <USBD_StdEPReq+0x30>
 800aace:	2b40      	cmp	r3, #64	; 0x40
 800aad0:	f200 8145 	bhi.w	800ad5e <USBD_StdEPReq+0x2b0>
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00c      	beq.n	800aaf2 <USBD_StdEPReq+0x44>
 800aad8:	2b20      	cmp	r3, #32
 800aada:	f040 8140 	bne.w	800ad5e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	6839      	ldr	r1, [r7, #0]
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	4798      	blx	r3
 800aaec:	4603      	mov	r3, r0
 800aaee:	73fb      	strb	r3, [r7, #15]
      break;
 800aaf0:	e13a      	b.n	800ad68 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	785b      	ldrb	r3, [r3, #1]
 800aaf6:	2b03      	cmp	r3, #3
 800aaf8:	d007      	beq.n	800ab0a <USBD_StdEPReq+0x5c>
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	f300 8129 	bgt.w	800ad52 <USBD_StdEPReq+0x2a4>
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d07f      	beq.n	800ac04 <USBD_StdEPReq+0x156>
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d03c      	beq.n	800ab82 <USBD_StdEPReq+0xd4>
 800ab08:	e123      	b.n	800ad52 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d002      	beq.n	800ab1c <USBD_StdEPReq+0x6e>
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	d016      	beq.n	800ab48 <USBD_StdEPReq+0x9a>
 800ab1a:	e02c      	b.n	800ab76 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00d      	beq.n	800ab3e <USBD_StdEPReq+0x90>
 800ab22:	7bbb      	ldrb	r3, [r7, #14]
 800ab24:	2b80      	cmp	r3, #128	; 0x80
 800ab26:	d00a      	beq.n	800ab3e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab28:	7bbb      	ldrb	r3, [r7, #14]
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f001 fa6d 	bl	800c00c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab32:	2180      	movs	r1, #128	; 0x80
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f001 fa69 	bl	800c00c <USBD_LL_StallEP>
 800ab3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab3c:	e020      	b.n	800ab80 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ab3e:	6839      	ldr	r1, [r7, #0]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fc6f 	bl	800b424 <USBD_CtlError>
              break;
 800ab46:	e01b      	b.n	800ab80 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	885b      	ldrh	r3, [r3, #2]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10e      	bne.n	800ab6e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab50:	7bbb      	ldrb	r3, [r7, #14]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00b      	beq.n	800ab6e <USBD_StdEPReq+0xc0>
 800ab56:	7bbb      	ldrb	r3, [r7, #14]
 800ab58:	2b80      	cmp	r3, #128	; 0x80
 800ab5a:	d008      	beq.n	800ab6e <USBD_StdEPReq+0xc0>
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	88db      	ldrh	r3, [r3, #6]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d104      	bne.n	800ab6e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab64:	7bbb      	ldrb	r3, [r7, #14]
 800ab66:	4619      	mov	r1, r3
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f001 fa4f 	bl	800c00c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fd23 	bl	800b5ba <USBD_CtlSendStatus>

              break;
 800ab74:	e004      	b.n	800ab80 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fc53 	bl	800b424 <USBD_CtlError>
              break;
 800ab7e:	bf00      	nop
          }
          break;
 800ab80:	e0ec      	b.n	800ad5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d002      	beq.n	800ab94 <USBD_StdEPReq+0xe6>
 800ab8e:	2b03      	cmp	r3, #3
 800ab90:	d016      	beq.n	800abc0 <USBD_StdEPReq+0x112>
 800ab92:	e030      	b.n	800abf6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00d      	beq.n	800abb6 <USBD_StdEPReq+0x108>
 800ab9a:	7bbb      	ldrb	r3, [r7, #14]
 800ab9c:	2b80      	cmp	r3, #128	; 0x80
 800ab9e:	d00a      	beq.n	800abb6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aba0:	7bbb      	ldrb	r3, [r7, #14]
 800aba2:	4619      	mov	r1, r3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f001 fa31 	bl	800c00c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800abaa:	2180      	movs	r1, #128	; 0x80
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f001 fa2d 	bl	800c00c <USBD_LL_StallEP>
 800abb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abb4:	e025      	b.n	800ac02 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800abb6:	6839      	ldr	r1, [r7, #0]
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fc33 	bl	800b424 <USBD_CtlError>
              break;
 800abbe:	e020      	b.n	800ac02 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	885b      	ldrh	r3, [r3, #2]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d11b      	bne.n	800ac00 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800abc8:	7bbb      	ldrb	r3, [r7, #14]
 800abca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d004      	beq.n	800abdc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
 800abd4:	4619      	mov	r1, r3
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f001 fa4e 	bl	800c078 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 fcec 	bl	800b5ba <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	4798      	blx	r3
 800abf0:	4603      	mov	r3, r0
 800abf2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800abf4:	e004      	b.n	800ac00 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800abf6:	6839      	ldr	r1, [r7, #0]
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fc13 	bl	800b424 <USBD_CtlError>
              break;
 800abfe:	e000      	b.n	800ac02 <USBD_StdEPReq+0x154>
              break;
 800ac00:	bf00      	nop
          }
          break;
 800ac02:	e0ab      	b.n	800ad5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d002      	beq.n	800ac16 <USBD_StdEPReq+0x168>
 800ac10:	2b03      	cmp	r3, #3
 800ac12:	d032      	beq.n	800ac7a <USBD_StdEPReq+0x1cc>
 800ac14:	e097      	b.n	800ad46 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d007      	beq.n	800ac2c <USBD_StdEPReq+0x17e>
 800ac1c:	7bbb      	ldrb	r3, [r7, #14]
 800ac1e:	2b80      	cmp	r3, #128	; 0x80
 800ac20:	d004      	beq.n	800ac2c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fbfd 	bl	800b424 <USBD_CtlError>
                break;
 800ac2a:	e091      	b.n	800ad50 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	da0b      	bge.n	800ac4c <USBD_StdEPReq+0x19e>
 800ac34:	7bbb      	ldrb	r3, [r7, #14]
 800ac36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	3310      	adds	r3, #16
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	4413      	add	r3, r2
 800ac48:	3304      	adds	r3, #4
 800ac4a:	e00b      	b.n	800ac64 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
 800ac4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac52:	4613      	mov	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	4413      	add	r3, r2
 800ac62:	3304      	adds	r3, #4
 800ac64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	2202      	movs	r2, #2
 800ac70:	4619      	mov	r1, r3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 fc47 	bl	800b506 <USBD_CtlSendData>
              break;
 800ac78:	e06a      	b.n	800ad50 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	da11      	bge.n	800aca6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac82:	7bbb      	ldrb	r3, [r7, #14]
 800ac84:	f003 020f 	and.w	r2, r3, #15
 800ac88:	6879      	ldr	r1, [r7, #4]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	440b      	add	r3, r1
 800ac94:	3324      	adds	r3, #36	; 0x24
 800ac96:	881b      	ldrh	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d117      	bne.n	800accc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ac9c:	6839      	ldr	r1, [r7, #0]
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 fbc0 	bl	800b424 <USBD_CtlError>
                  break;
 800aca4:	e054      	b.n	800ad50 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aca6:	7bbb      	ldrb	r3, [r7, #14]
 800aca8:	f003 020f 	and.w	r2, r3, #15
 800acac:	6879      	ldr	r1, [r7, #4]
 800acae:	4613      	mov	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	4413      	add	r3, r2
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	440b      	add	r3, r1
 800acb8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d104      	bne.n	800accc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800acc2:	6839      	ldr	r1, [r7, #0]
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 fbad 	bl	800b424 <USBD_CtlError>
                  break;
 800acca:	e041      	b.n	800ad50 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800accc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	da0b      	bge.n	800acec <USBD_StdEPReq+0x23e>
 800acd4:	7bbb      	ldrb	r3, [r7, #14]
 800acd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acda:	4613      	mov	r3, r2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4413      	add	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	3310      	adds	r3, #16
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	4413      	add	r3, r2
 800ace8:	3304      	adds	r3, #4
 800acea:	e00b      	b.n	800ad04 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acec:	7bbb      	ldrb	r3, [r7, #14]
 800acee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acf2:	4613      	mov	r3, r2
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	4413      	add	r3, r2
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	4413      	add	r3, r2
 800ad02:	3304      	adds	r3, #4
 800ad04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad06:	7bbb      	ldrb	r3, [r7, #14]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d002      	beq.n	800ad12 <USBD_StdEPReq+0x264>
 800ad0c:	7bbb      	ldrb	r3, [r7, #14]
 800ad0e:	2b80      	cmp	r3, #128	; 0x80
 800ad10:	d103      	bne.n	800ad1a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	2200      	movs	r2, #0
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	e00e      	b.n	800ad38 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ad1a:	7bbb      	ldrb	r3, [r7, #14]
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f001 f9e0 	bl	800c0e4 <USBD_LL_IsStallEP>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d003      	beq.n	800ad32 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	601a      	str	r2, [r3, #0]
 800ad30:	e002      	b.n	800ad38 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	2200      	movs	r2, #0
 800ad36:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2202      	movs	r2, #2
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fbe1 	bl	800b506 <USBD_CtlSendData>
              break;
 800ad44:	e004      	b.n	800ad50 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ad46:	6839      	ldr	r1, [r7, #0]
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 fb6b 	bl	800b424 <USBD_CtlError>
              break;
 800ad4e:	bf00      	nop
          }
          break;
 800ad50:	e004      	b.n	800ad5c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ad52:	6839      	ldr	r1, [r7, #0]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fb65 	bl	800b424 <USBD_CtlError>
          break;
 800ad5a:	bf00      	nop
      }
      break;
 800ad5c:	e004      	b.n	800ad68 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ad5e:	6839      	ldr	r1, [r7, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fb5f 	bl	800b424 <USBD_CtlError>
      break;
 800ad66:	bf00      	nop
  }

  return ret;
 800ad68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
	...

0800ad74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad82:	2300      	movs	r3, #0
 800ad84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	885b      	ldrh	r3, [r3, #2]
 800ad8e:	0a1b      	lsrs	r3, r3, #8
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	3b01      	subs	r3, #1
 800ad94:	2b0e      	cmp	r3, #14
 800ad96:	f200 8152 	bhi.w	800b03e <USBD_GetDescriptor+0x2ca>
 800ad9a:	a201      	add	r2, pc, #4	; (adr r2, 800ada0 <USBD_GetDescriptor+0x2c>)
 800ad9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada0:	0800ae11 	.word	0x0800ae11
 800ada4:	0800ae29 	.word	0x0800ae29
 800ada8:	0800ae69 	.word	0x0800ae69
 800adac:	0800b03f 	.word	0x0800b03f
 800adb0:	0800b03f 	.word	0x0800b03f
 800adb4:	0800afdf 	.word	0x0800afdf
 800adb8:	0800b00b 	.word	0x0800b00b
 800adbc:	0800b03f 	.word	0x0800b03f
 800adc0:	0800b03f 	.word	0x0800b03f
 800adc4:	0800b03f 	.word	0x0800b03f
 800adc8:	0800b03f 	.word	0x0800b03f
 800adcc:	0800b03f 	.word	0x0800b03f
 800add0:	0800b03f 	.word	0x0800b03f
 800add4:	0800b03f 	.word	0x0800b03f
 800add8:	0800addd 	.word	0x0800addd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ade2:	69db      	ldr	r3, [r3, #28]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00b      	beq.n	800ae00 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adee:	69db      	ldr	r3, [r3, #28]
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	7c12      	ldrb	r2, [r2, #16]
 800adf4:	f107 0108 	add.w	r1, r7, #8
 800adf8:	4610      	mov	r0, r2
 800adfa:	4798      	blx	r3
 800adfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adfe:	e126      	b.n	800b04e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 fb0e 	bl	800b424 <USBD_CtlError>
        err++;
 800ae08:	7afb      	ldrb	r3, [r7, #11]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	72fb      	strb	r3, [r7, #11]
      break;
 800ae0e:	e11e      	b.n	800b04e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	7c12      	ldrb	r2, [r2, #16]
 800ae1c:	f107 0108 	add.w	r1, r7, #8
 800ae20:	4610      	mov	r0, r2
 800ae22:	4798      	blx	r3
 800ae24:	60f8      	str	r0, [r7, #12]
      break;
 800ae26:	e112      	b.n	800b04e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	7c1b      	ldrb	r3, [r3, #16]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d10d      	bne.n	800ae4c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae38:	f107 0208 	add.w	r2, r7, #8
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	4798      	blx	r3
 800ae40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3301      	adds	r3, #1
 800ae46:	2202      	movs	r2, #2
 800ae48:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ae4a:	e100      	b.n	800b04e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae54:	f107 0208 	add.w	r2, r7, #8
 800ae58:	4610      	mov	r0, r2
 800ae5a:	4798      	blx	r3
 800ae5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	3301      	adds	r3, #1
 800ae62:	2202      	movs	r2, #2
 800ae64:	701a      	strb	r2, [r3, #0]
      break;
 800ae66:	e0f2      	b.n	800b04e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	885b      	ldrh	r3, [r3, #2]
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	2b05      	cmp	r3, #5
 800ae70:	f200 80ac 	bhi.w	800afcc <USBD_GetDescriptor+0x258>
 800ae74:	a201      	add	r2, pc, #4	; (adr r2, 800ae7c <USBD_GetDescriptor+0x108>)
 800ae76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae7a:	bf00      	nop
 800ae7c:	0800ae95 	.word	0x0800ae95
 800ae80:	0800aec9 	.word	0x0800aec9
 800ae84:	0800aefd 	.word	0x0800aefd
 800ae88:	0800af31 	.word	0x0800af31
 800ae8c:	0800af65 	.word	0x0800af65
 800ae90:	0800af99 	.word	0x0800af99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00b      	beq.n	800aeb8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	7c12      	ldrb	r2, [r2, #16]
 800aeac:	f107 0108 	add.w	r1, r7, #8
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	4798      	blx	r3
 800aeb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeb6:	e091      	b.n	800afdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fab2 	bl	800b424 <USBD_CtlError>
            err++;
 800aec0:	7afb      	ldrb	r3, [r7, #11]
 800aec2:	3301      	adds	r3, #1
 800aec4:	72fb      	strb	r3, [r7, #11]
          break;
 800aec6:	e089      	b.n	800afdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00b      	beq.n	800aeec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	7c12      	ldrb	r2, [r2, #16]
 800aee0:	f107 0108 	add.w	r1, r7, #8
 800aee4:	4610      	mov	r0, r2
 800aee6:	4798      	blx	r3
 800aee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeea:	e077      	b.n	800afdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fa98 	bl	800b424 <USBD_CtlError>
            err++;
 800aef4:	7afb      	ldrb	r3, [r7, #11]
 800aef6:	3301      	adds	r3, #1
 800aef8:	72fb      	strb	r3, [r7, #11]
          break;
 800aefa:	e06f      	b.n	800afdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00b      	beq.n	800af20 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	7c12      	ldrb	r2, [r2, #16]
 800af14:	f107 0108 	add.w	r1, r7, #8
 800af18:	4610      	mov	r0, r2
 800af1a:	4798      	blx	r3
 800af1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af1e:	e05d      	b.n	800afdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af20:	6839      	ldr	r1, [r7, #0]
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fa7e 	bl	800b424 <USBD_CtlError>
            err++;
 800af28:	7afb      	ldrb	r3, [r7, #11]
 800af2a:	3301      	adds	r3, #1
 800af2c:	72fb      	strb	r3, [r7, #11]
          break;
 800af2e:	e055      	b.n	800afdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00b      	beq.n	800af54 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	7c12      	ldrb	r2, [r2, #16]
 800af48:	f107 0108 	add.w	r1, r7, #8
 800af4c:	4610      	mov	r0, r2
 800af4e:	4798      	blx	r3
 800af50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af52:	e043      	b.n	800afdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af54:	6839      	ldr	r1, [r7, #0]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fa64 	bl	800b424 <USBD_CtlError>
            err++;
 800af5c:	7afb      	ldrb	r3, [r7, #11]
 800af5e:	3301      	adds	r3, #1
 800af60:	72fb      	strb	r3, [r7, #11]
          break;
 800af62:	e03b      	b.n	800afdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00b      	beq.n	800af88 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af76:	695b      	ldr	r3, [r3, #20]
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	7c12      	ldrb	r2, [r2, #16]
 800af7c:	f107 0108 	add.w	r1, r7, #8
 800af80:	4610      	mov	r0, r2
 800af82:	4798      	blx	r3
 800af84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af86:	e029      	b.n	800afdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fa4a 	bl	800b424 <USBD_CtlError>
            err++;
 800af90:	7afb      	ldrb	r3, [r7, #11]
 800af92:	3301      	adds	r3, #1
 800af94:	72fb      	strb	r3, [r7, #11]
          break;
 800af96:	e021      	b.n	800afdc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af9e:	699b      	ldr	r3, [r3, #24]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d00b      	beq.n	800afbc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afaa:	699b      	ldr	r3, [r3, #24]
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	7c12      	ldrb	r2, [r2, #16]
 800afb0:	f107 0108 	add.w	r1, r7, #8
 800afb4:	4610      	mov	r0, r2
 800afb6:	4798      	blx	r3
 800afb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afba:	e00f      	b.n	800afdc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800afbc:	6839      	ldr	r1, [r7, #0]
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fa30 	bl	800b424 <USBD_CtlError>
            err++;
 800afc4:	7afb      	ldrb	r3, [r7, #11]
 800afc6:	3301      	adds	r3, #1
 800afc8:	72fb      	strb	r3, [r7, #11]
          break;
 800afca:	e007      	b.n	800afdc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 fa28 	bl	800b424 <USBD_CtlError>
          err++;
 800afd4:	7afb      	ldrb	r3, [r7, #11]
 800afd6:	3301      	adds	r3, #1
 800afd8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800afda:	bf00      	nop
      }
      break;
 800afdc:	e037      	b.n	800b04e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	7c1b      	ldrb	r3, [r3, #16]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d109      	bne.n	800affa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afee:	f107 0208 	add.w	r2, r7, #8
 800aff2:	4610      	mov	r0, r2
 800aff4:	4798      	blx	r3
 800aff6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aff8:	e029      	b.n	800b04e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800affa:	6839      	ldr	r1, [r7, #0]
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fa11 	bl	800b424 <USBD_CtlError>
        err++;
 800b002:	7afb      	ldrb	r3, [r7, #11]
 800b004:	3301      	adds	r3, #1
 800b006:	72fb      	strb	r3, [r7, #11]
      break;
 800b008:	e021      	b.n	800b04e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	7c1b      	ldrb	r3, [r3, #16]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10d      	bne.n	800b02e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b01a:	f107 0208 	add.w	r2, r7, #8
 800b01e:	4610      	mov	r0, r2
 800b020:	4798      	blx	r3
 800b022:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	3301      	adds	r3, #1
 800b028:	2207      	movs	r2, #7
 800b02a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b02c:	e00f      	b.n	800b04e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f9f7 	bl	800b424 <USBD_CtlError>
        err++;
 800b036:	7afb      	ldrb	r3, [r7, #11]
 800b038:	3301      	adds	r3, #1
 800b03a:	72fb      	strb	r3, [r7, #11]
      break;
 800b03c:	e007      	b.n	800b04e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b03e:	6839      	ldr	r1, [r7, #0]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 f9ef 	bl	800b424 <USBD_CtlError>
      err++;
 800b046:	7afb      	ldrb	r3, [r7, #11]
 800b048:	3301      	adds	r3, #1
 800b04a:	72fb      	strb	r3, [r7, #11]
      break;
 800b04c:	bf00      	nop
  }

  if (err != 0U)
 800b04e:	7afb      	ldrb	r3, [r7, #11]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d11e      	bne.n	800b092 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	88db      	ldrh	r3, [r3, #6]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d016      	beq.n	800b08a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b05c:	893b      	ldrh	r3, [r7, #8]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00e      	beq.n	800b080 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	88da      	ldrh	r2, [r3, #6]
 800b066:	893b      	ldrh	r3, [r7, #8]
 800b068:	4293      	cmp	r3, r2
 800b06a:	bf28      	it	cs
 800b06c:	4613      	movcs	r3, r2
 800b06e:	b29b      	uxth	r3, r3
 800b070:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b072:	893b      	ldrh	r3, [r7, #8]
 800b074:	461a      	mov	r2, r3
 800b076:	68f9      	ldr	r1, [r7, #12]
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fa44 	bl	800b506 <USBD_CtlSendData>
 800b07e:	e009      	b.n	800b094 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b080:	6839      	ldr	r1, [r7, #0]
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f9ce 	bl	800b424 <USBD_CtlError>
 800b088:	e004      	b.n	800b094 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 fa95 	bl	800b5ba <USBD_CtlSendStatus>
 800b090:	e000      	b.n	800b094 <USBD_GetDescriptor+0x320>
    return;
 800b092:	bf00      	nop
  }
}
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop

0800b09c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	889b      	ldrh	r3, [r3, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d131      	bne.n	800b112 <USBD_SetAddress+0x76>
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	88db      	ldrh	r3, [r3, #6]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d12d      	bne.n	800b112 <USBD_SetAddress+0x76>
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	885b      	ldrh	r3, [r3, #2]
 800b0ba:	2b7f      	cmp	r3, #127	; 0x7f
 800b0bc:	d829      	bhi.n	800b112 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	885b      	ldrh	r3, [r3, #2]
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	2b03      	cmp	r3, #3
 800b0d4:	d104      	bne.n	800b0e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f9a3 	bl	800b424 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0de:	e01d      	b.n	800b11c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	7bfa      	ldrb	r2, [r7, #15]
 800b0e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f001 f825 	bl	800c13c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fa61 	bl	800b5ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d004      	beq.n	800b108 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2202      	movs	r2, #2
 800b102:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b106:	e009      	b.n	800b11c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b110:	e004      	b.n	800b11c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b112:	6839      	ldr	r1, [r7, #0]
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 f985 	bl	800b424 <USBD_CtlError>
  }
}
 800b11a:	bf00      	nop
 800b11c:	bf00      	nop
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	885b      	ldrh	r3, [r3, #2]
 800b136:	b2da      	uxtb	r2, r3
 800b138:	4b4c      	ldr	r3, [pc, #304]	; (800b26c <USBD_SetConfig+0x148>)
 800b13a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b13c:	4b4b      	ldr	r3, [pc, #300]	; (800b26c <USBD_SetConfig+0x148>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2b01      	cmp	r3, #1
 800b142:	d905      	bls.n	800b150 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b144:	6839      	ldr	r1, [r7, #0]
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f96c 	bl	800b424 <USBD_CtlError>
    return USBD_FAIL;
 800b14c:	2303      	movs	r3, #3
 800b14e:	e088      	b.n	800b262 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b156:	b2db      	uxtb	r3, r3
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d002      	beq.n	800b162 <USBD_SetConfig+0x3e>
 800b15c:	2b03      	cmp	r3, #3
 800b15e:	d025      	beq.n	800b1ac <USBD_SetConfig+0x88>
 800b160:	e071      	b.n	800b246 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b162:	4b42      	ldr	r3, [pc, #264]	; (800b26c <USBD_SetConfig+0x148>)
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d01c      	beq.n	800b1a4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b16a:	4b40      	ldr	r3, [pc, #256]	; (800b26c <USBD_SetConfig+0x148>)
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	461a      	mov	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b174:	4b3d      	ldr	r3, [pc, #244]	; (800b26c <USBD_SetConfig+0x148>)
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	4619      	mov	r1, r3
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f7ff f91e 	bl	800a3bc <USBD_SetClassConfig>
 800b180:	4603      	mov	r3, r0
 800b182:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b184:	7bfb      	ldrb	r3, [r7, #15]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d004      	beq.n	800b194 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b18a:	6839      	ldr	r1, [r7, #0]
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 f949 	bl	800b424 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b192:	e065      	b.n	800b260 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fa10 	bl	800b5ba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2203      	movs	r2, #3
 800b19e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b1a2:	e05d      	b.n	800b260 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fa08 	bl	800b5ba <USBD_CtlSendStatus>
      break;
 800b1aa:	e059      	b.n	800b260 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b1ac:	4b2f      	ldr	r3, [pc, #188]	; (800b26c <USBD_SetConfig+0x148>)
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d112      	bne.n	800b1da <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b1bc:	4b2b      	ldr	r3, [pc, #172]	; (800b26c <USBD_SetConfig+0x148>)
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1c6:	4b29      	ldr	r3, [pc, #164]	; (800b26c <USBD_SetConfig+0x148>)
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7ff f911 	bl	800a3f4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 f9f1 	bl	800b5ba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b1d8:	e042      	b.n	800b260 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b1da:	4b24      	ldr	r3, [pc, #144]	; (800b26c <USBD_SetConfig+0x148>)
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d02a      	beq.n	800b23e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f7ff f8ff 	bl	800a3f4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b1f6:	4b1d      	ldr	r3, [pc, #116]	; (800b26c <USBD_SetConfig+0x148>)
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b200:	4b1a      	ldr	r3, [pc, #104]	; (800b26c <USBD_SetConfig+0x148>)
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	4619      	mov	r1, r3
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff f8d8 	bl	800a3bc <USBD_SetClassConfig>
 800b20c:	4603      	mov	r3, r0
 800b20e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b210:	7bfb      	ldrb	r3, [r7, #15]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00f      	beq.n	800b236 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 f903 	bl	800b424 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	b2db      	uxtb	r3, r3
 800b224:	4619      	mov	r1, r3
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7ff f8e4 	bl	800a3f4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2202      	movs	r2, #2
 800b230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b234:	e014      	b.n	800b260 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f9bf 	bl	800b5ba <USBD_CtlSendStatus>
      break;
 800b23c:	e010      	b.n	800b260 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f9bb 	bl	800b5ba <USBD_CtlSendStatus>
      break;
 800b244:	e00c      	b.n	800b260 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b246:	6839      	ldr	r1, [r7, #0]
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 f8eb 	bl	800b424 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b24e:	4b07      	ldr	r3, [pc, #28]	; (800b26c <USBD_SetConfig+0x148>)
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	4619      	mov	r1, r3
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7ff f8cd 	bl	800a3f4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b25a:	2303      	movs	r3, #3
 800b25c:	73fb      	strb	r3, [r7, #15]
      break;
 800b25e:	bf00      	nop
  }

  return ret;
 800b260:	7bfb      	ldrb	r3, [r7, #15]
}
 800b262:	4618      	mov	r0, r3
 800b264:	3710      	adds	r7, #16
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	20000240 	.word	0x20000240

0800b270 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	88db      	ldrh	r3, [r3, #6]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d004      	beq.n	800b28c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 f8cd 	bl	800b424 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b28a:	e023      	b.n	800b2d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b292:	b2db      	uxtb	r3, r3
 800b294:	2b02      	cmp	r3, #2
 800b296:	dc02      	bgt.n	800b29e <USBD_GetConfig+0x2e>
 800b298:	2b00      	cmp	r3, #0
 800b29a:	dc03      	bgt.n	800b2a4 <USBD_GetConfig+0x34>
 800b29c:	e015      	b.n	800b2ca <USBD_GetConfig+0x5a>
 800b29e:	2b03      	cmp	r3, #3
 800b2a0:	d00b      	beq.n	800b2ba <USBD_GetConfig+0x4a>
 800b2a2:	e012      	b.n	800b2ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 f927 	bl	800b506 <USBD_CtlSendData>
        break;
 800b2b8:	e00c      	b.n	800b2d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	3304      	adds	r3, #4
 800b2be:	2201      	movs	r2, #1
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 f91f 	bl	800b506 <USBD_CtlSendData>
        break;
 800b2c8:	e004      	b.n	800b2d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b2ca:	6839      	ldr	r1, [r7, #0]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f8a9 	bl	800b424 <USBD_CtlError>
        break;
 800b2d2:	bf00      	nop
}
 800b2d4:	bf00      	nop
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d81e      	bhi.n	800b332 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	88db      	ldrh	r3, [r3, #6]
 800b2f8:	2b02      	cmp	r3, #2
 800b2fa:	d004      	beq.n	800b306 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 f890 	bl	800b424 <USBD_CtlError>
        break;
 800b304:	e01a      	b.n	800b33c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2201      	movs	r2, #1
 800b30a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b312:	2b00      	cmp	r3, #0
 800b314:	d005      	beq.n	800b322 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	f043 0202 	orr.w	r2, r3, #2
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	330c      	adds	r3, #12
 800b326:	2202      	movs	r2, #2
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f8eb 	bl	800b506 <USBD_CtlSendData>
      break;
 800b330:	e004      	b.n	800b33c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b332:	6839      	ldr	r1, [r7, #0]
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 f875 	bl	800b424 <USBD_CtlError>
      break;
 800b33a:	bf00      	nop
  }
}
 800b33c:	bf00      	nop
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	885b      	ldrh	r3, [r3, #2]
 800b352:	2b01      	cmp	r3, #1
 800b354:	d106      	bne.n	800b364 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2201      	movs	r2, #1
 800b35a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f92b 	bl	800b5ba <USBD_CtlSendStatus>
  }
}
 800b364:	bf00      	nop
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	3b01      	subs	r3, #1
 800b380:	2b02      	cmp	r3, #2
 800b382:	d80b      	bhi.n	800b39c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	885b      	ldrh	r3, [r3, #2]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d10c      	bne.n	800b3a6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2200      	movs	r2, #0
 800b390:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 f910 	bl	800b5ba <USBD_CtlSendStatus>
      }
      break;
 800b39a:	e004      	b.n	800b3a6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 f840 	bl	800b424 <USBD_CtlError>
      break;
 800b3a4:	e000      	b.n	800b3a8 <USBD_ClrFeature+0x3c>
      break;
 800b3a6:	bf00      	nop
  }
}
 800b3a8:	bf00      	nop
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	781a      	ldrb	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	781a      	ldrb	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f7ff fa91 	bl	800a902 <SWAPBYTE>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f7ff fa84 	bl	800a902 <SWAPBYTE>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	3301      	adds	r3, #1
 800b406:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	3301      	adds	r3, #1
 800b40c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f7ff fa77 	bl	800a902 <SWAPBYTE>
 800b414:	4603      	mov	r3, r0
 800b416:	461a      	mov	r2, r3
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	80da      	strh	r2, [r3, #6]
}
 800b41c:	bf00      	nop
 800b41e:	3710      	adds	r7, #16
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b42e:	2180      	movs	r1, #128	; 0x80
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fdeb 	bl	800c00c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b436:	2100      	movs	r1, #0
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fde7 	bl	800c00c <USBD_LL_StallEP>
}
 800b43e:	bf00      	nop
 800b440:	3708      	adds	r7, #8
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b086      	sub	sp, #24
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	60f8      	str	r0, [r7, #12]
 800b44e:	60b9      	str	r1, [r7, #8]
 800b450:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b452:	2300      	movs	r3, #0
 800b454:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d036      	beq.n	800b4ca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b460:	6938      	ldr	r0, [r7, #16]
 800b462:	f000 f836 	bl	800b4d2 <USBD_GetLen>
 800b466:	4603      	mov	r3, r0
 800b468:	3301      	adds	r3, #1
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	b29a      	uxth	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b474:	7dfb      	ldrb	r3, [r7, #23]
 800b476:	68ba      	ldr	r2, [r7, #8]
 800b478:	4413      	add	r3, r2
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	7812      	ldrb	r2, [r2, #0]
 800b47e:	701a      	strb	r2, [r3, #0]
  idx++;
 800b480:	7dfb      	ldrb	r3, [r7, #23]
 800b482:	3301      	adds	r3, #1
 800b484:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b486:	7dfb      	ldrb	r3, [r7, #23]
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	4413      	add	r3, r2
 800b48c:	2203      	movs	r2, #3
 800b48e:	701a      	strb	r2, [r3, #0]
  idx++;
 800b490:	7dfb      	ldrb	r3, [r7, #23]
 800b492:	3301      	adds	r3, #1
 800b494:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b496:	e013      	b.n	800b4c0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b498:	7dfb      	ldrb	r3, [r7, #23]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	4413      	add	r3, r2
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	7812      	ldrb	r2, [r2, #0]
 800b4a2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	613b      	str	r3, [r7, #16]
    idx++;
 800b4aa:	7dfb      	ldrb	r3, [r7, #23]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b4b0:	7dfb      	ldrb	r3, [r7, #23]
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	701a      	strb	r2, [r3, #0]
    idx++;
 800b4ba:	7dfb      	ldrb	r3, [r7, #23]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1e7      	bne.n	800b498 <USBD_GetString+0x52>
 800b4c8:	e000      	b.n	800b4cc <USBD_GetString+0x86>
    return;
 800b4ca:	bf00      	nop
  }
}
 800b4cc:	3718      	adds	r7, #24
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b4d2:	b480      	push	{r7}
 800b4d4:	b085      	sub	sp, #20
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b4e2:	e005      	b.n	800b4f0 <USBD_GetLen+0x1e>
  {
    len++;
 800b4e4:	7bfb      	ldrb	r3, [r7, #15]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1f5      	bne.n	800b4e4 <USBD_GetLen+0x12>
  }

  return len;
 800b4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b084      	sub	sp, #16
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	60f8      	str	r0, [r7, #12]
 800b50e:	60b9      	str	r1, [r7, #8]
 800b510:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2202      	movs	r2, #2
 800b516:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	68ba      	ldr	r2, [r7, #8]
 800b52a:	2100      	movs	r1, #0
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f000 fe3b 	bl	800c1a8 <USBD_LL_Transmit>

  return USBD_OK;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	3710      	adds	r7, #16
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	68ba      	ldr	r2, [r7, #8]
 800b54c:	2100      	movs	r1, #0
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f000 fe2a 	bl	800c1a8 <USBD_LL_Transmit>

  return USBD_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b084      	sub	sp, #16
 800b562:	af00      	add	r7, sp, #0
 800b564:	60f8      	str	r0, [r7, #12]
 800b566:	60b9      	str	r1, [r7, #8]
 800b568:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2203      	movs	r2, #3
 800b56e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	68ba      	ldr	r2, [r7, #8]
 800b586:	2100      	movs	r1, #0
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 fe45 	bl	800c218 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f000 fe34 	bl	800c218 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b082      	sub	sp, #8
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2204      	movs	r2, #4
 800b5c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fde9 	bl	800c1a8 <USBD_LL_Transmit>

  return USBD_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2205      	movs	r2, #5
 800b5ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 fe0e 	bl	800c218 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
	...

0800b608 <platform_write>:

stmdev_ctx_t LSM6DSOX_ctx;

//Write to a generic SPI register
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len){
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	607a      	str	r2, [r7, #4]
 800b612:	461a      	mov	r2, r3
 800b614:	460b      	mov	r3, r1
 800b616:	72fb      	strb	r3, [r7, #11]
 800b618:	4613      	mov	r3, r2
 800b61a:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(CS_LSM6DSOX_GPIO_Port, CS_LSM6DSOX_Pin, GPIO_PIN_RESET);
 800b61c:	2200      	movs	r2, #0
 800b61e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b622:	480e      	ldr	r0, [pc, #56]	; (800b65c <platform_write+0x54>)
 800b624:	f7f7 fdde 	bl	80031e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800b628:	f107 010b 	add.w	r1, r7, #11
 800b62c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b630:	2201      	movs	r2, #1
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f7fb fb81 	bl	8006d3a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t *)bufp, len, 1000);
 800b638:	893a      	ldrh	r2, [r7, #8]
 800b63a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b63e:	6879      	ldr	r1, [r7, #4]
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f7fb fb7a 	bl	8006d3a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_LSM6DSOX_GPIO_Port, CS_LSM6DSOX_Pin, GPIO_PIN_SET);
 800b646:	2201      	movs	r2, #1
 800b648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b64c:	4803      	ldr	r0, [pc, #12]	; (800b65c <platform_write+0x54>)
 800b64e:	f7f7 fdc9 	bl	80031e4 <HAL_GPIO_WritePin>
	return 0;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	48001000 	.word	0x48001000

0800b660 <platform_read>:

//Read from a generic SPI register
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len){
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	607a      	str	r2, [r7, #4]
 800b66a:	461a      	mov	r2, r3
 800b66c:	460b      	mov	r3, r1
 800b66e:	72fb      	strb	r3, [r7, #11]
 800b670:	4613      	mov	r3, r2
 800b672:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 800b674:	7afb      	ldrb	r3, [r7, #11]
 800b676:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(CS_LSM6DSOX_GPIO_Port, CS_LSM6DSOX_Pin, GPIO_PIN_RESET);
 800b67e:	2200      	movs	r2, #0
 800b680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b684:	480e      	ldr	r0, [pc, #56]	; (800b6c0 <platform_read+0x60>)
 800b686:	f7f7 fdad 	bl	80031e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800b68a:	f107 010b 	add.w	r1, r7, #11
 800b68e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b692:	2201      	movs	r2, #1
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f7fb fb50 	bl	8006d3a <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 800b69a:	893a      	ldrh	r2, [r7, #8]
 800b69c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b6a0:	6879      	ldr	r1, [r7, #4]
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f7fb fcb7 	bl	8007016 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CS_LSM6DSOX_GPIO_Port, CS_LSM6DSOX_Pin, GPIO_PIN_SET);
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b6ae:	4804      	ldr	r0, [pc, #16]	; (800b6c0 <platform_read+0x60>)
 800b6b0:	f7f7 fd98 	bl	80031e4 <HAL_GPIO_WritePin>
	return 0;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	48001000 	.word	0x48001000

0800b6c4 <lsm6dsox_struct_init>:

void lsm6dsox_struct_init(){
 800b6c4:	b480      	push	{r7}
 800b6c6:	af00      	add	r7, sp, #0
	LSM6DSOX_ctx.write_reg = &platform_write;
 800b6c8:	4b06      	ldr	r3, [pc, #24]	; (800b6e4 <lsm6dsox_struct_init+0x20>)
 800b6ca:	4a07      	ldr	r2, [pc, #28]	; (800b6e8 <lsm6dsox_struct_init+0x24>)
 800b6cc:	601a      	str	r2, [r3, #0]
	LSM6DSOX_ctx.read_reg = &platform_read;
 800b6ce:	4b05      	ldr	r3, [pc, #20]	; (800b6e4 <lsm6dsox_struct_init+0x20>)
 800b6d0:	4a06      	ldr	r2, [pc, #24]	; (800b6ec <lsm6dsox_struct_init+0x28>)
 800b6d2:	605a      	str	r2, [r3, #4]
	LSM6DSOX_ctx.handle = &hspi1;
 800b6d4:	4b03      	ldr	r3, [pc, #12]	; (800b6e4 <lsm6dsox_struct_init+0x20>)
 800b6d6:	4a06      	ldr	r2, [pc, #24]	; (800b6f0 <lsm6dsox_struct_init+0x2c>)
 800b6d8:	60da      	str	r2, [r3, #12]
}
 800b6da:	bf00      	nop
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr
 800b6e4:	20000920 	.word	0x20000920
 800b6e8:	0800b609 	.word	0x0800b609
 800b6ec:	0800b661 	.word	0x0800b661
 800b6f0:	200007d4 	.word	0x200007d4

0800b6f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	4912      	ldr	r1, [pc, #72]	; (800b744 <MX_USB_DEVICE_Init+0x50>)
 800b6fc:	4812      	ldr	r0, [pc, #72]	; (800b748 <MX_USB_DEVICE_Init+0x54>)
 800b6fe:	f7fe fdef 	bl	800a2e0 <USBD_Init>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b708:	f7f5 fb3e 	bl	8000d88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b70c:	490f      	ldr	r1, [pc, #60]	; (800b74c <MX_USB_DEVICE_Init+0x58>)
 800b70e:	480e      	ldr	r0, [pc, #56]	; (800b748 <MX_USB_DEVICE_Init+0x54>)
 800b710:	f7fe fe16 	bl	800a340 <USBD_RegisterClass>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d001      	beq.n	800b71e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b71a:	f7f5 fb35 	bl	8000d88 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b71e:	490c      	ldr	r1, [pc, #48]	; (800b750 <MX_USB_DEVICE_Init+0x5c>)
 800b720:	4809      	ldr	r0, [pc, #36]	; (800b748 <MX_USB_DEVICE_Init+0x54>)
 800b722:	f7fe fd37 	bl	800a194 <USBD_CDC_RegisterInterface>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d001      	beq.n	800b730 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b72c:	f7f5 fb2c 	bl	8000d88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b730:	4805      	ldr	r0, [pc, #20]	; (800b748 <MX_USB_DEVICE_Init+0x54>)
 800b732:	f7fe fe2c 	bl	800a38e <USBD_Start>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d001      	beq.n	800b740 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b73c:	f7f5 fb24 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b740:	bf00      	nop
 800b742:	bd80      	pop	{r7, pc}
 800b744:	20000130 	.word	0x20000130
 800b748:	20000930 	.word	0x20000930
 800b74c:	20000018 	.word	0x20000018
 800b750:	2000011c 	.word	0x2000011c

0800b754 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b758:	2200      	movs	r2, #0
 800b75a:	4905      	ldr	r1, [pc, #20]	; (800b770 <CDC_Init_FS+0x1c>)
 800b75c:	4805      	ldr	r0, [pc, #20]	; (800b774 <CDC_Init_FS+0x20>)
 800b75e:	f7fe fd2e 	bl	800a1be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b762:	4905      	ldr	r1, [pc, #20]	; (800b778 <CDC_Init_FS+0x24>)
 800b764:	4803      	ldr	r0, [pc, #12]	; (800b774 <CDC_Init_FS+0x20>)
 800b766:	f7fe fd48 	bl	800a1fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b76a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	20001400 	.word	0x20001400
 800b774:	20000930 	.word	0x20000930
 800b778:	20000c00 	.word	0x20000c00

0800b77c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b77c:	b480      	push	{r7}
 800b77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b780:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b782:	4618      	mov	r0, r3
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	4603      	mov	r3, r0
 800b794:	6039      	str	r1, [r7, #0]
 800b796:	71fb      	strb	r3, [r7, #7]
 800b798:	4613      	mov	r3, r2
 800b79a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b79c:	79fb      	ldrb	r3, [r7, #7]
 800b79e:	2b23      	cmp	r3, #35	; 0x23
 800b7a0:	d84a      	bhi.n	800b838 <CDC_Control_FS+0xac>
 800b7a2:	a201      	add	r2, pc, #4	; (adr r2, 800b7a8 <CDC_Control_FS+0x1c>)
 800b7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a8:	0800b839 	.word	0x0800b839
 800b7ac:	0800b839 	.word	0x0800b839
 800b7b0:	0800b839 	.word	0x0800b839
 800b7b4:	0800b839 	.word	0x0800b839
 800b7b8:	0800b839 	.word	0x0800b839
 800b7bc:	0800b839 	.word	0x0800b839
 800b7c0:	0800b839 	.word	0x0800b839
 800b7c4:	0800b839 	.word	0x0800b839
 800b7c8:	0800b839 	.word	0x0800b839
 800b7cc:	0800b839 	.word	0x0800b839
 800b7d0:	0800b839 	.word	0x0800b839
 800b7d4:	0800b839 	.word	0x0800b839
 800b7d8:	0800b839 	.word	0x0800b839
 800b7dc:	0800b839 	.word	0x0800b839
 800b7e0:	0800b839 	.word	0x0800b839
 800b7e4:	0800b839 	.word	0x0800b839
 800b7e8:	0800b839 	.word	0x0800b839
 800b7ec:	0800b839 	.word	0x0800b839
 800b7f0:	0800b839 	.word	0x0800b839
 800b7f4:	0800b839 	.word	0x0800b839
 800b7f8:	0800b839 	.word	0x0800b839
 800b7fc:	0800b839 	.word	0x0800b839
 800b800:	0800b839 	.word	0x0800b839
 800b804:	0800b839 	.word	0x0800b839
 800b808:	0800b839 	.word	0x0800b839
 800b80c:	0800b839 	.word	0x0800b839
 800b810:	0800b839 	.word	0x0800b839
 800b814:	0800b839 	.word	0x0800b839
 800b818:	0800b839 	.word	0x0800b839
 800b81c:	0800b839 	.word	0x0800b839
 800b820:	0800b839 	.word	0x0800b839
 800b824:	0800b839 	.word	0x0800b839
 800b828:	0800b839 	.word	0x0800b839
 800b82c:	0800b839 	.word	0x0800b839
 800b830:	0800b839 	.word	0x0800b839
 800b834:	0800b839 	.word	0x0800b839
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b838:	bf00      	nop
  }

  return (USBD_OK);
 800b83a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b852:	6879      	ldr	r1, [r7, #4]
 800b854:	4805      	ldr	r0, [pc, #20]	; (800b86c <CDC_Receive_FS+0x24>)
 800b856:	f7fe fcd0 	bl	800a1fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b85a:	4804      	ldr	r0, [pc, #16]	; (800b86c <CDC_Receive_FS+0x24>)
 800b85c:	f7fe fd16 	bl	800a28c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b860:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b862:	4618      	mov	r0, r3
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	20000930 	.word	0x20000930

0800b870 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	460b      	mov	r3, r1
 800b87a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b880:	4b0d      	ldr	r3, [pc, #52]	; (800b8b8 <CDC_Transmit_FS+0x48>)
 800b882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b886:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d001      	beq.n	800b896 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b892:	2301      	movs	r3, #1
 800b894:	e00b      	b.n	800b8ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b896:	887b      	ldrh	r3, [r7, #2]
 800b898:	461a      	mov	r2, r3
 800b89a:	6879      	ldr	r1, [r7, #4]
 800b89c:	4806      	ldr	r0, [pc, #24]	; (800b8b8 <CDC_Transmit_FS+0x48>)
 800b89e:	f7fe fc8e 	bl	800a1be <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b8a2:	4805      	ldr	r0, [pc, #20]	; (800b8b8 <CDC_Transmit_FS+0x48>)
 800b8a4:	f7fe fcc2 	bl	800a22c <USBD_CDC_TransmitPacket>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20000930 	.word	0x20000930

0800b8bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b087      	sub	sp, #28
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b8ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	371c      	adds	r7, #28
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
	...

0800b8e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	6039      	str	r1, [r7, #0]
 800b8ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	2212      	movs	r2, #18
 800b8f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b8f2:	4b03      	ldr	r3, [pc, #12]	; (800b900 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	370c      	adds	r7, #12
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	20000150 	.word	0x20000150

0800b904 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	4603      	mov	r3, r0
 800b90c:	6039      	str	r1, [r7, #0]
 800b90e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	2204      	movs	r2, #4
 800b914:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b916:	4b03      	ldr	r3, [pc, #12]	; (800b924 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b918:	4618      	mov	r0, r3
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	20000170 	.word	0x20000170

0800b928 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	4603      	mov	r3, r0
 800b930:	6039      	str	r1, [r7, #0]
 800b932:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b934:	79fb      	ldrb	r3, [r7, #7]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d105      	bne.n	800b946 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b93a:	683a      	ldr	r2, [r7, #0]
 800b93c:	4907      	ldr	r1, [pc, #28]	; (800b95c <USBD_FS_ProductStrDescriptor+0x34>)
 800b93e:	4808      	ldr	r0, [pc, #32]	; (800b960 <USBD_FS_ProductStrDescriptor+0x38>)
 800b940:	f7ff fd81 	bl	800b446 <USBD_GetString>
 800b944:	e004      	b.n	800b950 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b946:	683a      	ldr	r2, [r7, #0]
 800b948:	4904      	ldr	r1, [pc, #16]	; (800b95c <USBD_FS_ProductStrDescriptor+0x34>)
 800b94a:	4805      	ldr	r0, [pc, #20]	; (800b960 <USBD_FS_ProductStrDescriptor+0x38>)
 800b94c:	f7ff fd7b 	bl	800b446 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b950:	4b02      	ldr	r3, [pc, #8]	; (800b95c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b952:	4618      	mov	r0, r3
 800b954:	3708      	adds	r7, #8
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	20001c00 	.word	0x20001c00
 800b960:	0800cc68 	.word	0x0800cc68

0800b964 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	4603      	mov	r3, r0
 800b96c:	6039      	str	r1, [r7, #0]
 800b96e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	4904      	ldr	r1, [pc, #16]	; (800b984 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b974:	4804      	ldr	r0, [pc, #16]	; (800b988 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b976:	f7ff fd66 	bl	800b446 <USBD_GetString>
  return USBD_StrDesc;
 800b97a:	4b02      	ldr	r3, [pc, #8]	; (800b984 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3708      	adds	r7, #8
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	20001c00 	.word	0x20001c00
 800b988:	0800cc80 	.word	0x0800cc80

0800b98c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	4603      	mov	r3, r0
 800b994:	6039      	str	r1, [r7, #0]
 800b996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	221a      	movs	r2, #26
 800b99c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b99e:	f000 f855 	bl	800ba4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b9a2:	4b02      	ldr	r3, [pc, #8]	; (800b9ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	20000174 	.word	0x20000174

0800b9b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	6039      	str	r1, [r7, #0]
 800b9ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b9bc:	79fb      	ldrb	r3, [r7, #7]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d105      	bne.n	800b9ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9c2:	683a      	ldr	r2, [r7, #0]
 800b9c4:	4907      	ldr	r1, [pc, #28]	; (800b9e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9c6:	4808      	ldr	r0, [pc, #32]	; (800b9e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9c8:	f7ff fd3d 	bl	800b446 <USBD_GetString>
 800b9cc:	e004      	b.n	800b9d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9ce:	683a      	ldr	r2, [r7, #0]
 800b9d0:	4904      	ldr	r1, [pc, #16]	; (800b9e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9d2:	4805      	ldr	r0, [pc, #20]	; (800b9e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9d4:	f7ff fd37 	bl	800b446 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9d8:	4b02      	ldr	r3, [pc, #8]	; (800b9e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	20001c00 	.word	0x20001c00
 800b9e8:	0800cc94 	.word	0x0800cc94

0800b9ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	6039      	str	r1, [r7, #0]
 800b9f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9f8:	79fb      	ldrb	r3, [r7, #7]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d105      	bne.n	800ba0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	4907      	ldr	r1, [pc, #28]	; (800ba20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba02:	4808      	ldr	r0, [pc, #32]	; (800ba24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba04:	f7ff fd1f 	bl	800b446 <USBD_GetString>
 800ba08:	e004      	b.n	800ba14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba0a:	683a      	ldr	r2, [r7, #0]
 800ba0c:	4904      	ldr	r1, [pc, #16]	; (800ba20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba0e:	4805      	ldr	r0, [pc, #20]	; (800ba24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba10:	f7ff fd19 	bl	800b446 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba14:	4b02      	ldr	r3, [pc, #8]	; (800ba20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	20001c00 	.word	0x20001c00
 800ba24:	0800cca0 	.word	0x0800cca0

0800ba28 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	4603      	mov	r3, r0
 800ba30:	6039      	str	r1, [r7, #0]
 800ba32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	220c      	movs	r2, #12
 800ba38:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ba3a:	4b03      	ldr	r3, [pc, #12]	; (800ba48 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	20000164 	.word	0x20000164

0800ba4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ba52:	4b0f      	ldr	r3, [pc, #60]	; (800ba90 <Get_SerialNum+0x44>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba58:	4b0e      	ldr	r3, [pc, #56]	; (800ba94 <Get_SerialNum+0x48>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba5e:	4b0e      	ldr	r3, [pc, #56]	; (800ba98 <Get_SerialNum+0x4c>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4413      	add	r3, r2
 800ba6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d009      	beq.n	800ba86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ba72:	2208      	movs	r2, #8
 800ba74:	4909      	ldr	r1, [pc, #36]	; (800ba9c <Get_SerialNum+0x50>)
 800ba76:	68f8      	ldr	r0, [r7, #12]
 800ba78:	f000 f814 	bl	800baa4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba7c:	2204      	movs	r2, #4
 800ba7e:	4908      	ldr	r1, [pc, #32]	; (800baa0 <Get_SerialNum+0x54>)
 800ba80:	68b8      	ldr	r0, [r7, #8]
 800ba82:	f000 f80f 	bl	800baa4 <IntToUnicode>
  }
}
 800ba86:	bf00      	nop
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	1fff7590 	.word	0x1fff7590
 800ba94:	1fff7594 	.word	0x1fff7594
 800ba98:	1fff7598 	.word	0x1fff7598
 800ba9c:	20000176 	.word	0x20000176
 800baa0:	20000186 	.word	0x20000186

0800baa4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b087      	sub	sp, #28
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	4613      	mov	r3, r2
 800bab0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bab2:	2300      	movs	r3, #0
 800bab4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bab6:	2300      	movs	r3, #0
 800bab8:	75fb      	strb	r3, [r7, #23]
 800baba:	e027      	b.n	800bb0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	0f1b      	lsrs	r3, r3, #28
 800bac0:	2b09      	cmp	r3, #9
 800bac2:	d80b      	bhi.n	800badc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	0f1b      	lsrs	r3, r3, #28
 800bac8:	b2da      	uxtb	r2, r3
 800baca:	7dfb      	ldrb	r3, [r7, #23]
 800bacc:	005b      	lsls	r3, r3, #1
 800bace:	4619      	mov	r1, r3
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	440b      	add	r3, r1
 800bad4:	3230      	adds	r2, #48	; 0x30
 800bad6:	b2d2      	uxtb	r2, r2
 800bad8:	701a      	strb	r2, [r3, #0]
 800bada:	e00a      	b.n	800baf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	0f1b      	lsrs	r3, r3, #28
 800bae0:	b2da      	uxtb	r2, r3
 800bae2:	7dfb      	ldrb	r3, [r7, #23]
 800bae4:	005b      	lsls	r3, r3, #1
 800bae6:	4619      	mov	r1, r3
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	440b      	add	r3, r1
 800baec:	3237      	adds	r2, #55	; 0x37
 800baee:	b2d2      	uxtb	r2, r2
 800baf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	011b      	lsls	r3, r3, #4
 800baf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800baf8:	7dfb      	ldrb	r3, [r7, #23]
 800bafa:	005b      	lsls	r3, r3, #1
 800bafc:	3301      	adds	r3, #1
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	4413      	add	r3, r2
 800bb02:	2200      	movs	r2, #0
 800bb04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb06:	7dfb      	ldrb	r3, [r7, #23]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	75fb      	strb	r3, [r7, #23]
 800bb0c:	7dfa      	ldrb	r2, [r7, #23]
 800bb0e:	79fb      	ldrb	r3, [r7, #7]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d3d3      	bcc.n	800babc <IntToUnicode+0x18>
  }
}
 800bb14:	bf00      	nop
 800bb16:	bf00      	nop
 800bb18:	371c      	adds	r7, #28
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
	...

0800bb24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b0b2      	sub	sp, #200	; 0xc8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb2c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800bb30:	2200      	movs	r2, #0
 800bb32:	601a      	str	r2, [r3, #0]
 800bb34:	605a      	str	r2, [r3, #4]
 800bb36:	609a      	str	r2, [r3, #8]
 800bb38:	60da      	str	r2, [r3, #12]
 800bb3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bb3c:	f107 0318 	add.w	r3, r7, #24
 800bb40:	229c      	movs	r2, #156	; 0x9c
 800bb42:	2100      	movs	r1, #0
 800bb44:	4618      	mov	r0, r3
 800bb46:	f000 fc49 	bl	800c3dc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb52:	d163      	bne.n	800bc1c <HAL_PCD_MspInit+0xf8>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bb54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb58:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bb60:	f107 0318 	add.w	r3, r7, #24
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7f9 fdd5 	bl	8005714 <HAL_RCCEx_PeriphCLKConfig>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d001      	beq.n	800bb74 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800bb70:	f7f5 f90a 	bl	8000d88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb74:	4b2b      	ldr	r3, [pc, #172]	; (800bc24 <HAL_PCD_MspInit+0x100>)
 800bb76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb78:	4a2a      	ldr	r2, [pc, #168]	; (800bc24 <HAL_PCD_MspInit+0x100>)
 800bb7a:	f043 0301 	orr.w	r3, r3, #1
 800bb7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bb80:	4b28      	ldr	r3, [pc, #160]	; (800bc24 <HAL_PCD_MspInit+0x100>)
 800bb82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb84:	f003 0301 	and.w	r3, r3, #1
 800bb88:	617b      	str	r3, [r7, #20]
 800bb8a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_DP_Pin|USB_OTG_DM_Pin;
 800bb8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bb90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb94:	2302      	movs	r3, #2
 800bb96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bba0:	2303      	movs	r3, #3
 800bba2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bba6:	230a      	movs	r3, #10
 800bba8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bbac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bbb6:	f7f7 f983 	bl	8002ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bbba:	4b1a      	ldr	r3, [pc, #104]	; (800bc24 <HAL_PCD_MspInit+0x100>)
 800bbbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbbe:	4a19      	ldr	r2, [pc, #100]	; (800bc24 <HAL_PCD_MspInit+0x100>)
 800bbc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bbc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bbc6:	4b17      	ldr	r3, [pc, #92]	; (800bc24 <HAL_PCD_MspInit+0x100>)
 800bbc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bbce:	613b      	str	r3, [r7, #16]
 800bbd0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bbd2:	4b14      	ldr	r3, [pc, #80]	; (800bc24 <HAL_PCD_MspInit+0x100>)
 800bbd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d114      	bne.n	800bc08 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bbde:	4b11      	ldr	r3, [pc, #68]	; (800bc24 <HAL_PCD_MspInit+0x100>)
 800bbe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbe2:	4a10      	ldr	r2, [pc, #64]	; (800bc24 <HAL_PCD_MspInit+0x100>)
 800bbe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbe8:	6593      	str	r3, [r2, #88]	; 0x58
 800bbea:	4b0e      	ldr	r3, [pc, #56]	; (800bc24 <HAL_PCD_MspInit+0x100>)
 800bbec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbf2:	60fb      	str	r3, [r7, #12]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800bbf6:	f7f8 fec7 	bl	8004988 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800bbfa:	4b0a      	ldr	r3, [pc, #40]	; (800bc24 <HAL_PCD_MspInit+0x100>)
 800bbfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbfe:	4a09      	ldr	r2, [pc, #36]	; (800bc24 <HAL_PCD_MspInit+0x100>)
 800bc00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc04:	6593      	str	r3, [r2, #88]	; 0x58
 800bc06:	e001      	b.n	800bc0c <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800bc08:	f7f8 febe 	bl	8004988 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	2100      	movs	r1, #0
 800bc10:	2043      	movs	r0, #67	; 0x43
 800bc12:	f7f6 fd38 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc16:	2043      	movs	r0, #67	; 0x43
 800bc18:	f7f6 fd51 	bl	80026be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bc1c:	bf00      	nop
 800bc1e:	37c8      	adds	r7, #200	; 0xc8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	40021000 	.word	0x40021000

0800bc28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	4610      	mov	r0, r2
 800bc40:	f7fe fbf0 	bl	800a424 <USBD_LL_SetupStage>
}
 800bc44:	bf00      	nop
 800bc46:	3708      	adds	r7, #8
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	460b      	mov	r3, r1
 800bc56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bc5e:	78fa      	ldrb	r2, [r7, #3]
 800bc60:	6879      	ldr	r1, [r7, #4]
 800bc62:	4613      	mov	r3, r2
 800bc64:	00db      	lsls	r3, r3, #3
 800bc66:	4413      	add	r3, r2
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	440b      	add	r3, r1
 800bc6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	78fb      	ldrb	r3, [r7, #3]
 800bc74:	4619      	mov	r1, r3
 800bc76:	f7fe fc2a 	bl	800a4ce <USBD_LL_DataOutStage>
}
 800bc7a:	bf00      	nop
 800bc7c:	3708      	adds	r7, #8
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b082      	sub	sp, #8
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bc94:	78fa      	ldrb	r2, [r7, #3]
 800bc96:	6879      	ldr	r1, [r7, #4]
 800bc98:	4613      	mov	r3, r2
 800bc9a:	00db      	lsls	r3, r3, #3
 800bc9c:	4413      	add	r3, r2
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	440b      	add	r3, r1
 800bca2:	334c      	adds	r3, #76	; 0x4c
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	78fb      	ldrb	r3, [r7, #3]
 800bca8:	4619      	mov	r1, r3
 800bcaa:	f7fe fc73 	bl	800a594 <USBD_LL_DataInStage>
}
 800bcae:	bf00      	nop
 800bcb0:	3708      	adds	r7, #8
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b082      	sub	sp, #8
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7fe fd87 	bl	800a7d8 <USBD_LL_SOF>
}
 800bcca:	bf00      	nop
 800bccc:	3708      	adds	r7, #8
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b084      	sub	sp, #16
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	d001      	beq.n	800bcea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bce6:	f7f5 f84f 	bl	8000d88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bcf0:	7bfa      	ldrb	r2, [r7, #15]
 800bcf2:	4611      	mov	r1, r2
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7fe fd31 	bl	800a75c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fe fcdd 	bl	800a6c0 <USBD_LL_Reset>
}
 800bd06:	bf00      	nop
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
	...

0800bd10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	6812      	ldr	r2, [r2, #0]
 800bd26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd2a:	f043 0301 	orr.w	r3, r3, #1
 800bd2e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fe fd20 	bl	800a77c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6a1b      	ldr	r3, [r3, #32]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d005      	beq.n	800bd50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd44:	4b04      	ldr	r3, [pc, #16]	; (800bd58 <HAL_PCD_SuspendCallback+0x48>)
 800bd46:	691b      	ldr	r3, [r3, #16]
 800bd48:	4a03      	ldr	r2, [pc, #12]	; (800bd58 <HAL_PCD_SuspendCallback+0x48>)
 800bd4a:	f043 0306 	orr.w	r3, r3, #6
 800bd4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bd50:	bf00      	nop
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	e000ed00 	.word	0xe000ed00

0800bd5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	6812      	ldr	r2, [r2, #0]
 800bd72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd76:	f023 0301 	bic.w	r3, r3, #1
 800bd7a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6a1b      	ldr	r3, [r3, #32]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d007      	beq.n	800bd94 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd84:	4b08      	ldr	r3, [pc, #32]	; (800bda8 <HAL_PCD_ResumeCallback+0x4c>)
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	4a07      	ldr	r2, [pc, #28]	; (800bda8 <HAL_PCD_ResumeCallback+0x4c>)
 800bd8a:	f023 0306 	bic.w	r3, r3, #6
 800bd8e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bd90:	f000 faf4 	bl	800c37c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fe fd04 	bl	800a7a8 <USBD_LL_Resume>
}
 800bda0:	bf00      	nop
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	e000ed00 	.word	0xe000ed00

0800bdac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bdbe:	78fa      	ldrb	r2, [r7, #3]
 800bdc0:	4611      	mov	r1, r2
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7fe fd50 	bl	800a868 <USBD_LL_IsoOUTIncomplete>
}
 800bdc8:	bf00      	nop
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	460b      	mov	r3, r1
 800bdda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bde2:	78fa      	ldrb	r2, [r7, #3]
 800bde4:	4611      	mov	r1, r2
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fe fd18 	bl	800a81c <USBD_LL_IsoINIncomplete>
}
 800bdec:	bf00      	nop
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be02:	4618      	mov	r0, r3
 800be04:	f7fe fd56 	bl	800a8b4 <USBD_LL_DevConnected>
}
 800be08:	bf00      	nop
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fe fd53 	bl	800a8ca <USBD_LL_DevDisconnected>
}
 800be24:	bf00      	nop
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d139      	bne.n	800beb0 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800be3c:	4a1f      	ldr	r2, [pc, #124]	; (800bebc <USBD_LL_Init+0x90>)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a1d      	ldr	r2, [pc, #116]	; (800bebc <USBD_LL_Init+0x90>)
 800be48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800be4c:	4b1b      	ldr	r3, [pc, #108]	; (800bebc <USBD_LL_Init+0x90>)
 800be4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800be52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800be54:	4b19      	ldr	r3, [pc, #100]	; (800bebc <USBD_LL_Init+0x90>)
 800be56:	2206      	movs	r2, #6
 800be58:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800be5a:	4b18      	ldr	r3, [pc, #96]	; (800bebc <USBD_LL_Init+0x90>)
 800be5c:	2202      	movs	r2, #2
 800be5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800be60:	4b16      	ldr	r3, [pc, #88]	; (800bebc <USBD_LL_Init+0x90>)
 800be62:	2200      	movs	r2, #0
 800be64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800be66:	4b15      	ldr	r3, [pc, #84]	; (800bebc <USBD_LL_Init+0x90>)
 800be68:	2200      	movs	r2, #0
 800be6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800be6c:	4b13      	ldr	r3, [pc, #76]	; (800bebc <USBD_LL_Init+0x90>)
 800be6e:	2200      	movs	r2, #0
 800be70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800be72:	4b12      	ldr	r3, [pc, #72]	; (800bebc <USBD_LL_Init+0x90>)
 800be74:	2201      	movs	r2, #1
 800be76:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800be78:	4b10      	ldr	r3, [pc, #64]	; (800bebc <USBD_LL_Init+0x90>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800be7e:	4b0f      	ldr	r3, [pc, #60]	; (800bebc <USBD_LL_Init+0x90>)
 800be80:	2200      	movs	r2, #0
 800be82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800be84:	480d      	ldr	r0, [pc, #52]	; (800bebc <USBD_LL_Init+0x90>)
 800be86:	f7f7 faeb 	bl	8003460 <HAL_PCD_Init>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d001      	beq.n	800be94 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800be90:	f7f4 ff7a 	bl	8000d88 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800be94:	2180      	movs	r1, #128	; 0x80
 800be96:	4809      	ldr	r0, [pc, #36]	; (800bebc <USBD_LL_Init+0x90>)
 800be98:	f7f8 fc6d 	bl	8004776 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800be9c:	2240      	movs	r2, #64	; 0x40
 800be9e:	2100      	movs	r1, #0
 800bea0:	4806      	ldr	r0, [pc, #24]	; (800bebc <USBD_LL_Init+0x90>)
 800bea2:	f7f8 fc21 	bl	80046e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bea6:	2280      	movs	r2, #128	; 0x80
 800bea8:	2101      	movs	r1, #1
 800beaa:	4804      	ldr	r0, [pc, #16]	; (800bebc <USBD_LL_Init+0x90>)
 800beac:	f7f8 fc1c 	bl	80046e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	20001e00 	.word	0x20001e00

0800bec0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bec8:	2300      	movs	r3, #0
 800beca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800becc:	2300      	movs	r3, #0
 800bece:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7f7 fbe6 	bl	80036a8 <HAL_PCD_Start>
 800bedc:	4603      	mov	r3, r0
 800bede:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bee0:	7bbb      	ldrb	r3, [r7, #14]
 800bee2:	2b03      	cmp	r3, #3
 800bee4:	d816      	bhi.n	800bf14 <USBD_LL_Start+0x54>
 800bee6:	a201      	add	r2, pc, #4	; (adr r2, 800beec <USBD_LL_Start+0x2c>)
 800bee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beec:	0800befd 	.word	0x0800befd
 800bef0:	0800bf03 	.word	0x0800bf03
 800bef4:	0800bf09 	.word	0x0800bf09
 800bef8:	0800bf0f 	.word	0x0800bf0f
    case HAL_OK :
      usb_status = USBD_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	73fb      	strb	r3, [r7, #15]
    break;
 800bf00:	e00b      	b.n	800bf1a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf02:	2303      	movs	r3, #3
 800bf04:	73fb      	strb	r3, [r7, #15]
    break;
 800bf06:	e008      	b.n	800bf1a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf0c:	e005      	b.n	800bf1a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	73fb      	strb	r3, [r7, #15]
    break;
 800bf12:	e002      	b.n	800bf1a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800bf14:	2303      	movs	r3, #3
 800bf16:	73fb      	strb	r3, [r7, #15]
    break;
 800bf18:	bf00      	nop
  }
  return usb_status;
 800bf1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	4608      	mov	r0, r1
 800bf2e:	4611      	mov	r1, r2
 800bf30:	461a      	mov	r2, r3
 800bf32:	4603      	mov	r3, r0
 800bf34:	70fb      	strb	r3, [r7, #3]
 800bf36:	460b      	mov	r3, r1
 800bf38:	70bb      	strb	r3, [r7, #2]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf4c:	78bb      	ldrb	r3, [r7, #2]
 800bf4e:	883a      	ldrh	r2, [r7, #0]
 800bf50:	78f9      	ldrb	r1, [r7, #3]
 800bf52:	f7f8 f890 	bl	8004076 <HAL_PCD_EP_Open>
 800bf56:	4603      	mov	r3, r0
 800bf58:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bf5a:	7bbb      	ldrb	r3, [r7, #14]
 800bf5c:	2b03      	cmp	r3, #3
 800bf5e:	d817      	bhi.n	800bf90 <USBD_LL_OpenEP+0x6c>
 800bf60:	a201      	add	r2, pc, #4	; (adr r2, 800bf68 <USBD_LL_OpenEP+0x44>)
 800bf62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf66:	bf00      	nop
 800bf68:	0800bf79 	.word	0x0800bf79
 800bf6c:	0800bf7f 	.word	0x0800bf7f
 800bf70:	0800bf85 	.word	0x0800bf85
 800bf74:	0800bf8b 	.word	0x0800bf8b
    case HAL_OK :
      usb_status = USBD_OK;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf7c:	e00b      	b.n	800bf96 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	73fb      	strb	r3, [r7, #15]
    break;
 800bf82:	e008      	b.n	800bf96 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf84:	2301      	movs	r3, #1
 800bf86:	73fb      	strb	r3, [r7, #15]
    break;
 800bf88:	e005      	b.n	800bf96 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	73fb      	strb	r3, [r7, #15]
    break;
 800bf8e:	e002      	b.n	800bf96 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800bf90:	2303      	movs	r3, #3
 800bf92:	73fb      	strb	r3, [r7, #15]
    break;
 800bf94:	bf00      	nop
  }
  return usb_status;
 800bf96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfac:	2300      	movs	r3, #0
 800bfae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfba:	78fa      	ldrb	r2, [r7, #3]
 800bfbc:	4611      	mov	r1, r2
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7f8 f8c1 	bl	8004146 <HAL_PCD_EP_Close>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bfc8:	7bbb      	ldrb	r3, [r7, #14]
 800bfca:	2b03      	cmp	r3, #3
 800bfcc:	d816      	bhi.n	800bffc <USBD_LL_CloseEP+0x5c>
 800bfce:	a201      	add	r2, pc, #4	; (adr r2, 800bfd4 <USBD_LL_CloseEP+0x34>)
 800bfd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd4:	0800bfe5 	.word	0x0800bfe5
 800bfd8:	0800bfeb 	.word	0x0800bfeb
 800bfdc:	0800bff1 	.word	0x0800bff1
 800bfe0:	0800bff7 	.word	0x0800bff7
    case HAL_OK :
      usb_status = USBD_OK;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	73fb      	strb	r3, [r7, #15]
    break;
 800bfe8:	e00b      	b.n	800c002 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bfea:	2303      	movs	r3, #3
 800bfec:	73fb      	strb	r3, [r7, #15]
    break;
 800bfee:	e008      	b.n	800c002 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bff0:	2301      	movs	r3, #1
 800bff2:	73fb      	strb	r3, [r7, #15]
    break;
 800bff4:	e005      	b.n	800c002 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bff6:	2303      	movs	r3, #3
 800bff8:	73fb      	strb	r3, [r7, #15]
    break;
 800bffa:	e002      	b.n	800c002 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bffc:	2303      	movs	r3, #3
 800bffe:	73fb      	strb	r3, [r7, #15]
    break;
 800c000:	bf00      	nop
  }
  return usb_status;
 800c002:	7bfb      	ldrb	r3, [r7, #15]
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c018:	2300      	movs	r3, #0
 800c01a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c026:	78fa      	ldrb	r2, [r7, #3]
 800c028:	4611      	mov	r1, r2
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7f8 f968 	bl	8004300 <HAL_PCD_EP_SetStall>
 800c030:	4603      	mov	r3, r0
 800c032:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c034:	7bbb      	ldrb	r3, [r7, #14]
 800c036:	2b03      	cmp	r3, #3
 800c038:	d816      	bhi.n	800c068 <USBD_LL_StallEP+0x5c>
 800c03a:	a201      	add	r2, pc, #4	; (adr r2, 800c040 <USBD_LL_StallEP+0x34>)
 800c03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c040:	0800c051 	.word	0x0800c051
 800c044:	0800c057 	.word	0x0800c057
 800c048:	0800c05d 	.word	0x0800c05d
 800c04c:	0800c063 	.word	0x0800c063
    case HAL_OK :
      usb_status = USBD_OK;
 800c050:	2300      	movs	r3, #0
 800c052:	73fb      	strb	r3, [r7, #15]
    break;
 800c054:	e00b      	b.n	800c06e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c056:	2303      	movs	r3, #3
 800c058:	73fb      	strb	r3, [r7, #15]
    break;
 800c05a:	e008      	b.n	800c06e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c05c:	2301      	movs	r3, #1
 800c05e:	73fb      	strb	r3, [r7, #15]
    break;
 800c060:	e005      	b.n	800c06e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c062:	2303      	movs	r3, #3
 800c064:	73fb      	strb	r3, [r7, #15]
    break;
 800c066:	e002      	b.n	800c06e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c068:	2303      	movs	r3, #3
 800c06a:	73fb      	strb	r3, [r7, #15]
    break;
 800c06c:	bf00      	nop
  }
  return usb_status;
 800c06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3710      	adds	r7, #16
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c088:	2300      	movs	r3, #0
 800c08a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c092:	78fa      	ldrb	r2, [r7, #3]
 800c094:	4611      	mov	r1, r2
 800c096:	4618      	mov	r0, r3
 800c098:	f7f8 f994 	bl	80043c4 <HAL_PCD_EP_ClrStall>
 800c09c:	4603      	mov	r3, r0
 800c09e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c0a0:	7bbb      	ldrb	r3, [r7, #14]
 800c0a2:	2b03      	cmp	r3, #3
 800c0a4:	d816      	bhi.n	800c0d4 <USBD_LL_ClearStallEP+0x5c>
 800c0a6:	a201      	add	r2, pc, #4	; (adr r2, 800c0ac <USBD_LL_ClearStallEP+0x34>)
 800c0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ac:	0800c0bd 	.word	0x0800c0bd
 800c0b0:	0800c0c3 	.word	0x0800c0c3
 800c0b4:	0800c0c9 	.word	0x0800c0c9
 800c0b8:	0800c0cf 	.word	0x0800c0cf
    case HAL_OK :
      usb_status = USBD_OK;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	73fb      	strb	r3, [r7, #15]
    break;
 800c0c0:	e00b      	b.n	800c0da <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c0c2:	2303      	movs	r3, #3
 800c0c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c0c6:	e008      	b.n	800c0da <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c0cc:	e005      	b.n	800c0da <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c0ce:	2303      	movs	r3, #3
 800c0d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c0d2:	e002      	b.n	800c0da <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c0d4:	2303      	movs	r3, #3
 800c0d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c0d8:	bf00      	nop
  }
  return usb_status;
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c0f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	da0b      	bge.n	800c118 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c100:	78fb      	ldrb	r3, [r7, #3]
 800c102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c106:	68f9      	ldr	r1, [r7, #12]
 800c108:	4613      	mov	r3, r2
 800c10a:	00db      	lsls	r3, r3, #3
 800c10c:	4413      	add	r3, r2
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	440b      	add	r3, r1
 800c112:	333e      	adds	r3, #62	; 0x3e
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	e00b      	b.n	800c130 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c118:	78fb      	ldrb	r3, [r7, #3]
 800c11a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c11e:	68f9      	ldr	r1, [r7, #12]
 800c120:	4613      	mov	r3, r2
 800c122:	00db      	lsls	r3, r3, #3
 800c124:	4413      	add	r3, r2
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	440b      	add	r3, r1
 800c12a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c12e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c130:	4618      	mov	r0, r3
 800c132:	3714      	adds	r7, #20
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	460b      	mov	r3, r1
 800c146:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c148:	2300      	movs	r3, #0
 800c14a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c156:	78fa      	ldrb	r2, [r7, #3]
 800c158:	4611      	mov	r1, r2
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7f7 ff66 	bl	800402c <HAL_PCD_SetAddress>
 800c160:	4603      	mov	r3, r0
 800c162:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c164:	7bbb      	ldrb	r3, [r7, #14]
 800c166:	2b03      	cmp	r3, #3
 800c168:	d816      	bhi.n	800c198 <USBD_LL_SetUSBAddress+0x5c>
 800c16a:	a201      	add	r2, pc, #4	; (adr r2, 800c170 <USBD_LL_SetUSBAddress+0x34>)
 800c16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c170:	0800c181 	.word	0x0800c181
 800c174:	0800c187 	.word	0x0800c187
 800c178:	0800c18d 	.word	0x0800c18d
 800c17c:	0800c193 	.word	0x0800c193
    case HAL_OK :
      usb_status = USBD_OK;
 800c180:	2300      	movs	r3, #0
 800c182:	73fb      	strb	r3, [r7, #15]
    break;
 800c184:	e00b      	b.n	800c19e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c186:	2303      	movs	r3, #3
 800c188:	73fb      	strb	r3, [r7, #15]
    break;
 800c18a:	e008      	b.n	800c19e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c18c:	2301      	movs	r3, #1
 800c18e:	73fb      	strb	r3, [r7, #15]
    break;
 800c190:	e005      	b.n	800c19e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c192:	2303      	movs	r3, #3
 800c194:	73fb      	strb	r3, [r7, #15]
    break;
 800c196:	e002      	b.n	800c19e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c198:	2303      	movs	r3, #3
 800c19a:	73fb      	strb	r3, [r7, #15]
    break;
 800c19c:	bf00      	nop
  }
  return usb_status;
 800c19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3710      	adds	r7, #16
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b086      	sub	sp, #24
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	607a      	str	r2, [r7, #4]
 800c1b2:	603b      	str	r3, [r7, #0]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c1c6:	7af9      	ldrb	r1, [r7, #11]
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	f7f8 f85b 	bl	8004286 <HAL_PCD_EP_Transmit>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c1d4:	7dbb      	ldrb	r3, [r7, #22]
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	d816      	bhi.n	800c208 <USBD_LL_Transmit+0x60>
 800c1da:	a201      	add	r2, pc, #4	; (adr r2, 800c1e0 <USBD_LL_Transmit+0x38>)
 800c1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e0:	0800c1f1 	.word	0x0800c1f1
 800c1e4:	0800c1f7 	.word	0x0800c1f7
 800c1e8:	0800c1fd 	.word	0x0800c1fd
 800c1ec:	0800c203 	.word	0x0800c203
    case HAL_OK :
      usb_status = USBD_OK;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	75fb      	strb	r3, [r7, #23]
    break;
 800c1f4:	e00b      	b.n	800c20e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	75fb      	strb	r3, [r7, #23]
    break;
 800c1fa:	e008      	b.n	800c20e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	75fb      	strb	r3, [r7, #23]
    break;
 800c200:	e005      	b.n	800c20e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c202:	2303      	movs	r3, #3
 800c204:	75fb      	strb	r3, [r7, #23]
    break;
 800c206:	e002      	b.n	800c20e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c208:	2303      	movs	r3, #3
 800c20a:	75fb      	strb	r3, [r7, #23]
    break;
 800c20c:	bf00      	nop
  }
  return usb_status;
 800c20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3718      	adds	r7, #24
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b086      	sub	sp, #24
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	607a      	str	r2, [r7, #4]
 800c222:	603b      	str	r3, [r7, #0]
 800c224:	460b      	mov	r3, r1
 800c226:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c228:	2300      	movs	r3, #0
 800c22a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c22c:	2300      	movs	r3, #0
 800c22e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c236:	7af9      	ldrb	r1, [r7, #11]
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	f7f7 ffcd 	bl	80041da <HAL_PCD_EP_Receive>
 800c240:	4603      	mov	r3, r0
 800c242:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c244:	7dbb      	ldrb	r3, [r7, #22]
 800c246:	2b03      	cmp	r3, #3
 800c248:	d816      	bhi.n	800c278 <USBD_LL_PrepareReceive+0x60>
 800c24a:	a201      	add	r2, pc, #4	; (adr r2, 800c250 <USBD_LL_PrepareReceive+0x38>)
 800c24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c250:	0800c261 	.word	0x0800c261
 800c254:	0800c267 	.word	0x0800c267
 800c258:	0800c26d 	.word	0x0800c26d
 800c25c:	0800c273 	.word	0x0800c273
    case HAL_OK :
      usb_status = USBD_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	75fb      	strb	r3, [r7, #23]
    break;
 800c264:	e00b      	b.n	800c27e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c266:	2303      	movs	r3, #3
 800c268:	75fb      	strb	r3, [r7, #23]
    break;
 800c26a:	e008      	b.n	800c27e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c26c:	2301      	movs	r3, #1
 800c26e:	75fb      	strb	r3, [r7, #23]
    break;
 800c270:	e005      	b.n	800c27e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c272:	2303      	movs	r3, #3
 800c274:	75fb      	strb	r3, [r7, #23]
    break;
 800c276:	e002      	b.n	800c27e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c278:	2303      	movs	r3, #3
 800c27a:	75fb      	strb	r3, [r7, #23]
    break;
 800c27c:	bf00      	nop
  }
  return usb_status;
 800c27e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c280:	4618      	mov	r0, r3
 800c282:	3718      	adds	r7, #24
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	460b      	mov	r3, r1
 800c292:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c29a:	78fa      	ldrb	r2, [r7, #3]
 800c29c:	4611      	mov	r1, r2
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7f7 ffd9 	bl	8004256 <HAL_PCD_EP_GetRxCount>
 800c2a4:	4603      	mov	r3, r0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3708      	adds	r7, #8
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
	...

0800c2b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c2bc:	78fb      	ldrb	r3, [r7, #3]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d002      	beq.n	800c2c8 <HAL_PCDEx_LPM_Callback+0x18>
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d01f      	beq.n	800c306 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c2c6:	e03b      	b.n	800c340 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6a1b      	ldr	r3, [r3, #32]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d007      	beq.n	800c2e0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c2d0:	f000 f854 	bl	800c37c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c2d4:	4b1c      	ldr	r3, [pc, #112]	; (800c348 <HAL_PCDEx_LPM_Callback+0x98>)
 800c2d6:	691b      	ldr	r3, [r3, #16]
 800c2d8:	4a1b      	ldr	r2, [pc, #108]	; (800c348 <HAL_PCDEx_LPM_Callback+0x98>)
 800c2da:	f023 0306 	bic.w	r3, r3, #6
 800c2de:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	6812      	ldr	r2, [r2, #0]
 800c2ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c2f2:	f023 0301 	bic.w	r3, r3, #1
 800c2f6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7fe fa52 	bl	800a7a8 <USBD_LL_Resume>
    break;
 800c304:	e01c      	b.n	800c340 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	6812      	ldr	r2, [r2, #0]
 800c314:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c318:	f043 0301 	orr.w	r3, r3, #1
 800c31c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c324:	4618      	mov	r0, r3
 800c326:	f7fe fa29 	bl	800a77c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6a1b      	ldr	r3, [r3, #32]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d005      	beq.n	800c33e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c332:	4b05      	ldr	r3, [pc, #20]	; (800c348 <HAL_PCDEx_LPM_Callback+0x98>)
 800c334:	691b      	ldr	r3, [r3, #16]
 800c336:	4a04      	ldr	r2, [pc, #16]	; (800c348 <HAL_PCDEx_LPM_Callback+0x98>)
 800c338:	f043 0306 	orr.w	r3, r3, #6
 800c33c:	6113      	str	r3, [r2, #16]
    break;
 800c33e:	bf00      	nop
}
 800c340:	bf00      	nop
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	e000ed00 	.word	0xe000ed00

0800c34c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c354:	4b03      	ldr	r3, [pc, #12]	; (800c364 <USBD_static_malloc+0x18>)
}
 800c356:	4618      	mov	r0, r3
 800c358:	370c      	adds	r7, #12
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	20000244 	.word	0x20000244

0800c368 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]

}
 800c370:	bf00      	nop
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c380:	f7f4 fca4 	bl	8000ccc <SystemClock_Config>
}
 800c384:	bf00      	nop
 800c386:	bd80      	pop	{r7, pc}

0800c388 <__errno>:
 800c388:	4b01      	ldr	r3, [pc, #4]	; (800c390 <__errno+0x8>)
 800c38a:	6818      	ldr	r0, [r3, #0]
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop
 800c390:	20000190 	.word	0x20000190

0800c394 <__libc_init_array>:
 800c394:	b570      	push	{r4, r5, r6, lr}
 800c396:	4d0d      	ldr	r5, [pc, #52]	; (800c3cc <__libc_init_array+0x38>)
 800c398:	4c0d      	ldr	r4, [pc, #52]	; (800c3d0 <__libc_init_array+0x3c>)
 800c39a:	1b64      	subs	r4, r4, r5
 800c39c:	10a4      	asrs	r4, r4, #2
 800c39e:	2600      	movs	r6, #0
 800c3a0:	42a6      	cmp	r6, r4
 800c3a2:	d109      	bne.n	800c3b8 <__libc_init_array+0x24>
 800c3a4:	4d0b      	ldr	r5, [pc, #44]	; (800c3d4 <__libc_init_array+0x40>)
 800c3a6:	4c0c      	ldr	r4, [pc, #48]	; (800c3d8 <__libc_init_array+0x44>)
 800c3a8:	f000 fc4e 	bl	800cc48 <_init>
 800c3ac:	1b64      	subs	r4, r4, r5
 800c3ae:	10a4      	asrs	r4, r4, #2
 800c3b0:	2600      	movs	r6, #0
 800c3b2:	42a6      	cmp	r6, r4
 800c3b4:	d105      	bne.n	800c3c2 <__libc_init_array+0x2e>
 800c3b6:	bd70      	pop	{r4, r5, r6, pc}
 800c3b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3bc:	4798      	blx	r3
 800c3be:	3601      	adds	r6, #1
 800c3c0:	e7ee      	b.n	800c3a0 <__libc_init_array+0xc>
 800c3c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3c6:	4798      	blx	r3
 800c3c8:	3601      	adds	r6, #1
 800c3ca:	e7f2      	b.n	800c3b2 <__libc_init_array+0x1e>
 800c3cc:	0800cd24 	.word	0x0800cd24
 800c3d0:	0800cd24 	.word	0x0800cd24
 800c3d4:	0800cd24 	.word	0x0800cd24
 800c3d8:	0800cd28 	.word	0x0800cd28

0800c3dc <memset>:
 800c3dc:	4402      	add	r2, r0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d100      	bne.n	800c3e6 <memset+0xa>
 800c3e4:	4770      	bx	lr
 800c3e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c3ea:	e7f9      	b.n	800c3e0 <memset+0x4>

0800c3ec <siprintf>:
 800c3ec:	b40e      	push	{r1, r2, r3}
 800c3ee:	b500      	push	{lr}
 800c3f0:	b09c      	sub	sp, #112	; 0x70
 800c3f2:	ab1d      	add	r3, sp, #116	; 0x74
 800c3f4:	9002      	str	r0, [sp, #8]
 800c3f6:	9006      	str	r0, [sp, #24]
 800c3f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c3fc:	4809      	ldr	r0, [pc, #36]	; (800c424 <siprintf+0x38>)
 800c3fe:	9107      	str	r1, [sp, #28]
 800c400:	9104      	str	r1, [sp, #16]
 800c402:	4909      	ldr	r1, [pc, #36]	; (800c428 <siprintf+0x3c>)
 800c404:	f853 2b04 	ldr.w	r2, [r3], #4
 800c408:	9105      	str	r1, [sp, #20]
 800c40a:	6800      	ldr	r0, [r0, #0]
 800c40c:	9301      	str	r3, [sp, #4]
 800c40e:	a902      	add	r1, sp, #8
 800c410:	f000 f868 	bl	800c4e4 <_svfiprintf_r>
 800c414:	9b02      	ldr	r3, [sp, #8]
 800c416:	2200      	movs	r2, #0
 800c418:	701a      	strb	r2, [r3, #0]
 800c41a:	b01c      	add	sp, #112	; 0x70
 800c41c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c420:	b003      	add	sp, #12
 800c422:	4770      	bx	lr
 800c424:	20000190 	.word	0x20000190
 800c428:	ffff0208 	.word	0xffff0208

0800c42c <__ssputs_r>:
 800c42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c430:	688e      	ldr	r6, [r1, #8]
 800c432:	429e      	cmp	r6, r3
 800c434:	4682      	mov	sl, r0
 800c436:	460c      	mov	r4, r1
 800c438:	4690      	mov	r8, r2
 800c43a:	461f      	mov	r7, r3
 800c43c:	d838      	bhi.n	800c4b0 <__ssputs_r+0x84>
 800c43e:	898a      	ldrh	r2, [r1, #12]
 800c440:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c444:	d032      	beq.n	800c4ac <__ssputs_r+0x80>
 800c446:	6825      	ldr	r5, [r4, #0]
 800c448:	6909      	ldr	r1, [r1, #16]
 800c44a:	eba5 0901 	sub.w	r9, r5, r1
 800c44e:	6965      	ldr	r5, [r4, #20]
 800c450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c458:	3301      	adds	r3, #1
 800c45a:	444b      	add	r3, r9
 800c45c:	106d      	asrs	r5, r5, #1
 800c45e:	429d      	cmp	r5, r3
 800c460:	bf38      	it	cc
 800c462:	461d      	movcc	r5, r3
 800c464:	0553      	lsls	r3, r2, #21
 800c466:	d531      	bpl.n	800c4cc <__ssputs_r+0xa0>
 800c468:	4629      	mov	r1, r5
 800c46a:	f000 fb47 	bl	800cafc <_malloc_r>
 800c46e:	4606      	mov	r6, r0
 800c470:	b950      	cbnz	r0, 800c488 <__ssputs_r+0x5c>
 800c472:	230c      	movs	r3, #12
 800c474:	f8ca 3000 	str.w	r3, [sl]
 800c478:	89a3      	ldrh	r3, [r4, #12]
 800c47a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c47e:	81a3      	strh	r3, [r4, #12]
 800c480:	f04f 30ff 	mov.w	r0, #4294967295
 800c484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c488:	6921      	ldr	r1, [r4, #16]
 800c48a:	464a      	mov	r2, r9
 800c48c:	f000 fabe 	bl	800ca0c <memcpy>
 800c490:	89a3      	ldrh	r3, [r4, #12]
 800c492:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c49a:	81a3      	strh	r3, [r4, #12]
 800c49c:	6126      	str	r6, [r4, #16]
 800c49e:	6165      	str	r5, [r4, #20]
 800c4a0:	444e      	add	r6, r9
 800c4a2:	eba5 0509 	sub.w	r5, r5, r9
 800c4a6:	6026      	str	r6, [r4, #0]
 800c4a8:	60a5      	str	r5, [r4, #8]
 800c4aa:	463e      	mov	r6, r7
 800c4ac:	42be      	cmp	r6, r7
 800c4ae:	d900      	bls.n	800c4b2 <__ssputs_r+0x86>
 800c4b0:	463e      	mov	r6, r7
 800c4b2:	4632      	mov	r2, r6
 800c4b4:	6820      	ldr	r0, [r4, #0]
 800c4b6:	4641      	mov	r1, r8
 800c4b8:	f000 fab6 	bl	800ca28 <memmove>
 800c4bc:	68a3      	ldr	r3, [r4, #8]
 800c4be:	6822      	ldr	r2, [r4, #0]
 800c4c0:	1b9b      	subs	r3, r3, r6
 800c4c2:	4432      	add	r2, r6
 800c4c4:	60a3      	str	r3, [r4, #8]
 800c4c6:	6022      	str	r2, [r4, #0]
 800c4c8:	2000      	movs	r0, #0
 800c4ca:	e7db      	b.n	800c484 <__ssputs_r+0x58>
 800c4cc:	462a      	mov	r2, r5
 800c4ce:	f000 fb6f 	bl	800cbb0 <_realloc_r>
 800c4d2:	4606      	mov	r6, r0
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d1e1      	bne.n	800c49c <__ssputs_r+0x70>
 800c4d8:	6921      	ldr	r1, [r4, #16]
 800c4da:	4650      	mov	r0, sl
 800c4dc:	f000 fabe 	bl	800ca5c <_free_r>
 800c4e0:	e7c7      	b.n	800c472 <__ssputs_r+0x46>
	...

0800c4e4 <_svfiprintf_r>:
 800c4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e8:	4698      	mov	r8, r3
 800c4ea:	898b      	ldrh	r3, [r1, #12]
 800c4ec:	061b      	lsls	r3, r3, #24
 800c4ee:	b09d      	sub	sp, #116	; 0x74
 800c4f0:	4607      	mov	r7, r0
 800c4f2:	460d      	mov	r5, r1
 800c4f4:	4614      	mov	r4, r2
 800c4f6:	d50e      	bpl.n	800c516 <_svfiprintf_r+0x32>
 800c4f8:	690b      	ldr	r3, [r1, #16]
 800c4fa:	b963      	cbnz	r3, 800c516 <_svfiprintf_r+0x32>
 800c4fc:	2140      	movs	r1, #64	; 0x40
 800c4fe:	f000 fafd 	bl	800cafc <_malloc_r>
 800c502:	6028      	str	r0, [r5, #0]
 800c504:	6128      	str	r0, [r5, #16]
 800c506:	b920      	cbnz	r0, 800c512 <_svfiprintf_r+0x2e>
 800c508:	230c      	movs	r3, #12
 800c50a:	603b      	str	r3, [r7, #0]
 800c50c:	f04f 30ff 	mov.w	r0, #4294967295
 800c510:	e0d1      	b.n	800c6b6 <_svfiprintf_r+0x1d2>
 800c512:	2340      	movs	r3, #64	; 0x40
 800c514:	616b      	str	r3, [r5, #20]
 800c516:	2300      	movs	r3, #0
 800c518:	9309      	str	r3, [sp, #36]	; 0x24
 800c51a:	2320      	movs	r3, #32
 800c51c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c520:	f8cd 800c 	str.w	r8, [sp, #12]
 800c524:	2330      	movs	r3, #48	; 0x30
 800c526:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c6d0 <_svfiprintf_r+0x1ec>
 800c52a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c52e:	f04f 0901 	mov.w	r9, #1
 800c532:	4623      	mov	r3, r4
 800c534:	469a      	mov	sl, r3
 800c536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c53a:	b10a      	cbz	r2, 800c540 <_svfiprintf_r+0x5c>
 800c53c:	2a25      	cmp	r2, #37	; 0x25
 800c53e:	d1f9      	bne.n	800c534 <_svfiprintf_r+0x50>
 800c540:	ebba 0b04 	subs.w	fp, sl, r4
 800c544:	d00b      	beq.n	800c55e <_svfiprintf_r+0x7a>
 800c546:	465b      	mov	r3, fp
 800c548:	4622      	mov	r2, r4
 800c54a:	4629      	mov	r1, r5
 800c54c:	4638      	mov	r0, r7
 800c54e:	f7ff ff6d 	bl	800c42c <__ssputs_r>
 800c552:	3001      	adds	r0, #1
 800c554:	f000 80aa 	beq.w	800c6ac <_svfiprintf_r+0x1c8>
 800c558:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c55a:	445a      	add	r2, fp
 800c55c:	9209      	str	r2, [sp, #36]	; 0x24
 800c55e:	f89a 3000 	ldrb.w	r3, [sl]
 800c562:	2b00      	cmp	r3, #0
 800c564:	f000 80a2 	beq.w	800c6ac <_svfiprintf_r+0x1c8>
 800c568:	2300      	movs	r3, #0
 800c56a:	f04f 32ff 	mov.w	r2, #4294967295
 800c56e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c572:	f10a 0a01 	add.w	sl, sl, #1
 800c576:	9304      	str	r3, [sp, #16]
 800c578:	9307      	str	r3, [sp, #28]
 800c57a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c57e:	931a      	str	r3, [sp, #104]	; 0x68
 800c580:	4654      	mov	r4, sl
 800c582:	2205      	movs	r2, #5
 800c584:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c588:	4851      	ldr	r0, [pc, #324]	; (800c6d0 <_svfiprintf_r+0x1ec>)
 800c58a:	f7f3 fe39 	bl	8000200 <memchr>
 800c58e:	9a04      	ldr	r2, [sp, #16]
 800c590:	b9d8      	cbnz	r0, 800c5ca <_svfiprintf_r+0xe6>
 800c592:	06d0      	lsls	r0, r2, #27
 800c594:	bf44      	itt	mi
 800c596:	2320      	movmi	r3, #32
 800c598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c59c:	0711      	lsls	r1, r2, #28
 800c59e:	bf44      	itt	mi
 800c5a0:	232b      	movmi	r3, #43	; 0x2b
 800c5a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c5aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c5ac:	d015      	beq.n	800c5da <_svfiprintf_r+0xf6>
 800c5ae:	9a07      	ldr	r2, [sp, #28]
 800c5b0:	4654      	mov	r4, sl
 800c5b2:	2000      	movs	r0, #0
 800c5b4:	f04f 0c0a 	mov.w	ip, #10
 800c5b8:	4621      	mov	r1, r4
 800c5ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5be:	3b30      	subs	r3, #48	; 0x30
 800c5c0:	2b09      	cmp	r3, #9
 800c5c2:	d94e      	bls.n	800c662 <_svfiprintf_r+0x17e>
 800c5c4:	b1b0      	cbz	r0, 800c5f4 <_svfiprintf_r+0x110>
 800c5c6:	9207      	str	r2, [sp, #28]
 800c5c8:	e014      	b.n	800c5f4 <_svfiprintf_r+0x110>
 800c5ca:	eba0 0308 	sub.w	r3, r0, r8
 800c5ce:	fa09 f303 	lsl.w	r3, r9, r3
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	9304      	str	r3, [sp, #16]
 800c5d6:	46a2      	mov	sl, r4
 800c5d8:	e7d2      	b.n	800c580 <_svfiprintf_r+0x9c>
 800c5da:	9b03      	ldr	r3, [sp, #12]
 800c5dc:	1d19      	adds	r1, r3, #4
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	9103      	str	r1, [sp, #12]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	bfbb      	ittet	lt
 800c5e6:	425b      	neglt	r3, r3
 800c5e8:	f042 0202 	orrlt.w	r2, r2, #2
 800c5ec:	9307      	strge	r3, [sp, #28]
 800c5ee:	9307      	strlt	r3, [sp, #28]
 800c5f0:	bfb8      	it	lt
 800c5f2:	9204      	strlt	r2, [sp, #16]
 800c5f4:	7823      	ldrb	r3, [r4, #0]
 800c5f6:	2b2e      	cmp	r3, #46	; 0x2e
 800c5f8:	d10c      	bne.n	800c614 <_svfiprintf_r+0x130>
 800c5fa:	7863      	ldrb	r3, [r4, #1]
 800c5fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c5fe:	d135      	bne.n	800c66c <_svfiprintf_r+0x188>
 800c600:	9b03      	ldr	r3, [sp, #12]
 800c602:	1d1a      	adds	r2, r3, #4
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	9203      	str	r2, [sp, #12]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	bfb8      	it	lt
 800c60c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c610:	3402      	adds	r4, #2
 800c612:	9305      	str	r3, [sp, #20]
 800c614:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c6e0 <_svfiprintf_r+0x1fc>
 800c618:	7821      	ldrb	r1, [r4, #0]
 800c61a:	2203      	movs	r2, #3
 800c61c:	4650      	mov	r0, sl
 800c61e:	f7f3 fdef 	bl	8000200 <memchr>
 800c622:	b140      	cbz	r0, 800c636 <_svfiprintf_r+0x152>
 800c624:	2340      	movs	r3, #64	; 0x40
 800c626:	eba0 000a 	sub.w	r0, r0, sl
 800c62a:	fa03 f000 	lsl.w	r0, r3, r0
 800c62e:	9b04      	ldr	r3, [sp, #16]
 800c630:	4303      	orrs	r3, r0
 800c632:	3401      	adds	r4, #1
 800c634:	9304      	str	r3, [sp, #16]
 800c636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c63a:	4826      	ldr	r0, [pc, #152]	; (800c6d4 <_svfiprintf_r+0x1f0>)
 800c63c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c640:	2206      	movs	r2, #6
 800c642:	f7f3 fddd 	bl	8000200 <memchr>
 800c646:	2800      	cmp	r0, #0
 800c648:	d038      	beq.n	800c6bc <_svfiprintf_r+0x1d8>
 800c64a:	4b23      	ldr	r3, [pc, #140]	; (800c6d8 <_svfiprintf_r+0x1f4>)
 800c64c:	bb1b      	cbnz	r3, 800c696 <_svfiprintf_r+0x1b2>
 800c64e:	9b03      	ldr	r3, [sp, #12]
 800c650:	3307      	adds	r3, #7
 800c652:	f023 0307 	bic.w	r3, r3, #7
 800c656:	3308      	adds	r3, #8
 800c658:	9303      	str	r3, [sp, #12]
 800c65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c65c:	4433      	add	r3, r6
 800c65e:	9309      	str	r3, [sp, #36]	; 0x24
 800c660:	e767      	b.n	800c532 <_svfiprintf_r+0x4e>
 800c662:	fb0c 3202 	mla	r2, ip, r2, r3
 800c666:	460c      	mov	r4, r1
 800c668:	2001      	movs	r0, #1
 800c66a:	e7a5      	b.n	800c5b8 <_svfiprintf_r+0xd4>
 800c66c:	2300      	movs	r3, #0
 800c66e:	3401      	adds	r4, #1
 800c670:	9305      	str	r3, [sp, #20]
 800c672:	4619      	mov	r1, r3
 800c674:	f04f 0c0a 	mov.w	ip, #10
 800c678:	4620      	mov	r0, r4
 800c67a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c67e:	3a30      	subs	r2, #48	; 0x30
 800c680:	2a09      	cmp	r2, #9
 800c682:	d903      	bls.n	800c68c <_svfiprintf_r+0x1a8>
 800c684:	2b00      	cmp	r3, #0
 800c686:	d0c5      	beq.n	800c614 <_svfiprintf_r+0x130>
 800c688:	9105      	str	r1, [sp, #20]
 800c68a:	e7c3      	b.n	800c614 <_svfiprintf_r+0x130>
 800c68c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c690:	4604      	mov	r4, r0
 800c692:	2301      	movs	r3, #1
 800c694:	e7f0      	b.n	800c678 <_svfiprintf_r+0x194>
 800c696:	ab03      	add	r3, sp, #12
 800c698:	9300      	str	r3, [sp, #0]
 800c69a:	462a      	mov	r2, r5
 800c69c:	4b0f      	ldr	r3, [pc, #60]	; (800c6dc <_svfiprintf_r+0x1f8>)
 800c69e:	a904      	add	r1, sp, #16
 800c6a0:	4638      	mov	r0, r7
 800c6a2:	f3af 8000 	nop.w
 800c6a6:	1c42      	adds	r2, r0, #1
 800c6a8:	4606      	mov	r6, r0
 800c6aa:	d1d6      	bne.n	800c65a <_svfiprintf_r+0x176>
 800c6ac:	89ab      	ldrh	r3, [r5, #12]
 800c6ae:	065b      	lsls	r3, r3, #25
 800c6b0:	f53f af2c 	bmi.w	800c50c <_svfiprintf_r+0x28>
 800c6b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6b6:	b01d      	add	sp, #116	; 0x74
 800c6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6bc:	ab03      	add	r3, sp, #12
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	462a      	mov	r2, r5
 800c6c2:	4b06      	ldr	r3, [pc, #24]	; (800c6dc <_svfiprintf_r+0x1f8>)
 800c6c4:	a904      	add	r1, sp, #16
 800c6c6:	4638      	mov	r0, r7
 800c6c8:	f000 f87a 	bl	800c7c0 <_printf_i>
 800c6cc:	e7eb      	b.n	800c6a6 <_svfiprintf_r+0x1c2>
 800c6ce:	bf00      	nop
 800c6d0:	0800ccf0 	.word	0x0800ccf0
 800c6d4:	0800ccfa 	.word	0x0800ccfa
 800c6d8:	00000000 	.word	0x00000000
 800c6dc:	0800c42d 	.word	0x0800c42d
 800c6e0:	0800ccf6 	.word	0x0800ccf6

0800c6e4 <_printf_common>:
 800c6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6e8:	4616      	mov	r6, r2
 800c6ea:	4699      	mov	r9, r3
 800c6ec:	688a      	ldr	r2, [r1, #8]
 800c6ee:	690b      	ldr	r3, [r1, #16]
 800c6f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	bfb8      	it	lt
 800c6f8:	4613      	movlt	r3, r2
 800c6fa:	6033      	str	r3, [r6, #0]
 800c6fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c700:	4607      	mov	r7, r0
 800c702:	460c      	mov	r4, r1
 800c704:	b10a      	cbz	r2, 800c70a <_printf_common+0x26>
 800c706:	3301      	adds	r3, #1
 800c708:	6033      	str	r3, [r6, #0]
 800c70a:	6823      	ldr	r3, [r4, #0]
 800c70c:	0699      	lsls	r1, r3, #26
 800c70e:	bf42      	ittt	mi
 800c710:	6833      	ldrmi	r3, [r6, #0]
 800c712:	3302      	addmi	r3, #2
 800c714:	6033      	strmi	r3, [r6, #0]
 800c716:	6825      	ldr	r5, [r4, #0]
 800c718:	f015 0506 	ands.w	r5, r5, #6
 800c71c:	d106      	bne.n	800c72c <_printf_common+0x48>
 800c71e:	f104 0a19 	add.w	sl, r4, #25
 800c722:	68e3      	ldr	r3, [r4, #12]
 800c724:	6832      	ldr	r2, [r6, #0]
 800c726:	1a9b      	subs	r3, r3, r2
 800c728:	42ab      	cmp	r3, r5
 800c72a:	dc26      	bgt.n	800c77a <_printf_common+0x96>
 800c72c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c730:	1e13      	subs	r3, r2, #0
 800c732:	6822      	ldr	r2, [r4, #0]
 800c734:	bf18      	it	ne
 800c736:	2301      	movne	r3, #1
 800c738:	0692      	lsls	r2, r2, #26
 800c73a:	d42b      	bmi.n	800c794 <_printf_common+0xb0>
 800c73c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c740:	4649      	mov	r1, r9
 800c742:	4638      	mov	r0, r7
 800c744:	47c0      	blx	r8
 800c746:	3001      	adds	r0, #1
 800c748:	d01e      	beq.n	800c788 <_printf_common+0xa4>
 800c74a:	6823      	ldr	r3, [r4, #0]
 800c74c:	68e5      	ldr	r5, [r4, #12]
 800c74e:	6832      	ldr	r2, [r6, #0]
 800c750:	f003 0306 	and.w	r3, r3, #6
 800c754:	2b04      	cmp	r3, #4
 800c756:	bf08      	it	eq
 800c758:	1aad      	subeq	r5, r5, r2
 800c75a:	68a3      	ldr	r3, [r4, #8]
 800c75c:	6922      	ldr	r2, [r4, #16]
 800c75e:	bf0c      	ite	eq
 800c760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c764:	2500      	movne	r5, #0
 800c766:	4293      	cmp	r3, r2
 800c768:	bfc4      	itt	gt
 800c76a:	1a9b      	subgt	r3, r3, r2
 800c76c:	18ed      	addgt	r5, r5, r3
 800c76e:	2600      	movs	r6, #0
 800c770:	341a      	adds	r4, #26
 800c772:	42b5      	cmp	r5, r6
 800c774:	d11a      	bne.n	800c7ac <_printf_common+0xc8>
 800c776:	2000      	movs	r0, #0
 800c778:	e008      	b.n	800c78c <_printf_common+0xa8>
 800c77a:	2301      	movs	r3, #1
 800c77c:	4652      	mov	r2, sl
 800c77e:	4649      	mov	r1, r9
 800c780:	4638      	mov	r0, r7
 800c782:	47c0      	blx	r8
 800c784:	3001      	adds	r0, #1
 800c786:	d103      	bne.n	800c790 <_printf_common+0xac>
 800c788:	f04f 30ff 	mov.w	r0, #4294967295
 800c78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c790:	3501      	adds	r5, #1
 800c792:	e7c6      	b.n	800c722 <_printf_common+0x3e>
 800c794:	18e1      	adds	r1, r4, r3
 800c796:	1c5a      	adds	r2, r3, #1
 800c798:	2030      	movs	r0, #48	; 0x30
 800c79a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c79e:	4422      	add	r2, r4
 800c7a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c7a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c7a8:	3302      	adds	r3, #2
 800c7aa:	e7c7      	b.n	800c73c <_printf_common+0x58>
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	4622      	mov	r2, r4
 800c7b0:	4649      	mov	r1, r9
 800c7b2:	4638      	mov	r0, r7
 800c7b4:	47c0      	blx	r8
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	d0e6      	beq.n	800c788 <_printf_common+0xa4>
 800c7ba:	3601      	adds	r6, #1
 800c7bc:	e7d9      	b.n	800c772 <_printf_common+0x8e>
	...

0800c7c0 <_printf_i>:
 800c7c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c4:	460c      	mov	r4, r1
 800c7c6:	4691      	mov	r9, r2
 800c7c8:	7e27      	ldrb	r7, [r4, #24]
 800c7ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c7cc:	2f78      	cmp	r7, #120	; 0x78
 800c7ce:	4680      	mov	r8, r0
 800c7d0:	469a      	mov	sl, r3
 800c7d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7d6:	d807      	bhi.n	800c7e8 <_printf_i+0x28>
 800c7d8:	2f62      	cmp	r7, #98	; 0x62
 800c7da:	d80a      	bhi.n	800c7f2 <_printf_i+0x32>
 800c7dc:	2f00      	cmp	r7, #0
 800c7de:	f000 80d8 	beq.w	800c992 <_printf_i+0x1d2>
 800c7e2:	2f58      	cmp	r7, #88	; 0x58
 800c7e4:	f000 80a3 	beq.w	800c92e <_printf_i+0x16e>
 800c7e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c7ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c7f0:	e03a      	b.n	800c868 <_printf_i+0xa8>
 800c7f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c7f6:	2b15      	cmp	r3, #21
 800c7f8:	d8f6      	bhi.n	800c7e8 <_printf_i+0x28>
 800c7fa:	a001      	add	r0, pc, #4	; (adr r0, 800c800 <_printf_i+0x40>)
 800c7fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c800:	0800c859 	.word	0x0800c859
 800c804:	0800c86d 	.word	0x0800c86d
 800c808:	0800c7e9 	.word	0x0800c7e9
 800c80c:	0800c7e9 	.word	0x0800c7e9
 800c810:	0800c7e9 	.word	0x0800c7e9
 800c814:	0800c7e9 	.word	0x0800c7e9
 800c818:	0800c86d 	.word	0x0800c86d
 800c81c:	0800c7e9 	.word	0x0800c7e9
 800c820:	0800c7e9 	.word	0x0800c7e9
 800c824:	0800c7e9 	.word	0x0800c7e9
 800c828:	0800c7e9 	.word	0x0800c7e9
 800c82c:	0800c979 	.word	0x0800c979
 800c830:	0800c89d 	.word	0x0800c89d
 800c834:	0800c95b 	.word	0x0800c95b
 800c838:	0800c7e9 	.word	0x0800c7e9
 800c83c:	0800c7e9 	.word	0x0800c7e9
 800c840:	0800c99b 	.word	0x0800c99b
 800c844:	0800c7e9 	.word	0x0800c7e9
 800c848:	0800c89d 	.word	0x0800c89d
 800c84c:	0800c7e9 	.word	0x0800c7e9
 800c850:	0800c7e9 	.word	0x0800c7e9
 800c854:	0800c963 	.word	0x0800c963
 800c858:	680b      	ldr	r3, [r1, #0]
 800c85a:	1d1a      	adds	r2, r3, #4
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	600a      	str	r2, [r1, #0]
 800c860:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c864:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c868:	2301      	movs	r3, #1
 800c86a:	e0a3      	b.n	800c9b4 <_printf_i+0x1f4>
 800c86c:	6825      	ldr	r5, [r4, #0]
 800c86e:	6808      	ldr	r0, [r1, #0]
 800c870:	062e      	lsls	r6, r5, #24
 800c872:	f100 0304 	add.w	r3, r0, #4
 800c876:	d50a      	bpl.n	800c88e <_printf_i+0xce>
 800c878:	6805      	ldr	r5, [r0, #0]
 800c87a:	600b      	str	r3, [r1, #0]
 800c87c:	2d00      	cmp	r5, #0
 800c87e:	da03      	bge.n	800c888 <_printf_i+0xc8>
 800c880:	232d      	movs	r3, #45	; 0x2d
 800c882:	426d      	negs	r5, r5
 800c884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c888:	485e      	ldr	r0, [pc, #376]	; (800ca04 <_printf_i+0x244>)
 800c88a:	230a      	movs	r3, #10
 800c88c:	e019      	b.n	800c8c2 <_printf_i+0x102>
 800c88e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c892:	6805      	ldr	r5, [r0, #0]
 800c894:	600b      	str	r3, [r1, #0]
 800c896:	bf18      	it	ne
 800c898:	b22d      	sxthne	r5, r5
 800c89a:	e7ef      	b.n	800c87c <_printf_i+0xbc>
 800c89c:	680b      	ldr	r3, [r1, #0]
 800c89e:	6825      	ldr	r5, [r4, #0]
 800c8a0:	1d18      	adds	r0, r3, #4
 800c8a2:	6008      	str	r0, [r1, #0]
 800c8a4:	0628      	lsls	r0, r5, #24
 800c8a6:	d501      	bpl.n	800c8ac <_printf_i+0xec>
 800c8a8:	681d      	ldr	r5, [r3, #0]
 800c8aa:	e002      	b.n	800c8b2 <_printf_i+0xf2>
 800c8ac:	0669      	lsls	r1, r5, #25
 800c8ae:	d5fb      	bpl.n	800c8a8 <_printf_i+0xe8>
 800c8b0:	881d      	ldrh	r5, [r3, #0]
 800c8b2:	4854      	ldr	r0, [pc, #336]	; (800ca04 <_printf_i+0x244>)
 800c8b4:	2f6f      	cmp	r7, #111	; 0x6f
 800c8b6:	bf0c      	ite	eq
 800c8b8:	2308      	moveq	r3, #8
 800c8ba:	230a      	movne	r3, #10
 800c8bc:	2100      	movs	r1, #0
 800c8be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c8c2:	6866      	ldr	r6, [r4, #4]
 800c8c4:	60a6      	str	r6, [r4, #8]
 800c8c6:	2e00      	cmp	r6, #0
 800c8c8:	bfa2      	ittt	ge
 800c8ca:	6821      	ldrge	r1, [r4, #0]
 800c8cc:	f021 0104 	bicge.w	r1, r1, #4
 800c8d0:	6021      	strge	r1, [r4, #0]
 800c8d2:	b90d      	cbnz	r5, 800c8d8 <_printf_i+0x118>
 800c8d4:	2e00      	cmp	r6, #0
 800c8d6:	d04d      	beq.n	800c974 <_printf_i+0x1b4>
 800c8d8:	4616      	mov	r6, r2
 800c8da:	fbb5 f1f3 	udiv	r1, r5, r3
 800c8de:	fb03 5711 	mls	r7, r3, r1, r5
 800c8e2:	5dc7      	ldrb	r7, [r0, r7]
 800c8e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c8e8:	462f      	mov	r7, r5
 800c8ea:	42bb      	cmp	r3, r7
 800c8ec:	460d      	mov	r5, r1
 800c8ee:	d9f4      	bls.n	800c8da <_printf_i+0x11a>
 800c8f0:	2b08      	cmp	r3, #8
 800c8f2:	d10b      	bne.n	800c90c <_printf_i+0x14c>
 800c8f4:	6823      	ldr	r3, [r4, #0]
 800c8f6:	07df      	lsls	r7, r3, #31
 800c8f8:	d508      	bpl.n	800c90c <_printf_i+0x14c>
 800c8fa:	6923      	ldr	r3, [r4, #16]
 800c8fc:	6861      	ldr	r1, [r4, #4]
 800c8fe:	4299      	cmp	r1, r3
 800c900:	bfde      	ittt	le
 800c902:	2330      	movle	r3, #48	; 0x30
 800c904:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c908:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c90c:	1b92      	subs	r2, r2, r6
 800c90e:	6122      	str	r2, [r4, #16]
 800c910:	f8cd a000 	str.w	sl, [sp]
 800c914:	464b      	mov	r3, r9
 800c916:	aa03      	add	r2, sp, #12
 800c918:	4621      	mov	r1, r4
 800c91a:	4640      	mov	r0, r8
 800c91c:	f7ff fee2 	bl	800c6e4 <_printf_common>
 800c920:	3001      	adds	r0, #1
 800c922:	d14c      	bne.n	800c9be <_printf_i+0x1fe>
 800c924:	f04f 30ff 	mov.w	r0, #4294967295
 800c928:	b004      	add	sp, #16
 800c92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c92e:	4835      	ldr	r0, [pc, #212]	; (800ca04 <_printf_i+0x244>)
 800c930:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c934:	6823      	ldr	r3, [r4, #0]
 800c936:	680e      	ldr	r6, [r1, #0]
 800c938:	061f      	lsls	r7, r3, #24
 800c93a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c93e:	600e      	str	r6, [r1, #0]
 800c940:	d514      	bpl.n	800c96c <_printf_i+0x1ac>
 800c942:	07d9      	lsls	r1, r3, #31
 800c944:	bf44      	itt	mi
 800c946:	f043 0320 	orrmi.w	r3, r3, #32
 800c94a:	6023      	strmi	r3, [r4, #0]
 800c94c:	b91d      	cbnz	r5, 800c956 <_printf_i+0x196>
 800c94e:	6823      	ldr	r3, [r4, #0]
 800c950:	f023 0320 	bic.w	r3, r3, #32
 800c954:	6023      	str	r3, [r4, #0]
 800c956:	2310      	movs	r3, #16
 800c958:	e7b0      	b.n	800c8bc <_printf_i+0xfc>
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	f043 0320 	orr.w	r3, r3, #32
 800c960:	6023      	str	r3, [r4, #0]
 800c962:	2378      	movs	r3, #120	; 0x78
 800c964:	4828      	ldr	r0, [pc, #160]	; (800ca08 <_printf_i+0x248>)
 800c966:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c96a:	e7e3      	b.n	800c934 <_printf_i+0x174>
 800c96c:	065e      	lsls	r6, r3, #25
 800c96e:	bf48      	it	mi
 800c970:	b2ad      	uxthmi	r5, r5
 800c972:	e7e6      	b.n	800c942 <_printf_i+0x182>
 800c974:	4616      	mov	r6, r2
 800c976:	e7bb      	b.n	800c8f0 <_printf_i+0x130>
 800c978:	680b      	ldr	r3, [r1, #0]
 800c97a:	6826      	ldr	r6, [r4, #0]
 800c97c:	6960      	ldr	r0, [r4, #20]
 800c97e:	1d1d      	adds	r5, r3, #4
 800c980:	600d      	str	r5, [r1, #0]
 800c982:	0635      	lsls	r5, r6, #24
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	d501      	bpl.n	800c98c <_printf_i+0x1cc>
 800c988:	6018      	str	r0, [r3, #0]
 800c98a:	e002      	b.n	800c992 <_printf_i+0x1d2>
 800c98c:	0671      	lsls	r1, r6, #25
 800c98e:	d5fb      	bpl.n	800c988 <_printf_i+0x1c8>
 800c990:	8018      	strh	r0, [r3, #0]
 800c992:	2300      	movs	r3, #0
 800c994:	6123      	str	r3, [r4, #16]
 800c996:	4616      	mov	r6, r2
 800c998:	e7ba      	b.n	800c910 <_printf_i+0x150>
 800c99a:	680b      	ldr	r3, [r1, #0]
 800c99c:	1d1a      	adds	r2, r3, #4
 800c99e:	600a      	str	r2, [r1, #0]
 800c9a0:	681e      	ldr	r6, [r3, #0]
 800c9a2:	6862      	ldr	r2, [r4, #4]
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	f7f3 fc2a 	bl	8000200 <memchr>
 800c9ac:	b108      	cbz	r0, 800c9b2 <_printf_i+0x1f2>
 800c9ae:	1b80      	subs	r0, r0, r6
 800c9b0:	6060      	str	r0, [r4, #4]
 800c9b2:	6863      	ldr	r3, [r4, #4]
 800c9b4:	6123      	str	r3, [r4, #16]
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9bc:	e7a8      	b.n	800c910 <_printf_i+0x150>
 800c9be:	6923      	ldr	r3, [r4, #16]
 800c9c0:	4632      	mov	r2, r6
 800c9c2:	4649      	mov	r1, r9
 800c9c4:	4640      	mov	r0, r8
 800c9c6:	47d0      	blx	sl
 800c9c8:	3001      	adds	r0, #1
 800c9ca:	d0ab      	beq.n	800c924 <_printf_i+0x164>
 800c9cc:	6823      	ldr	r3, [r4, #0]
 800c9ce:	079b      	lsls	r3, r3, #30
 800c9d0:	d413      	bmi.n	800c9fa <_printf_i+0x23a>
 800c9d2:	68e0      	ldr	r0, [r4, #12]
 800c9d4:	9b03      	ldr	r3, [sp, #12]
 800c9d6:	4298      	cmp	r0, r3
 800c9d8:	bfb8      	it	lt
 800c9da:	4618      	movlt	r0, r3
 800c9dc:	e7a4      	b.n	800c928 <_printf_i+0x168>
 800c9de:	2301      	movs	r3, #1
 800c9e0:	4632      	mov	r2, r6
 800c9e2:	4649      	mov	r1, r9
 800c9e4:	4640      	mov	r0, r8
 800c9e6:	47d0      	blx	sl
 800c9e8:	3001      	adds	r0, #1
 800c9ea:	d09b      	beq.n	800c924 <_printf_i+0x164>
 800c9ec:	3501      	adds	r5, #1
 800c9ee:	68e3      	ldr	r3, [r4, #12]
 800c9f0:	9903      	ldr	r1, [sp, #12]
 800c9f2:	1a5b      	subs	r3, r3, r1
 800c9f4:	42ab      	cmp	r3, r5
 800c9f6:	dcf2      	bgt.n	800c9de <_printf_i+0x21e>
 800c9f8:	e7eb      	b.n	800c9d2 <_printf_i+0x212>
 800c9fa:	2500      	movs	r5, #0
 800c9fc:	f104 0619 	add.w	r6, r4, #25
 800ca00:	e7f5      	b.n	800c9ee <_printf_i+0x22e>
 800ca02:	bf00      	nop
 800ca04:	0800cd01 	.word	0x0800cd01
 800ca08:	0800cd12 	.word	0x0800cd12

0800ca0c <memcpy>:
 800ca0c:	440a      	add	r2, r1
 800ca0e:	4291      	cmp	r1, r2
 800ca10:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca14:	d100      	bne.n	800ca18 <memcpy+0xc>
 800ca16:	4770      	bx	lr
 800ca18:	b510      	push	{r4, lr}
 800ca1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca22:	4291      	cmp	r1, r2
 800ca24:	d1f9      	bne.n	800ca1a <memcpy+0xe>
 800ca26:	bd10      	pop	{r4, pc}

0800ca28 <memmove>:
 800ca28:	4288      	cmp	r0, r1
 800ca2a:	b510      	push	{r4, lr}
 800ca2c:	eb01 0402 	add.w	r4, r1, r2
 800ca30:	d902      	bls.n	800ca38 <memmove+0x10>
 800ca32:	4284      	cmp	r4, r0
 800ca34:	4623      	mov	r3, r4
 800ca36:	d807      	bhi.n	800ca48 <memmove+0x20>
 800ca38:	1e43      	subs	r3, r0, #1
 800ca3a:	42a1      	cmp	r1, r4
 800ca3c:	d008      	beq.n	800ca50 <memmove+0x28>
 800ca3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca46:	e7f8      	b.n	800ca3a <memmove+0x12>
 800ca48:	4402      	add	r2, r0
 800ca4a:	4601      	mov	r1, r0
 800ca4c:	428a      	cmp	r2, r1
 800ca4e:	d100      	bne.n	800ca52 <memmove+0x2a>
 800ca50:	bd10      	pop	{r4, pc}
 800ca52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca5a:	e7f7      	b.n	800ca4c <memmove+0x24>

0800ca5c <_free_r>:
 800ca5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca5e:	2900      	cmp	r1, #0
 800ca60:	d048      	beq.n	800caf4 <_free_r+0x98>
 800ca62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca66:	9001      	str	r0, [sp, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f1a1 0404 	sub.w	r4, r1, #4
 800ca6e:	bfb8      	it	lt
 800ca70:	18e4      	addlt	r4, r4, r3
 800ca72:	f000 f8d3 	bl	800cc1c <__malloc_lock>
 800ca76:	4a20      	ldr	r2, [pc, #128]	; (800caf8 <_free_r+0x9c>)
 800ca78:	9801      	ldr	r0, [sp, #4]
 800ca7a:	6813      	ldr	r3, [r2, #0]
 800ca7c:	4615      	mov	r5, r2
 800ca7e:	b933      	cbnz	r3, 800ca8e <_free_r+0x32>
 800ca80:	6063      	str	r3, [r4, #4]
 800ca82:	6014      	str	r4, [r2, #0]
 800ca84:	b003      	add	sp, #12
 800ca86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca8a:	f000 b8cd 	b.w	800cc28 <__malloc_unlock>
 800ca8e:	42a3      	cmp	r3, r4
 800ca90:	d90b      	bls.n	800caaa <_free_r+0x4e>
 800ca92:	6821      	ldr	r1, [r4, #0]
 800ca94:	1862      	adds	r2, r4, r1
 800ca96:	4293      	cmp	r3, r2
 800ca98:	bf04      	itt	eq
 800ca9a:	681a      	ldreq	r2, [r3, #0]
 800ca9c:	685b      	ldreq	r3, [r3, #4]
 800ca9e:	6063      	str	r3, [r4, #4]
 800caa0:	bf04      	itt	eq
 800caa2:	1852      	addeq	r2, r2, r1
 800caa4:	6022      	streq	r2, [r4, #0]
 800caa6:	602c      	str	r4, [r5, #0]
 800caa8:	e7ec      	b.n	800ca84 <_free_r+0x28>
 800caaa:	461a      	mov	r2, r3
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	b10b      	cbz	r3, 800cab4 <_free_r+0x58>
 800cab0:	42a3      	cmp	r3, r4
 800cab2:	d9fa      	bls.n	800caaa <_free_r+0x4e>
 800cab4:	6811      	ldr	r1, [r2, #0]
 800cab6:	1855      	adds	r5, r2, r1
 800cab8:	42a5      	cmp	r5, r4
 800caba:	d10b      	bne.n	800cad4 <_free_r+0x78>
 800cabc:	6824      	ldr	r4, [r4, #0]
 800cabe:	4421      	add	r1, r4
 800cac0:	1854      	adds	r4, r2, r1
 800cac2:	42a3      	cmp	r3, r4
 800cac4:	6011      	str	r1, [r2, #0]
 800cac6:	d1dd      	bne.n	800ca84 <_free_r+0x28>
 800cac8:	681c      	ldr	r4, [r3, #0]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	6053      	str	r3, [r2, #4]
 800cace:	4421      	add	r1, r4
 800cad0:	6011      	str	r1, [r2, #0]
 800cad2:	e7d7      	b.n	800ca84 <_free_r+0x28>
 800cad4:	d902      	bls.n	800cadc <_free_r+0x80>
 800cad6:	230c      	movs	r3, #12
 800cad8:	6003      	str	r3, [r0, #0]
 800cada:	e7d3      	b.n	800ca84 <_free_r+0x28>
 800cadc:	6825      	ldr	r5, [r4, #0]
 800cade:	1961      	adds	r1, r4, r5
 800cae0:	428b      	cmp	r3, r1
 800cae2:	bf04      	itt	eq
 800cae4:	6819      	ldreq	r1, [r3, #0]
 800cae6:	685b      	ldreq	r3, [r3, #4]
 800cae8:	6063      	str	r3, [r4, #4]
 800caea:	bf04      	itt	eq
 800caec:	1949      	addeq	r1, r1, r5
 800caee:	6021      	streq	r1, [r4, #0]
 800caf0:	6054      	str	r4, [r2, #4]
 800caf2:	e7c7      	b.n	800ca84 <_free_r+0x28>
 800caf4:	b003      	add	sp, #12
 800caf6:	bd30      	pop	{r4, r5, pc}
 800caf8:	20000464 	.word	0x20000464

0800cafc <_malloc_r>:
 800cafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cafe:	1ccd      	adds	r5, r1, #3
 800cb00:	f025 0503 	bic.w	r5, r5, #3
 800cb04:	3508      	adds	r5, #8
 800cb06:	2d0c      	cmp	r5, #12
 800cb08:	bf38      	it	cc
 800cb0a:	250c      	movcc	r5, #12
 800cb0c:	2d00      	cmp	r5, #0
 800cb0e:	4606      	mov	r6, r0
 800cb10:	db01      	blt.n	800cb16 <_malloc_r+0x1a>
 800cb12:	42a9      	cmp	r1, r5
 800cb14:	d903      	bls.n	800cb1e <_malloc_r+0x22>
 800cb16:	230c      	movs	r3, #12
 800cb18:	6033      	str	r3, [r6, #0]
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb1e:	f000 f87d 	bl	800cc1c <__malloc_lock>
 800cb22:	4921      	ldr	r1, [pc, #132]	; (800cba8 <_malloc_r+0xac>)
 800cb24:	680a      	ldr	r2, [r1, #0]
 800cb26:	4614      	mov	r4, r2
 800cb28:	b99c      	cbnz	r4, 800cb52 <_malloc_r+0x56>
 800cb2a:	4f20      	ldr	r7, [pc, #128]	; (800cbac <_malloc_r+0xb0>)
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	b923      	cbnz	r3, 800cb3a <_malloc_r+0x3e>
 800cb30:	4621      	mov	r1, r4
 800cb32:	4630      	mov	r0, r6
 800cb34:	f000 f862 	bl	800cbfc <_sbrk_r>
 800cb38:	6038      	str	r0, [r7, #0]
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	f000 f85d 	bl	800cbfc <_sbrk_r>
 800cb42:	1c43      	adds	r3, r0, #1
 800cb44:	d123      	bne.n	800cb8e <_malloc_r+0x92>
 800cb46:	230c      	movs	r3, #12
 800cb48:	6033      	str	r3, [r6, #0]
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	f000 f86c 	bl	800cc28 <__malloc_unlock>
 800cb50:	e7e3      	b.n	800cb1a <_malloc_r+0x1e>
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	1b5b      	subs	r3, r3, r5
 800cb56:	d417      	bmi.n	800cb88 <_malloc_r+0x8c>
 800cb58:	2b0b      	cmp	r3, #11
 800cb5a:	d903      	bls.n	800cb64 <_malloc_r+0x68>
 800cb5c:	6023      	str	r3, [r4, #0]
 800cb5e:	441c      	add	r4, r3
 800cb60:	6025      	str	r5, [r4, #0]
 800cb62:	e004      	b.n	800cb6e <_malloc_r+0x72>
 800cb64:	6863      	ldr	r3, [r4, #4]
 800cb66:	42a2      	cmp	r2, r4
 800cb68:	bf0c      	ite	eq
 800cb6a:	600b      	streq	r3, [r1, #0]
 800cb6c:	6053      	strne	r3, [r2, #4]
 800cb6e:	4630      	mov	r0, r6
 800cb70:	f000 f85a 	bl	800cc28 <__malloc_unlock>
 800cb74:	f104 000b 	add.w	r0, r4, #11
 800cb78:	1d23      	adds	r3, r4, #4
 800cb7a:	f020 0007 	bic.w	r0, r0, #7
 800cb7e:	1ac2      	subs	r2, r0, r3
 800cb80:	d0cc      	beq.n	800cb1c <_malloc_r+0x20>
 800cb82:	1a1b      	subs	r3, r3, r0
 800cb84:	50a3      	str	r3, [r4, r2]
 800cb86:	e7c9      	b.n	800cb1c <_malloc_r+0x20>
 800cb88:	4622      	mov	r2, r4
 800cb8a:	6864      	ldr	r4, [r4, #4]
 800cb8c:	e7cc      	b.n	800cb28 <_malloc_r+0x2c>
 800cb8e:	1cc4      	adds	r4, r0, #3
 800cb90:	f024 0403 	bic.w	r4, r4, #3
 800cb94:	42a0      	cmp	r0, r4
 800cb96:	d0e3      	beq.n	800cb60 <_malloc_r+0x64>
 800cb98:	1a21      	subs	r1, r4, r0
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	f000 f82e 	bl	800cbfc <_sbrk_r>
 800cba0:	3001      	adds	r0, #1
 800cba2:	d1dd      	bne.n	800cb60 <_malloc_r+0x64>
 800cba4:	e7cf      	b.n	800cb46 <_malloc_r+0x4a>
 800cba6:	bf00      	nop
 800cba8:	20000464 	.word	0x20000464
 800cbac:	20000468 	.word	0x20000468

0800cbb0 <_realloc_r>:
 800cbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb2:	4607      	mov	r7, r0
 800cbb4:	4614      	mov	r4, r2
 800cbb6:	460e      	mov	r6, r1
 800cbb8:	b921      	cbnz	r1, 800cbc4 <_realloc_r+0x14>
 800cbba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cbbe:	4611      	mov	r1, r2
 800cbc0:	f7ff bf9c 	b.w	800cafc <_malloc_r>
 800cbc4:	b922      	cbnz	r2, 800cbd0 <_realloc_r+0x20>
 800cbc6:	f7ff ff49 	bl	800ca5c <_free_r>
 800cbca:	4625      	mov	r5, r4
 800cbcc:	4628      	mov	r0, r5
 800cbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbd0:	f000 f830 	bl	800cc34 <_malloc_usable_size_r>
 800cbd4:	42a0      	cmp	r0, r4
 800cbd6:	d20f      	bcs.n	800cbf8 <_realloc_r+0x48>
 800cbd8:	4621      	mov	r1, r4
 800cbda:	4638      	mov	r0, r7
 800cbdc:	f7ff ff8e 	bl	800cafc <_malloc_r>
 800cbe0:	4605      	mov	r5, r0
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d0f2      	beq.n	800cbcc <_realloc_r+0x1c>
 800cbe6:	4631      	mov	r1, r6
 800cbe8:	4622      	mov	r2, r4
 800cbea:	f7ff ff0f 	bl	800ca0c <memcpy>
 800cbee:	4631      	mov	r1, r6
 800cbf0:	4638      	mov	r0, r7
 800cbf2:	f7ff ff33 	bl	800ca5c <_free_r>
 800cbf6:	e7e9      	b.n	800cbcc <_realloc_r+0x1c>
 800cbf8:	4635      	mov	r5, r6
 800cbfa:	e7e7      	b.n	800cbcc <_realloc_r+0x1c>

0800cbfc <_sbrk_r>:
 800cbfc:	b538      	push	{r3, r4, r5, lr}
 800cbfe:	4d06      	ldr	r5, [pc, #24]	; (800cc18 <_sbrk_r+0x1c>)
 800cc00:	2300      	movs	r3, #0
 800cc02:	4604      	mov	r4, r0
 800cc04:	4608      	mov	r0, r1
 800cc06:	602b      	str	r3, [r5, #0]
 800cc08:	f7f4 fb6a 	bl	80012e0 <_sbrk>
 800cc0c:	1c43      	adds	r3, r0, #1
 800cc0e:	d102      	bne.n	800cc16 <_sbrk_r+0x1a>
 800cc10:	682b      	ldr	r3, [r5, #0]
 800cc12:	b103      	cbz	r3, 800cc16 <_sbrk_r+0x1a>
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	bd38      	pop	{r3, r4, r5, pc}
 800cc18:	2000230c 	.word	0x2000230c

0800cc1c <__malloc_lock>:
 800cc1c:	4801      	ldr	r0, [pc, #4]	; (800cc24 <__malloc_lock+0x8>)
 800cc1e:	f000 b811 	b.w	800cc44 <__retarget_lock_acquire_recursive>
 800cc22:	bf00      	nop
 800cc24:	20002314 	.word	0x20002314

0800cc28 <__malloc_unlock>:
 800cc28:	4801      	ldr	r0, [pc, #4]	; (800cc30 <__malloc_unlock+0x8>)
 800cc2a:	f000 b80c 	b.w	800cc46 <__retarget_lock_release_recursive>
 800cc2e:	bf00      	nop
 800cc30:	20002314 	.word	0x20002314

0800cc34 <_malloc_usable_size_r>:
 800cc34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc38:	1f18      	subs	r0, r3, #4
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	bfbc      	itt	lt
 800cc3e:	580b      	ldrlt	r3, [r1, r0]
 800cc40:	18c0      	addlt	r0, r0, r3
 800cc42:	4770      	bx	lr

0800cc44 <__retarget_lock_acquire_recursive>:
 800cc44:	4770      	bx	lr

0800cc46 <__retarget_lock_release_recursive>:
 800cc46:	4770      	bx	lr

0800cc48 <_init>:
 800cc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4a:	bf00      	nop
 800cc4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc4e:	bc08      	pop	{r3}
 800cc50:	469e      	mov	lr, r3
 800cc52:	4770      	bx	lr

0800cc54 <_fini>:
 800cc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc56:	bf00      	nop
 800cc58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc5a:	bc08      	pop	{r3}
 800cc5c:	469e      	mov	lr, r3
 800cc5e:	4770      	bx	lr
