
nvc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c03c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800c1f8  0800c1f8  0001c1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c280  0800c280  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800c280  0800c280  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c280  0800c280  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c280  0800c280  0001c280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c284  0800c284  0001c284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800c288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002100  20000190  0800c418  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002290  0800c418  00022290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035925  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f76  00000000  00000000  00055ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002428  00000000  00000000  0005ba60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002160  00000000  00000000  0005de88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003abf4  00000000  00000000  0005ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f6d5  00000000  00000000  0009abdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014b784  00000000  00000000  000ca2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00215a35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097a4  00000000  00000000  00215a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000190 	.word	0x20000190
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800c1e0 	.word	0x0800c1e0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000194 	.word	0x20000194
 80001f8:	0800c1e0 	.word	0x0800c1e0

080001fc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000202:	463b      	mov	r3, r7
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
 8000210:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000212:	4b29      	ldr	r3, [pc, #164]	; (80002b8 <MX_ADC1_Init+0xbc>)
 8000214:	4a29      	ldr	r2, [pc, #164]	; (80002bc <MX_ADC1_Init+0xc0>)
 8000216:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000218:	4b27      	ldr	r3, [pc, #156]	; (80002b8 <MX_ADC1_Init+0xbc>)
 800021a:	2200      	movs	r2, #0
 800021c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800021e:	4b26      	ldr	r3, [pc, #152]	; (80002b8 <MX_ADC1_Init+0xbc>)
 8000220:	2200      	movs	r2, #0
 8000222:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000224:	4b24      	ldr	r3, [pc, #144]	; (80002b8 <MX_ADC1_Init+0xbc>)
 8000226:	2200      	movs	r2, #0
 8000228:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800022a:	4b23      	ldr	r3, [pc, #140]	; (80002b8 <MX_ADC1_Init+0xbc>)
 800022c:	2200      	movs	r2, #0
 800022e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000230:	4b21      	ldr	r3, [pc, #132]	; (80002b8 <MX_ADC1_Init+0xbc>)
 8000232:	2204      	movs	r2, #4
 8000234:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000236:	4b20      	ldr	r3, [pc, #128]	; (80002b8 <MX_ADC1_Init+0xbc>)
 8000238:	2200      	movs	r2, #0
 800023a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800023c:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <MX_ADC1_Init+0xbc>)
 800023e:	2201      	movs	r2, #1
 8000240:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000242:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <MX_ADC1_Init+0xbc>)
 8000244:	2201      	movs	r2, #1
 8000246:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <MX_ADC1_Init+0xbc>)
 800024a:	2200      	movs	r2, #0
 800024c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000250:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <MX_ADC1_Init+0xbc>)
 8000252:	2200      	movs	r2, #0
 8000254:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000256:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <MX_ADC1_Init+0xbc>)
 8000258:	2200      	movs	r2, #0
 800025a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800025c:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <MX_ADC1_Init+0xbc>)
 800025e:	2200      	movs	r2, #0
 8000260:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000264:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <MX_ADC1_Init+0xbc>)
 8000266:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800026a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <MX_ADC1_Init+0xbc>)
 800026e:	2200      	movs	r2, #0
 8000270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000274:	4810      	ldr	r0, [pc, #64]	; (80002b8 <MX_ADC1_Init+0xbc>)
 8000276:	f001 fb7f 	bl	8001978 <HAL_ADC_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000280:	f000 fd54 	bl	8000d2c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000284:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <MX_ADC1_Init+0xc4>)
 8000286:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000288:	2306      	movs	r3, #6
 800028a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800028c:	2302      	movs	r3, #2
 800028e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000290:	237f      	movs	r3, #127	; 0x7f
 8000292:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000294:	2304      	movs	r3, #4
 8000296:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029c:	463b      	mov	r3, r7
 800029e:	4619      	mov	r1, r3
 80002a0:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_ADC1_Init+0xbc>)
 80002a2:	f001 fcb5 	bl	8001c10 <HAL_ADC_ConfigChannel>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80002ac:	f000 fd3e 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002b0:	bf00      	nop
 80002b2:	3718      	adds	r7, #24
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	200003fc 	.word	0x200003fc
 80002bc:	50040000 	.word	0x50040000
 80002c0:	21800100 	.word	0x21800100

080002c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b0b2      	sub	sp, #200	; 0xc8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002dc:	f107 0318 	add.w	r3, r7, #24
 80002e0:	229c      	movs	r2, #156	; 0x9c
 80002e2:	2100      	movs	r1, #0
 80002e4:	4618      	mov	r0, r3
 80002e6:	f00b ff73 	bl	800c1d0 <memset>
  if(adcHandle->Instance==ADC1)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a35      	ldr	r2, [pc, #212]	; (80003c4 <HAL_ADC_MspInit+0x100>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d162      	bne.n	80003ba <HAL_ADC_MspInit+0xf6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80002fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80002fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000302:	2303      	movs	r3, #3
 8000304:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000306:	2305      	movs	r3, #5
 8000308:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 800030a:	2360      	movs	r3, #96	; 0x60
 800030c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800030e:	2302      	movs	r3, #2
 8000310:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000312:	2304      	movs	r3, #4
 8000314:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000316:	2304      	movs	r3, #4
 8000318:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800031a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800031e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000320:	f107 0318 	add.w	r3, r7, #24
 8000324:	4618      	mov	r0, r3
 8000326:	f005 f991 	bl	800564c <HAL_RCCEx_PeriphCLKConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000330:	f000 fcfc 	bl	8000d2c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000334:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <HAL_ADC_MspInit+0x104>)
 8000336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000338:	4a23      	ldr	r2, [pc, #140]	; (80003c8 <HAL_ADC_MspInit+0x104>)
 800033a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800033e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000340:	4b21      	ldr	r3, [pc, #132]	; (80003c8 <HAL_ADC_MspInit+0x104>)
 8000342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000348:	617b      	str	r3, [r7, #20]
 800034a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800034c:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <HAL_ADC_MspInit+0x104>)
 800034e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000350:	4a1d      	ldr	r2, [pc, #116]	; (80003c8 <HAL_ADC_MspInit+0x104>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000358:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <HAL_ADC_MspInit+0x104>)
 800035a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035c:	f003 0304 	and.w	r3, r3, #4
 8000360:	613b      	str	r3, [r7, #16]
 8000362:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <HAL_ADC_MspInit+0x104>)
 8000366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000368:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <HAL_ADC_MspInit+0x104>)
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <HAL_ADC_MspInit+0x104>)
 8000372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000374:	f003 0301 	and.w	r3, r3, #1
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AN_VBATT_Pin;
 800037c:	2310      	movs	r3, #16
 800037e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000382:	230b      	movs	r3, #11
 8000384:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000388:	2300      	movs	r3, #0
 800038a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AN_VBATT_GPIO_Port, &GPIO_InitStruct);
 800038e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000392:	4619      	mov	r1, r3
 8000394:	480d      	ldr	r0, [pc, #52]	; (80003cc <HAL_ADC_MspInit+0x108>)
 8000396:	f002 fd2f 	bl	8002df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 800039a:	2308      	movs	r3, #8
 800039c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80003a0:	230b      	movs	r3, #11
 80003a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2300      	movs	r3, #0
 80003a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 80003ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80003b0:	4619      	mov	r1, r3
 80003b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b6:	f002 fd1f 	bl	8002df8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003ba:	bf00      	nop
 80003bc:	37c8      	adds	r7, #200	; 0xc8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	50040000 	.word	0x50040000
 80003c8:	40021000 	.word	0x40021000
 80003cc:	48000800 	.word	0x48000800

080003d0 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel0;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <MX_DFSDM1_Init+0xb8>)
 80003d6:	4a2d      	ldr	r2, [pc, #180]	; (800048c <MX_DFSDM1_Init+0xbc>)
 80003d8:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80003da:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <MX_DFSDM1_Init+0xb8>)
 80003dc:	2200      	movs	r2, #0
 80003de:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80003e0:	4b29      	ldr	r3, [pc, #164]	; (8000488 <MX_DFSDM1_Init+0xb8>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80003e6:	4b28      	ldr	r3, [pc, #160]	; (8000488 <MX_DFSDM1_Init+0xb8>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 80003ec:	4b26      	ldr	r3, [pc, #152]	; (8000488 <MX_DFSDM1_Init+0xb8>)
 80003ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003f2:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 192;
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <MX_DFSDM1_Init+0xb8>)
 80003f6:	22c0      	movs	r2, #192	; 0xc0
 80003f8:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80003fa:	4b23      	ldr	r3, [pc, #140]	; (8000488 <MX_DFSDM1_Init+0xb8>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000400:	4821      	ldr	r0, [pc, #132]	; (8000488 <MX_DFSDM1_Init+0xb8>)
 8000402:	f002 f9d3 	bl	80027ac <HAL_DFSDM_FilterInit>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 800040c:	f000 fc8e 	bl	8000d2c <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000410:	4b1f      	ldr	r3, [pc, #124]	; (8000490 <MX_DFSDM1_Init+0xc0>)
 8000412:	4a20      	ldr	r2, [pc, #128]	; (8000494 <MX_DFSDM1_Init+0xc4>)
 8000414:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8000416:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <MX_DFSDM1_Init+0xc0>)
 8000418:	2200      	movs	r2, #0
 800041a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800041c:	4b1c      	ldr	r3, [pc, #112]	; (8000490 <MX_DFSDM1_Init+0xc0>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8000422:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <MX_DFSDM1_Init+0xc0>)
 8000424:	2202      	movs	r2, #2
 8000426:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_ADC_OUTPUT;
 8000428:	4b19      	ldr	r3, [pc, #100]	; (8000490 <MX_DFSDM1_Init+0xc0>)
 800042a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800042e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000430:	4b17      	ldr	r3, [pc, #92]	; (8000490 <MX_DFSDM1_Init+0xc0>)
 8000432:	2200      	movs	r2, #0
 8000434:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000436:	4b16      	ldr	r3, [pc, #88]	; (8000490 <MX_DFSDM1_Init+0xc0>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_DFSDM1_Init+0xc0>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000442:	4b13      	ldr	r3, [pc, #76]	; (8000490 <MX_DFSDM1_Init+0xc0>)
 8000444:	2200      	movs	r2, #0
 8000446:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_DFSDM1_Init+0xc0>)
 800044a:	2200      	movs	r2, #0
 800044c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 800044e:	4b10      	ldr	r3, [pc, #64]	; (8000490 <MX_DFSDM1_Init+0xc0>)
 8000450:	2201      	movs	r2, #1
 8000452:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8000454:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_DFSDM1_Init+0xc0>)
 8000456:	2200      	movs	r2, #0
 8000458:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 7;
 800045a:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <MX_DFSDM1_Init+0xc0>)
 800045c:	2207      	movs	r2, #7
 800045e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000460:	480b      	ldr	r0, [pc, #44]	; (8000490 <MX_DFSDM1_Init+0xc0>)
 8000462:	f002 f8e3 	bl	800262c <HAL_DFSDM_ChannelInit>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 800046c:	f000 fc5e 	bl	8000d2c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000470:	2201      	movs	r2, #1
 8000472:	2101      	movs	r1, #1
 8000474:	4804      	ldr	r0, [pc, #16]	; (8000488 <MX_DFSDM1_Init+0xb8>)
 8000476:	f002 fa73 	bl	8002960 <HAL_DFSDM_FilterConfigRegChannel>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 8000480:	f000 fc54 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000464 	.word	0x20000464
 800048c:	40016100 	.word	0x40016100
 8000490:	20000518 	.word	0x20000518
 8000494:	40016000 	.word	0x40016000

08000498 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b0aa      	sub	sp, #168	; 0xa8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004a0:	f107 030c 	add.w	r3, r7, #12
 80004a4:	229c      	movs	r2, #156	; 0x9c
 80004a6:	2100      	movs	r1, #0
 80004a8:	4618      	mov	r0, r3
 80004aa:	f00b fe91 	bl	800c1d0 <memset>
  if(DFSDM1_Init == 0)
 80004ae:	4b34      	ldr	r3, [pc, #208]	; (8000580 <HAL_DFSDM_FilterMspInit+0xe8>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d129      	bne.n	800050a <HAL_DFSDM_FilterMspInit+0x72>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80004b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80004bc:	2300      	movs	r3, #0
 80004be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c2:	f107 030c 	add.w	r3, r7, #12
 80004c6:	4618      	mov	r0, r3
 80004c8:	f005 f8c0 	bl	800564c <HAL_RCCEx_PeriphCLKConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <HAL_DFSDM_FilterMspInit+0x3e>
    {
      Error_Handler();
 80004d2:	f000 fc2b 	bl	8000d2c <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80004d6:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <HAL_DFSDM_FilterMspInit+0xec>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	3301      	adds	r3, #1
 80004dc:	4a29      	ldr	r2, [pc, #164]	; (8000584 <HAL_DFSDM_FilterMspInit+0xec>)
 80004de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80004e0:	4b28      	ldr	r3, [pc, #160]	; (8000584 <HAL_DFSDM_FilterMspInit+0xec>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d10b      	bne.n	8000500 <HAL_DFSDM_FilterMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80004e8:	4b27      	ldr	r3, [pc, #156]	; (8000588 <HAL_DFSDM_FilterMspInit+0xf0>)
 80004ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ec:	4a26      	ldr	r2, [pc, #152]	; (8000588 <HAL_DFSDM_FilterMspInit+0xf0>)
 80004ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004f2:	6613      	str	r3, [r2, #96]	; 0x60
 80004f4:	4b24      	ldr	r3, [pc, #144]	; (8000588 <HAL_DFSDM_FilterMspInit+0xf0>)
 80004f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000500:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <HAL_DFSDM_FilterMspInit+0xe8>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	4a1e      	ldr	r2, [pc, #120]	; (8000580 <HAL_DFSDM_FilterMspInit+0xe8>)
 8000508:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a1f      	ldr	r2, [pc, #124]	; (800058c <HAL_DFSDM_FilterMspInit+0xf4>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d131      	bne.n	8000578 <HAL_DFSDM_FilterMspInit+0xe0>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8000514:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <HAL_DFSDM_FilterMspInit+0xf8>)
 8000516:	4a1f      	ldr	r2, [pc, #124]	; (8000594 <HAL_DFSDM_FilterMspInit+0xfc>)
 8000518:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 800051a:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <HAL_DFSDM_FilterMspInit+0xf8>)
 800051c:	2256      	movs	r2, #86	; 0x56
 800051e:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <HAL_DFSDM_FilterMspInit+0xf8>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <HAL_DFSDM_FilterMspInit+0xf8>)
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <HAL_DFSDM_FilterMspInit+0xf8>)
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <HAL_DFSDM_FilterMspInit+0xf8>)
 8000534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000538:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <HAL_DFSDM_FilterMspInit+0xf8>)
 800053c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000540:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000542:	4b13      	ldr	r3, [pc, #76]	; (8000590 <HAL_DFSDM_FilterMspInit+0xf8>)
 8000544:	2220      	movs	r2, #32
 8000546:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <HAL_DFSDM_FilterMspInit+0xf8>)
 800054a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800054e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000550:	480f      	ldr	r0, [pc, #60]	; (8000590 <HAL_DFSDM_FilterMspInit+0xf8>)
 8000552:	f002 fa97 	bl	8002a84 <HAL_DMA_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <HAL_DFSDM_FilterMspInit+0xc8>
    {
      Error_Handler();
 800055c:	f000 fbe6 	bl	8000d2c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <HAL_DFSDM_FilterMspInit+0xf8>)
 8000564:	62da      	str	r2, [r3, #44]	; 0x2c
 8000566:	4a0a      	ldr	r2, [pc, #40]	; (8000590 <HAL_DFSDM_FilterMspInit+0xf8>)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a08      	ldr	r2, [pc, #32]	; (8000590 <HAL_DFSDM_FilterMspInit+0xf8>)
 8000570:	629a      	str	r2, [r3, #40]	; 0x28
 8000572:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_DFSDM_FilterMspInit+0xf8>)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8000578:	bf00      	nop
 800057a:	37a8      	adds	r7, #168	; 0xa8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200001b0 	.word	0x200001b0
 8000584:	200001ac 	.word	0x200001ac
 8000588:	40021000 	.word	0x40021000
 800058c:	40016100 	.word	0x40016100
 8000590:	200004b8 	.word	0x200004b8
 8000594:	40020044 	.word	0x40020044

08000598 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b0aa      	sub	sp, #168	; 0xa8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	229c      	movs	r2, #156	; 0x9c
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f00b fe11 	bl	800c1d0 <memset>
  if(DFSDM1_Init == 0)
 80005ae:	4b19      	ldr	r3, [pc, #100]	; (8000614 <HAL_DFSDM_ChannelMspInit+0x7c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d129      	bne.n	800060a <HAL_DFSDM_ChannelMspInit+0x72>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80005b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80005bc:	2300      	movs	r3, #0
 80005be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 f840 	bl	800564c <HAL_RCCEx_PeriphCLKConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <HAL_DFSDM_ChannelMspInit+0x3e>
    {
      Error_Handler();
 80005d2:	f000 fbab 	bl	8000d2c <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <HAL_DFSDM_ChannelMspInit+0x80>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	3301      	adds	r3, #1
 80005dc:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <HAL_DFSDM_ChannelMspInit+0x80>)
 80005de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <HAL_DFSDM_ChannelMspInit+0x80>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d10b      	bne.n	8000600 <HAL_DFSDM_ChannelMspInit+0x68>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_DFSDM_ChannelMspInit+0x84>)
 80005ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ec:	4a0b      	ldr	r2, [pc, #44]	; (800061c <HAL_DFSDM_ChannelMspInit+0x84>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	6613      	str	r3, [r2, #96]	; 0x60
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <HAL_DFSDM_ChannelMspInit+0x84>)
 80005f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	4a03      	ldr	r2, [pc, #12]	; (8000614 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8000608:	6013      	str	r3, [r2, #0]
  }
}
 800060a:	bf00      	nop
 800060c:	37a8      	adds	r7, #168	; 0xa8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200001b0 	.word	0x200001b0
 8000618:	200001ac 	.word	0x200001ac
 800061c:	40021000 	.word	0x40021000

08000620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_DMA_Init+0x50>)
 8000628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800062a:	4a11      	ldr	r2, [pc, #68]	; (8000670 <MX_DMA_Init+0x50>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6493      	str	r3, [r2, #72]	; 0x48
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_DMA_Init+0x50>)
 8000634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_DMA_Init+0x50>)
 8000640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000642:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <MX_DMA_Init+0x50>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6493      	str	r3, [r2, #72]	; 0x48
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_DMA_Init+0x50>)
 800064c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	200e      	movs	r0, #14
 800065c:	f001 ffaf 	bl	80025be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000660:	200e      	movs	r0, #14
 8000662:	f001 ffc8 	bl	80025f6 <HAL_NVIC_EnableIRQ>

}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000

08000674 <MX_GPIO_Init>:
/** Configure pins
     PD6   ------> USART2_RX
     PD5   ------> USART2_TX
*/
void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08e      	sub	sp, #56	; 0x38
 8000678:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4ba9      	ldr	r3, [pc, #676]	; (8000930 <MX_GPIO_Init+0x2bc>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4aa8      	ldr	r2, [pc, #672]	; (8000930 <MX_GPIO_Init+0x2bc>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4ba6      	ldr	r3, [pc, #664]	; (8000930 <MX_GPIO_Init+0x2bc>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	623b      	str	r3, [r7, #32]
 80006a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a2:	4ba3      	ldr	r3, [pc, #652]	; (8000930 <MX_GPIO_Init+0x2bc>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4aa2      	ldr	r2, [pc, #648]	; (8000930 <MX_GPIO_Init+0x2bc>)
 80006a8:	f043 0308 	orr.w	r3, r3, #8
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4ba0      	ldr	r3, [pc, #640]	; (8000930 <MX_GPIO_Init+0x2bc>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0308 	and.w	r3, r3, #8
 80006b6:	61fb      	str	r3, [r7, #28]
 80006b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b9d      	ldr	r3, [pc, #628]	; (8000930 <MX_GPIO_Init+0x2bc>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a9c      	ldr	r2, [pc, #624]	; (8000930 <MX_GPIO_Init+0x2bc>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b9a      	ldr	r3, [pc, #616]	; (8000930 <MX_GPIO_Init+0x2bc>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	61bb      	str	r3, [r7, #24]
 80006d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d2:	4b97      	ldr	r3, [pc, #604]	; (8000930 <MX_GPIO_Init+0x2bc>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a96      	ldr	r2, [pc, #600]	; (8000930 <MX_GPIO_Init+0x2bc>)
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b94      	ldr	r3, [pc, #592]	; (8000930 <MX_GPIO_Init+0x2bc>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0310 	and.w	r3, r3, #16
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b91      	ldr	r3, [pc, #580]	; (8000930 <MX_GPIO_Init+0x2bc>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4a90      	ldr	r2, [pc, #576]	; (8000930 <MX_GPIO_Init+0x2bc>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4b8e      	ldr	r3, [pc, #568]	; (8000930 <MX_GPIO_Init+0x2bc>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000702:	4b8b      	ldr	r3, [pc, #556]	; (8000930 <MX_GPIO_Init+0x2bc>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a8a      	ldr	r2, [pc, #552]	; (8000930 <MX_GPIO_Init+0x2bc>)
 8000708:	f043 0320 	orr.w	r3, r3, #32
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b88      	ldr	r3, [pc, #544]	; (8000930 <MX_GPIO_Init+0x2bc>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0320 	and.w	r3, r3, #32
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800071a:	4b85      	ldr	r3, [pc, #532]	; (8000930 <MX_GPIO_Init+0x2bc>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a84      	ldr	r2, [pc, #528]	; (8000930 <MX_GPIO_Init+0x2bc>)
 8000720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b82      	ldr	r3, [pc, #520]	; (8000930 <MX_GPIO_Init+0x2bc>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000732:	f004 f8d5 	bl	80048e0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	4b7e      	ldr	r3, [pc, #504]	; (8000930 <MX_GPIO_Init+0x2bc>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a7d      	ldr	r2, [pc, #500]	; (8000930 <MX_GPIO_Init+0x2bc>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b7b      	ldr	r3, [pc, #492]	; (8000930 <MX_GPIO_Init+0x2bc>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS2MDL_GPIO_Port, CS_LIS2MDL_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000758:	f002 fce0 	bl	800311c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SD_SEL_Pin|SD_EN_Pin|CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin
 800075c:	2201      	movs	r2, #1
 800075e:	f641 4130 	movw	r1, #7216	; 0x1c30
 8000762:	4874      	ldr	r0, [pc, #464]	; (8000934 <MX_GPIO_Init+0x2c0>)
 8000764:	f002 fcda 	bl	800311c <HAL_GPIO_WritePin>
                          |CS_LSM6DSOX_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USER_LED_Pin|BB_MODE_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2105      	movs	r1, #5
 800076c:	4872      	ldr	r0, [pc, #456]	; (8000938 <MX_GPIO_Init+0x2c4>)
 800076e:	f002 fcd5 	bl	800311c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHG_LED2_GPIO_Port, CHG_LED2_Pin, GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000778:	4870      	ldr	r0, [pc, #448]	; (800093c <MX_GPIO_Init+0x2c8>)
 800077a:	f002 fccf 	bl	800311c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_2V7_EN_GPIO_Port, LDO_2V7_EN_Pin, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	486d      	ldr	r0, [pc, #436]	; (8000938 <MX_GPIO_Init+0x2c4>)
 8000784:	f002 fcca 	bl	800311c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_SEL_GPIO_Port, SW_SEL_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2110      	movs	r1, #16
 800078c:	486b      	ldr	r0, [pc, #428]	; (800093c <MX_GPIO_Init+0x2c8>)
 800078e:	f002 fcc5 	bl	800311c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_LED_GPIO_Port, CPU_LED_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000798:	4869      	ldr	r0, [pc, #420]	; (8000940 <MX_GPIO_Init+0x2cc>)
 800079a:	f002 fcbf 	bl	800311c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = INT2_LSM6DSOX_Pin|INT2_IIS3DHHC_Pin;
 800079e:	2348      	movs	r3, #72	; 0x48
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b0:	4619      	mov	r1, r3
 80007b2:	4860      	ldr	r0, [pc, #384]	; (8000934 <MX_GPIO_Init+0x2c0>)
 80007b4:	f002 fb20 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 80007b8:	2360      	movs	r3, #96	; 0x60
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007c8:	2307      	movs	r3, #7
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	4619      	mov	r1, r3
 80007d2:	485c      	ldr	r0, [pc, #368]	; (8000944 <MX_GPIO_Init+0x2d0>)
 80007d4:	f002 fb10 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_LIS2MDL_Pin;
 80007d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007de:	2311      	movs	r3, #17
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e6:	2303      	movs	r3, #3
 80007e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_LIS2MDL_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f4:	f002 fb00 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SD_SEL_Pin|SD_EN_Pin;
 80007f8:	2330      	movs	r3, #48	; 0x30
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080c:	4619      	mov	r1, r3
 800080e:	4849      	ldr	r0, [pc, #292]	; (8000934 <MX_GPIO_Init+0x2c0>)
 8000810:	f002 faf2 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = USER_LED_Pin|BB_MODE_Pin|LDO_2V7_EN_Pin;
 8000814:	2385      	movs	r3, #133	; 0x85
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000828:	4619      	mov	r1, r3
 800082a:	4843      	ldr	r0, [pc, #268]	; (8000938 <MX_GPIO_Init+0x2c4>)
 800082c:	f002 fae4 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = CHG_LED2_Pin|SW_SEL_Pin;
 8000830:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000846:	4619      	mov	r1, r3
 8000848:	483c      	ldr	r0, [pc, #240]	; (800093c <MX_GPIO_Init+0x2c8>)
 800084a:	f002 fad5 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHG_LED_Pin;
 800084e:	2308      	movs	r3, #8
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHG_LED_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	4619      	mov	r1, r3
 8000860:	4836      	ldr	r0, [pc, #216]	; (800093c <MX_GPIO_Init+0x2c8>)
 8000862:	f002 fac9 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = INT_LPS22HH_Pin|INT2_LIS2DW12_Pin|INT_HTS221_Pin;
 8000866:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	4619      	mov	r1, r3
 800087c:	4831      	ldr	r0, [pc, #196]	; (8000944 <MX_GPIO_Init+0x2d0>)
 800087e:	f002 fabb 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin|CS_LSM6DSOX_Pin;
 8000882:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000888:	2311      	movs	r3, #17
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4619      	mov	r1, r3
 800089a:	4826      	ldr	r0, [pc, #152]	; (8000934 <MX_GPIO_Init+0x2c0>)
 800089c:	f002 faac 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CPU_LED_Pin;
 80008a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CPU_LED_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	4619      	mov	r1, r3
 80008b8:	4821      	ldr	r0, [pc, #132]	; (8000940 <MX_GPIO_Init+0x2cc>)
 80008ba:	f002 fa9d 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT1_LIS2DW12_Pin;
 80008be:	2320      	movs	r3, #32
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LIS2DW12_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d0:	4619      	mov	r1, r3
 80008d2:	481d      	ldr	r0, [pc, #116]	; (8000948 <MX_GPIO_Init+0x2d4>)
 80008d4:	f002 fa90 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT1_LSM6DSOX_Pin;
 80008d8:	2304      	movs	r3, #4
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LSM6DSOX_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	4619      	mov	r1, r3
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f0:	f002 fa82 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 80008f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	4619      	mov	r1, r3
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <MX_GPIO_Init+0x2cc>)
 800090a:	f002 fa75 	bl	8002df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_PB1_Pin;
 800090e:	2302      	movs	r3, #2
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000912:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_PB1_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000920:	4619      	mov	r1, r3
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <MX_GPIO_Init+0x2c8>)
 8000924:	f002 fa68 	bl	8002df8 <HAL_GPIO_Init>

}
 8000928:	bf00      	nop
 800092a:	3738      	adds	r7, #56	; 0x38
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40021000 	.word	0x40021000
 8000934:	48001000 	.word	0x48001000
 8000938:	48001400 	.word	0x48001400
 800093c:	48001800 	.word	0x48001800
 8000940:	48000400 	.word	0x48000400
 8000944:	48000c00 	.word	0x48000c00
 8000948:	48000800 	.word	0x48000800

0800094c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000952:	4a1c      	ldr	r2, [pc, #112]	; (80009c4 <MX_I2C1_Init+0x78>)
 8000954:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000958:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <MX_I2C1_Init+0x7c>)
 800095a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000964:	2201      	movs	r2, #1
 8000966:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_I2C1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000986:	480e      	ldr	r0, [pc, #56]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000988:	f002 fbe0 	bl	800314c <HAL_I2C_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000992:	f000 f9cb 	bl	8000d2c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000996:	2100      	movs	r1, #0
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <MX_I2C1_Init+0x74>)
 800099a:	f002 fc66 	bl	800326a <HAL_I2CEx_ConfigAnalogFilter>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009a4:	f000 f9c2 	bl	8000d2c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_I2C1_Init+0x74>)
 80009ac:	f002 fca8 	bl	8003300 <HAL_I2CEx_ConfigDigitalFilter>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009b6:	f000 f9b9 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200005a4 	.word	0x200005a4
 80009c4:	40005400 	.word	0x40005400
 80009c8:	00b03fdb 	.word	0x00b03fdb

080009cc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <MX_I2C3_Init+0x74>)
 80009d2:	4a1c      	ldr	r2, [pc, #112]	; (8000a44 <MX_I2C3_Init+0x78>)
 80009d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_I2C3_Init+0x74>)
 80009d8:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <MX_I2C3_Init+0x7c>)
 80009da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_I2C3_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <MX_I2C3_Init+0x74>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_I2C3_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_I2C3_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_I2C3_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_I2C3_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_I2C3_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a06:	480e      	ldr	r0, [pc, #56]	; (8000a40 <MX_I2C3_Init+0x74>)
 8000a08:	f002 fba0 	bl	800314c <HAL_I2C_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a12:	f000 f98b 	bl	8000d2c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a16:	2100      	movs	r1, #0
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <MX_I2C3_Init+0x74>)
 8000a1a:	f002 fc26 	bl	800326a <HAL_I2CEx_ConfigAnalogFilter>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a24:	f000 f982 	bl	8000d2c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_I2C3_Init+0x74>)
 8000a2c:	f002 fc68 	bl	8003300 <HAL_I2CEx_ConfigDigitalFilter>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a36:	f000 f979 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000550 	.word	0x20000550
 8000a44:	40005c00 	.word	0x40005c00
 8000a48:	00b03fdb 	.word	0x00b03fdb

08000a4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b0b2      	sub	sp, #200	; 0xc8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	229c      	movs	r2, #156	; 0x9c
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f00b fbaf 	bl	800c1d0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a43      	ldr	r2, [pc, #268]	; (8000b84 <HAL_I2C_MspInit+0x138>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d13b      	bne.n	8000af4 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a7c:	2340      	movs	r3, #64	; 0x40
 8000a7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f004 fddf 	bl	800564c <HAL_RCCEx_PeriphCLKConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a94:	f000 f94a 	bl	8000d2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a98:	4b3b      	ldr	r3, [pc, #236]	; (8000b88 <HAL_I2C_MspInit+0x13c>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	4a3a      	ldr	r2, [pc, #232]	; (8000b88 <HAL_I2C_MspInit+0x13c>)
 8000a9e:	f043 0302 	orr.w	r3, r3, #2
 8000aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa4:	4b38      	ldr	r3, [pc, #224]	; (8000b88 <HAL_I2C_MspInit+0x13c>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8000ab0:	23c0      	movs	r3, #192	; 0xc0
 8000ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab6:	2312      	movs	r3, #18
 8000ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ace:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	482d      	ldr	r0, [pc, #180]	; (8000b8c <HAL_I2C_MspInit+0x140>)
 8000ad6:	f002 f98f 	bl	8002df8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <HAL_I2C_MspInit+0x13c>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ade:	4a2a      	ldr	r2, [pc, #168]	; (8000b88 <HAL_I2C_MspInit+0x13c>)
 8000ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <HAL_I2C_MspInit+0x13c>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000af2:	e043      	b.n	8000b7c <HAL_I2C_MspInit+0x130>
  else if(i2cHandle->Instance==I2C3)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a25      	ldr	r2, [pc, #148]	; (8000b90 <HAL_I2C_MspInit+0x144>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d13e      	bne.n	8000b7c <HAL_I2C_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b02:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b08:	f107 0318 	add.w	r3, r7, #24
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f004 fd9d 	bl	800564c <HAL_RCCEx_PeriphCLKConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8000b18:	f000 f908 	bl	8000d2c <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_I2C_MspInit+0x13c>)
 8000b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_I2C_MspInit+0x13c>)
 8000b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_I2C_MspInit+0x13c>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000b34:	f003 fed4 	bl	80048e0 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8000b38:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b40:	2312      	movs	r3, #18
 8000b42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b52:	2304      	movs	r3, #4
 8000b54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480d      	ldr	r0, [pc, #52]	; (8000b94 <HAL_I2C_MspInit+0x148>)
 8000b60:	f002 f94a 	bl	8002df8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_I2C_MspInit+0x13c>)
 8000b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_I2C_MspInit+0x13c>)
 8000b6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_I2C_MspInit+0x13c>)
 8000b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
}
 8000b7c:	bf00      	nop
 8000b7e:	37c8      	adds	r7, #200	; 0xc8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40005400 	.word	0x40005400
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	48000400 	.word	0x48000400
 8000b90:	40005c00 	.word	0x40005c00
 8000b94:	48001800 	.word	0x48001800

08000b98 <accGyroInit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void accGyroInit(){
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
	lsm6.acc.fullScale = FS_XL_8; //8g
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <accGyroInit+0x28>)
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	705a      	strb	r2, [r3, #1]
	lsm6.acc.operatingMode = NORMAL_104;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <accGyroInit+0x28>)
 8000ba4:	2240      	movs	r2, #64	; 0x40
 8000ba6:	701a      	strb	r2, [r3, #0]
	lsm6.gyro.fullScale = FS_G_2000; //2000deg
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <accGyroInit+0x28>)
 8000baa:	2203      	movs	r2, #3
 8000bac:	70da      	strb	r2, [r3, #3]
	lsm6.gyro.operatingMode = NORMAL_104;
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <accGyroInit+0x28>)
 8000bb0:	2240      	movs	r2, #64	; 0x40
 8000bb2:	709a      	strb	r2, [r3, #2]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	200005f8 	.word	0x200005f8

08000bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bca:	f000 fc9c 	bl	8001506 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bce:	f000 f84f 	bl	8000c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd2:	f7ff fd4f 	bl	8000674 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bd6:	f7ff fd23 	bl	8000620 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bda:	f7ff fb0f 	bl	80001fc <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000bde:	f7ff fbf7 	bl	80003d0 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000be2:	f7ff feb3 	bl	800094c <MX_I2C1_Init>
  MX_I2C3_Init();
 8000be6:	f7ff fef1 	bl	80009cc <MX_I2C3_Init>
  MX_RTC_Init();
 8000bea:	f000 f8a5 	bl	8000d38 <MX_RTC_Init>
  //MX_SDMMC1_SD_Init();
  MX_SPI1_Init();
 8000bee:	f000 f931 	bl	8000e54 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000bf2:	f000 f96d 	bl	8000ed0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000bf6:	f000 f9a9 	bl	8000f4c <MX_SPI3_Init>
  MX_TIM2_Init();
 8000bfa:	f000 fb55 	bl	80012a8 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000bfe:	f000 fba1 	bl	8001344 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000c02:	f000 fbd5 	bl	80013b0 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8000c06:	f00a fc9b 	bl	800b540 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t pTxData[2] = {0};
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	80bb      	strh	r3, [r7, #4]
  uint8_t pRxData[2] = {0};
 8000c0e:	2300      	movs	r3, #0
 8000c10:	803b      	strh	r3, [r7, #0]
  uint16_t temp = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	80fb      	strh	r3, [r7, #6]

  accGyroInit();
 8000c16:	f7ff ffbf 	bl	8000b98 <accGyroInit>
  LMS6DSO_Init(lsm6);
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <main+0xa0>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	4613      	mov	r3, r2
 8000c22:	4618      	mov	r0, r3
 8000c24:	f00a fc5a 	bl	800b4dc <LMS6DSO_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Read temperature register
	pTxData[0] = OUT_TEMP_L|0x80;
 8000c28:	23a0      	movs	r3, #160	; 0xa0
 8000c2a:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(CS_LSM6DSOX_GPIO_Port, CS_LSM6DSOX_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <main+0xa4>)
 8000c34:	f002 fa72 	bl	800311c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, pTxData, 1, 100);
 8000c38:	1d39      	adds	r1, r7, #4
 8000c3a:	2364      	movs	r3, #100	; 0x64
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	480b      	ldr	r0, [pc, #44]	; (8000c6c <main+0xa8>)
 8000c40:	f006 f817 	bl	8006c72 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pRxData, 2, 100);
 8000c44:	4639      	mov	r1, r7
 8000c46:	2364      	movs	r3, #100	; 0x64
 8000c48:	2202      	movs	r2, #2
 8000c4a:	4808      	ldr	r0, [pc, #32]	; (8000c6c <main+0xa8>)
 8000c4c:	f006 f97f 	bl	8006f4e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CS_LSM6DSOX_GPIO_Port, CS_LSM6DSOX_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c56:	4804      	ldr	r0, [pc, #16]	; (8000c68 <main+0xa4>)
 8000c58:	f002 fa60 	bl	800311c <HAL_GPIO_WritePin>
	//temp = pRxData[2]<<8|pRxData[1];
	HAL_Delay(100);
 8000c5c:	2064      	movs	r0, #100	; 0x64
 8000c5e:	f000 fcc7 	bl	80015f0 <HAL_Delay>
	pTxData[0] = OUT_TEMP_L|0x80;
 8000c62:	e7e1      	b.n	8000c28 <main+0x64>
 8000c64:	200005f8 	.word	0x200005f8
 8000c68:	48001000 	.word	0x48001000
 8000c6c:	20000768 	.word	0x20000768

08000c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b096      	sub	sp, #88	; 0x58
 8000c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	2244      	movs	r2, #68	; 0x44
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f00b faa6 	bl	800c1d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c84:	463b      	mov	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000c92:	2000      	movs	r0, #0
 8000c94:	f003 fd70 	bl	8004778 <HAL_PWREx_ControlVoltageScaling>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000c9e:	f000 f845 	bl	8000d2c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ca2:	f003 fd39 	bl	8004718 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <SystemClock_Config+0xb8>)
 8000ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cac:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <SystemClock_Config+0xb8>)
 8000cae:	f023 0318 	bic.w	r3, r3, #24
 8000cb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8000cb6:	2325      	movs	r3, #37	; 0x25
 8000cb8:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cbe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000cd4:	233c      	movs	r3, #60	; 0x3c
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000cd8:	2305      	movs	r3, #5
 8000cda:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 fe09 	bl	8004900 <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000cf4:	f000 f81a 	bl	8000d2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	2105      	movs	r1, #5
 8000d10:	4618      	mov	r0, r3
 8000d12:	f004 fa0d 	bl	8005130 <HAL_RCC_ClockConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d1c:	f000 f806 	bl	8000d2c <Error_Handler>
  }
}
 8000d20:	bf00      	nop
 8000d22:	3758      	adds	r7, #88	; 0x58
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40021000 	.word	0x40021000

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d50:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <MX_RTC_Init+0xb0>)
 8000d52:	4a26      	ldr	r2, [pc, #152]	; (8000dec <MX_RTC_Init+0xb4>)
 8000d54:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d56:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <MX_RTC_Init+0xb0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d5c:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <MX_RTC_Init+0xb0>)
 8000d5e:	227f      	movs	r2, #127	; 0x7f
 8000d60:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <MX_RTC_Init+0xb0>)
 8000d64:	22ff      	movs	r2, #255	; 0xff
 8000d66:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <MX_RTC_Init+0xb0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <MX_RTC_Init+0xb0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_RTC_Init+0xb0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <MX_RTC_Init+0xb0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d80:	4819      	ldr	r0, [pc, #100]	; (8000de8 <MX_RTC_Init+0xb0>)
 8000d82:	f005 f9db 	bl	800613c <HAL_RTC_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000d8c:	f7ff ffce 	bl	8000d2c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	4619      	mov	r1, r3
 8000daa:	480f      	ldr	r0, [pc, #60]	; (8000de8 <MX_RTC_Init+0xb0>)
 8000dac:	f005 fa41 	bl	8006232 <HAL_RTC_SetTime>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000db6:	f7ff ffb9 	bl	8000d2c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 3;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 8000dc6:	2314      	movs	r3, #20
 8000dc8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_RTC_Init+0xb0>)
 8000dd2:	f005 facb 	bl	800636c <HAL_RTC_SetDate>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000ddc:	f7ff ffa6 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200005fc 	.word	0x200005fc
 8000dec:	40002800 	.word	0x40002800

08000df0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0aa      	sub	sp, #168	; 0xa8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	229c      	movs	r2, #156	; 0x9c
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f00b f9e5 	bl	800c1d0 <memset>
  if(rtcHandle->Instance==RTC)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <HAL_RTC_MspInit+0x5c>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d118      	bne.n	8000e42 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e14:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	4618      	mov	r0, r3
 8000e24:	f004 fc12 	bl	800564c <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e2e:	f7ff ff7d 	bl	8000d2c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <HAL_RTC_MspInit+0x60>)
 8000e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e38:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <HAL_RTC_MspInit+0x60>)
 8000e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000e42:	bf00      	nop
 8000e44:	37a8      	adds	r7, #168	; 0xa8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40002800 	.word	0x40002800
 8000e50:	40021000 	.word	0x40021000

08000e54 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <MX_SPI1_Init+0x78>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e76:	2202      	movs	r2, #2
 8000e78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e8a:	2218      	movs	r2, #24
 8000e8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000ea2:	2207      	movs	r2, #7
 8000ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000eb4:	f005 fe3a 	bl	8006b2c <HAL_SPI_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ebe:	f7ff ff35 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000768 	.word	0x20000768
 8000ecc:	40013000 	.word	0x40013000

08000ed0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_SPI2_Init+0x74>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <MX_SPI2_Init+0x78>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_SPI2_Init+0x74>)
 8000edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ee0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_SPI2_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_SPI2_Init+0x74>)
 8000eea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000eee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_SPI2_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_SPI2_Init+0x74>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_SPI2_Init+0x74>)
 8000efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f02:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_SPI2_Init+0x74>)
 8000f06:	2230      	movs	r2, #48	; 0x30
 8000f08:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_SPI2_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_SPI2_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <MX_SPI2_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_SPI2_Init+0x74>)
 8000f1e:	2207      	movs	r2, #7
 8000f20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_SPI2_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_SPI2_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_SPI2_Init+0x74>)
 8000f30:	f005 fdfc 	bl	8006b2c <HAL_SPI_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f7ff fef7 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200006a0 	.word	0x200006a0
 8000f48:	40003800 	.word	0x40003800

08000f4c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_SPI3_Init+0x74>)
 8000f52:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <MX_SPI3_Init+0x78>)
 8000f54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_SPI3_Init+0x74>)
 8000f58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f5c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_SPI3_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_SPI3_Init+0x74>)
 8000f66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f6a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_SPI3_Init+0x74>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_SPI3_Init+0x74>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_SPI3_Init+0x74>)
 8000f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f7e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_SPI3_Init+0x74>)
 8000f82:	2218      	movs	r2, #24
 8000f84:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_SPI3_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_SPI3_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <MX_SPI3_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_SPI3_Init+0x74>)
 8000f9a:	2207      	movs	r2, #7
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_SPI3_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_SPI3_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_SPI3_Init+0x74>)
 8000fac:	f005 fdbe 	bl	8006b2c <HAL_SPI_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000fb6:	f7ff feb9 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000704 	.word	0x20000704
 8000fc4:	40003c00 	.word	0x40003c00

08000fc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08e      	sub	sp, #56	; 0x38
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a64      	ldr	r2, [pc, #400]	; (8001178 <HAL_SPI_MspInit+0x1b0>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d13a      	bne.n	8001060 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fea:	4b64      	ldr	r3, [pc, #400]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	4a63      	ldr	r2, [pc, #396]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 8000ff0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff6:	4b61      	ldr	r3, [pc, #388]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffe:	623b      	str	r3, [r7, #32]
 8001000:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001002:	4b5e      	ldr	r3, [pc, #376]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a5d      	ldr	r2, [pc, #372]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b5b      	ldr	r3, [pc, #364]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE14     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI2_SCKE13_Pin;
 800101a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001024:	2301      	movs	r3, #1
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800102c:	2305      	movs	r3, #5
 800102e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_SCKE13_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	4852      	ldr	r0, [pc, #328]	; (8001180 <HAL_SPI_MspInit+0x1b8>)
 8001038:	f001 fede 	bl	8002df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin|GPIO_PIN_14;
 800103c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800104e:	2305      	movs	r3, #5
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	4619      	mov	r1, r3
 8001058:	4849      	ldr	r0, [pc, #292]	; (8001180 <HAL_SPI_MspInit+0x1b8>)
 800105a:	f001 fecd 	bl	8002df8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800105e:	e086      	b.n	800116e <HAL_SPI_MspInit+0x1a6>
  else if(spiHandle->Instance==SPI2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a47      	ldr	r2, [pc, #284]	; (8001184 <HAL_SPI_MspInit+0x1bc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d144      	bne.n	80010f4 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800106a:	4b44      	ldr	r3, [pc, #272]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106e:	4a43      	ldr	r2, [pc, #268]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001074:	6593      	str	r3, [r2, #88]	; 0x58
 8001076:	4b41      	ldr	r3, [pc, #260]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001082:	4b3e      	ldr	r3, [pc, #248]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	4a3d      	ldr	r2, [pc, #244]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108e:	4b3b      	ldr	r3, [pc, #236]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	4b38      	ldr	r3, [pc, #224]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	4a37      	ldr	r2, [pc, #220]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a6:	4b35      	ldr	r3, [pc, #212]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_SCK_Pin;
 80010b2:	230a      	movs	r3, #10
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c2:	2305      	movs	r3, #5
 80010c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ca:	4619      	mov	r1, r3
 80010cc:	482e      	ldr	r0, [pc, #184]	; (8001188 <HAL_SPI_MspInit+0x1c0>)
 80010ce:	f001 fe93 	bl	8002df8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 80010d2:	2308      	movs	r3, #8
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010e2:	2305      	movs	r3, #5
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	4827      	ldr	r0, [pc, #156]	; (800118c <HAL_SPI_MspInit+0x1c4>)
 80010ee:	f001 fe83 	bl	8002df8 <HAL_GPIO_Init>
}
 80010f2:	e03c      	b.n	800116e <HAL_SPI_MspInit+0x1a6>
  else if(spiHandle->Instance==SPI3)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a25      	ldr	r2, [pc, #148]	; (8001190 <HAL_SPI_MspInit+0x1c8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d137      	bne.n	800116e <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	4a1e      	ldr	r2, [pc, #120]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 8001104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001108:	6593      	str	r3, [r2, #88]	; 0x58
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a18      	ldr	r2, [pc, #96]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_SPI_MspInit+0x1b4>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin;
 800112e:	2330      	movs	r3, #48	; 0x30
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800113e:	2306      	movs	r3, #6
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	4812      	ldr	r0, [pc, #72]	; (8001194 <HAL_SPI_MspInit+0x1cc>)
 800114a:	f001 fe55 	bl	8002df8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin;
 800114e:	2308      	movs	r3, #8
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001156:	2301      	movs	r3, #1
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800115e:	2306      	movs	r3, #6
 8001160:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	480a      	ldr	r0, [pc, #40]	; (8001194 <HAL_SPI_MspInit+0x1cc>)
 800116a:	f001 fe45 	bl	8002df8 <HAL_GPIO_Init>
}
 800116e:	bf00      	nop
 8001170:	3738      	adds	r7, #56	; 0x38
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40013000 	.word	0x40013000
 800117c:	40021000 	.word	0x40021000
 8001180:	48001000 	.word	0x48001000
 8001184:	40003800 	.word	0x40003800
 8001188:	48000c00 	.word	0x48000c00
 800118c:	48000800 	.word	0x48000800
 8001190:	40003c00 	.word	0x40003c00
 8001194:	48000400 	.word	0x48000400

08001198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <HAL_MspInit+0x44>)
 80011a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a2:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <HAL_MspInit+0x44>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6613      	str	r3, [r2, #96]	; 0x60
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_MspInit+0x44>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_MspInit+0x44>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ba:	4a08      	ldr	r2, [pc, #32]	; (80011dc <HAL_MspInit+0x44>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	6593      	str	r3, [r2, #88]	; 0x58
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_MspInit+0x44>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 f9c0 	bl	80015b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <DMA1_Channel4_IRQHandler+0x10>)
 800123a:	f001 fccb 	bl	8002bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200004b8 	.word	0x200004b8

08001248 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <SDMMC1_IRQHandler+0x10>)
 800124e:	f005 f9cb 	bl	80065e8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000620 	.word	0x20000620

0800125c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <TIM6_DAC_IRQHandler+0x10>)
 8001262:	f006 fbca 	bl	80079fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200007cc 	.word	0x200007cc

08001270 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <OTG_FS_IRQHandler+0x10>)
 8001276:	f002 f9e2 	bl	800363e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20001d84 	.word	0x20001d84

08001284 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <SystemInit+0x20>)
 800128a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128e:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <SystemInit+0x20>)
 8001290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <MX_TIM2_Init+0x98>)
 80012c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_TIM2_Init+0x98>)
 80012d0:	2277      	movs	r2, #119	; 0x77
 80012d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_TIM2_Init+0x98>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_TIM2_Init+0x98>)
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_TIM2_Init+0x98>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <MX_TIM2_Init+0x98>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ee:	4814      	ldr	r0, [pc, #80]	; (8001340 <MX_TIM2_Init+0x98>)
 80012f0:	f006 fb2c 	bl	800794c <HAL_TIM_Base_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012fa:	f7ff fd17 	bl	8000d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001302:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4619      	mov	r1, r3
 800130a:	480d      	ldr	r0, [pc, #52]	; (8001340 <MX_TIM2_Init+0x98>)
 800130c:	f006 fc94 	bl	8007c38 <HAL_TIM_ConfigClockSource>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001316:	f7ff fd09 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <MX_TIM2_Init+0x98>)
 8001328:	f006 feb6 	bl	8008098 <HAL_TIMEx_MasterConfigSynchronization>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001332:	f7ff fcfb 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	3720      	adds	r7, #32
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000818 	.word	0x20000818

08001344 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_TIM6_Init+0x64>)
 8001356:	4a15      	ldr	r2, [pc, #84]	; (80013ac <MX_TIM6_Init+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <MX_TIM6_Init+0x64>)
 800135c:	2277      	movs	r2, #119	; 0x77
 800135e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_TIM6_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <MX_TIM6_Init+0x64>)
 8001368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800136c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_TIM6_Init+0x64>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <MX_TIM6_Init+0x64>)
 8001376:	f006 fae9 	bl	800794c <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001380:	f7ff fcd4 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_TIM6_Init+0x64>)
 8001392:	f006 fe81 	bl	8008098 <HAL_TIMEx_MasterConfigSynchronization>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800139c:	f7ff fcc6 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200007cc 	.word	0x200007cc
 80013ac:	40001000 	.word	0x40001000

080013b0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_TIM7_Init+0x64>)
 80013c2:	4a15      	ldr	r2, [pc, #84]	; (8001418 <MX_TIM7_Init+0x68>)
 80013c4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 119;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_TIM7_Init+0x64>)
 80013c8:	2277      	movs	r2, #119	; 0x77
 80013ca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_TIM7_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xFFFF;
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <MX_TIM7_Init+0x64>)
 80013d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_TIM7_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <MX_TIM7_Init+0x64>)
 80013e2:	f006 fab3 	bl	800794c <HAL_TIM_Base_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80013ec:	f7ff fc9e 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_TIM7_Init+0x64>)
 80013fe:	f006 fe4b 	bl	8008098 <HAL_TIMEx_MasterConfigSynchronization>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001408:	f7ff fc90 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000864 	.word	0x20000864
 8001418:	40001400 	.word	0x40001400

0800141c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142c:	d10c      	bne.n	8001448 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <HAL_TIM_Base_MspInit+0x8c>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001432:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <HAL_TIM_Base_MspInit+0x8c>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6593      	str	r3, [r2, #88]	; 0x58
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_TIM_Base_MspInit+0x8c>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001446:	e02a      	b.n	800149e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM6)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a17      	ldr	r2, [pc, #92]	; (80014ac <HAL_TIM_Base_MspInit+0x90>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d114      	bne.n	800147c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_TIM_Base_MspInit+0x8c>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <HAL_TIM_Base_MspInit+0x8c>)
 8001458:	f043 0310 	orr.w	r3, r3, #16
 800145c:	6593      	str	r3, [r2, #88]	; 0x58
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_TIM_Base_MspInit+0x8c>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2036      	movs	r0, #54	; 0x36
 8001470:	f001 f8a5 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001474:	2036      	movs	r0, #54	; 0x36
 8001476:	f001 f8be 	bl	80025f6 <HAL_NVIC_EnableIRQ>
}
 800147a:	e010      	b.n	800149e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM7)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <HAL_TIM_Base_MspInit+0x94>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d10b      	bne.n	800149e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_TIM_Base_MspInit+0x8c>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148a:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <HAL_TIM_Base_MspInit+0x8c>)
 800148c:	f043 0320 	orr.w	r3, r3, #32
 8001490:	6593      	str	r3, [r2, #88]	; 0x58
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_TIM_Base_MspInit+0x8c>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	f003 0320 	and.w	r3, r3, #32
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40001000 	.word	0x40001000
 80014b0:	40001400 	.word	0x40001400

080014b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b8:	f7ff fee4 	bl	8001284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80014be:	490d      	ldr	r1, [pc, #52]	; (80014f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014c0:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <LoopForever+0xe>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d4:	4c0a      	ldr	r4, [pc, #40]	; (8001500 <LoopForever+0x16>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e2:	f00a fe51 	bl	800c188 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014e6:	f7ff fb6d 	bl	8000bc4 <main>

080014ea <LoopForever>:

LoopForever:
    b LoopForever
 80014ea:	e7fe      	b.n	80014ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014ec:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80014f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f4:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80014f8:	0800c288 	.word	0x0800c288
  ldr r2, =_sbss
 80014fc:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001500:	20002290 	.word	0x20002290

08001504 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC1_IRQHandler>

08001506 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001510:	2003      	movs	r0, #3
 8001512:	f001 f849 	bl	80025a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001516:	2000      	movs	r0, #0
 8001518:	f000 f80e 	bl	8001538 <HAL_InitTick>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	71fb      	strb	r3, [r7, #7]
 8001526:	e001      	b.n	800152c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001528:	f7ff fe36 	bl	8001198 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800152c:	79fb      	ldrb	r3, [r7, #7]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <HAL_InitTick+0x6c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d023      	beq.n	8001594 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_InitTick+0x70>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_InitTick+0x6c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155a:	fbb3 f3f1 	udiv	r3, r3, r1
 800155e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f001 f855 	bl	8002612 <HAL_SYSTICK_Config>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10f      	bne.n	800158e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b0f      	cmp	r3, #15
 8001572:	d809      	bhi.n	8001588 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001574:	2200      	movs	r2, #0
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f001 f81f 	bl	80025be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001580:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_InitTick+0x74>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e007      	b.n	8001598 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	e004      	b.n	8001598 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	e001      	b.n	8001598 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000004 	.word	0x20000004

080015b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x20>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_IncTick+0x24>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <HAL_IncTick+0x24>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000008 	.word	0x20000008
 80015d4:	200008b0 	.word	0x200008b0

080015d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return uwTick;
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <HAL_GetTick+0x14>)
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	200008b0 	.word	0x200008b0

080015f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff ffee 	bl	80015d8 <HAL_GetTick>
 80015fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001608:	d005      	beq.n	8001616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_Delay+0x44>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4413      	add	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001616:	bf00      	nop
 8001618:	f7ff ffde 	bl	80015d8 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	429a      	cmp	r2, r3
 8001626:	d8f7      	bhi.n	8001618 <HAL_Delay+0x28>
  {
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000008 	.word	0x20000008

08001638 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	609a      	str	r2, [r3, #8]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	609a      	str	r2, [r3, #8]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3360      	adds	r3, #96	; 0x60
 80016b2:	461a      	mov	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <LL_ADC_SetOffset+0x44>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	4313      	orrs	r3, r2
 80016d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016d8:	bf00      	nop
 80016da:	371c      	adds	r7, #28
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	03fff000 	.word	0x03fff000

080016e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3360      	adds	r3, #96	; 0x60
 80016f6:	461a      	mov	r2, r3
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001708:	4618      	mov	r0, r3
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3360      	adds	r3, #96	; 0x60
 8001724:	461a      	mov	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	431a      	orrs	r2, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800173e:	bf00      	nop
 8001740:	371c      	adds	r7, #28
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	615a      	str	r2, [r3, #20]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3330      	adds	r3, #48	; 0x30
 8001780:	461a      	mov	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	4413      	add	r3, r2
 800178e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	f003 031f 	and.w	r3, r3, #31
 800179a:	211f      	movs	r1, #31
 800179c:	fa01 f303 	lsl.w	r3, r1, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	401a      	ands	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	0e9b      	lsrs	r3, r3, #26
 80017a8:	f003 011f 	and.w	r1, r3, #31
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f003 031f 	and.w	r3, r3, #31
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	431a      	orrs	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017bc:	bf00      	nop
 80017be:	371c      	adds	r7, #28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b087      	sub	sp, #28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3314      	adds	r3, #20
 80017d8:	461a      	mov	r2, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	0e5b      	lsrs	r3, r3, #25
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	4413      	add	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	0d1b      	lsrs	r3, r3, #20
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	2107      	movs	r1, #7
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	401a      	ands	r2, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	0d1b      	lsrs	r3, r3, #20
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	431a      	orrs	r2, r3
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001812:	bf00      	nop
 8001814:	371c      	adds	r7, #28
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001838:	43db      	mvns	r3, r3
 800183a:	401a      	ands	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0318 	and.w	r3, r3, #24
 8001842:	4908      	ldr	r1, [pc, #32]	; (8001864 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001844:	40d9      	lsrs	r1, r3
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	400b      	ands	r3, r1
 800184a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800184e:	431a      	orrs	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	0007ffff 	.word	0x0007ffff

08001868 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001878:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6093      	str	r3, [r2, #8]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800189c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018a0:	d101      	bne.n	80018a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018f0:	d101      	bne.n	80018f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <LL_ADC_IsEnabled+0x18>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <LL_ADC_IsEnabled+0x1a>
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	2b04      	cmp	r3, #4
 800193c:	d101      	bne.n	8001942 <LL_ADC_REG_IsConversionOngoing+0x18>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	2b08      	cmp	r3, #8
 8001962:	d101      	bne.n	8001968 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e12f      	b.n	8001bf2 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	2b00      	cmp	r3, #0
 800199e:	d109      	bne.n	80019b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7fe fc8f 	bl	80002c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff67 	bl	800188c <LL_ADC_IsDeepPowerDownEnabled>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d004      	beq.n	80019ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff4d 	bl	8001868 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ff82 	bl	80018dc <LL_ADC_IsInternalRegulatorEnabled>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d115      	bne.n	8001a0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ff66 	bl	80018b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019e8:	4b84      	ldr	r3, [pc, #528]	; (8001bfc <HAL_ADC_Init+0x284>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	099b      	lsrs	r3, r3, #6
 80019ee:	4a84      	ldr	r2, [pc, #528]	; (8001c00 <HAL_ADC_Init+0x288>)
 80019f0:	fba2 2303 	umull	r2, r3, r2, r3
 80019f4:	099b      	lsrs	r3, r3, #6
 80019f6:	3301      	adds	r3, #1
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019fc:	e002      	b.n	8001a04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f9      	bne.n	80019fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ff64 	bl	80018dc <LL_ADC_IsInternalRegulatorEnabled>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10d      	bne.n	8001a36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	f043 0210 	orr.w	r2, r3, #16
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	f043 0201 	orr.w	r2, r3, #1
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff75 	bl	800192a <LL_ADC_REG_IsConversionOngoing>
 8001a40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 80c8 	bne.w	8001be0 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f040 80c4 	bne.w	8001be0 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a60:	f043 0202 	orr.w	r2, r3, #2
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff49 	bl	8001904 <LL_ADC_IsEnabled>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10b      	bne.n	8001a90 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a78:	4862      	ldr	r0, [pc, #392]	; (8001c04 <HAL_ADC_Init+0x28c>)
 8001a7a:	f7ff ff43 	bl	8001904 <LL_ADC_IsEnabled>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d105      	bne.n	8001a90 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	485f      	ldr	r0, [pc, #380]	; (8001c08 <HAL_ADC_Init+0x290>)
 8001a8c:	f7ff fdd4 	bl	8001638 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7e5b      	ldrb	r3, [r3, #25]
 8001a94:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a9a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001aa0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001aa6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d106      	bne.n	8001acc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	045b      	lsls	r3, r3, #17
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d009      	beq.n	8001ae8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <HAL_ADC_Init+0x294>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	69b9      	ldr	r1, [r7, #24]
 8001af8:	430b      	orrs	r3, r1
 8001afa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff12 	bl	800192a <LL_ADC_REG_IsConversionOngoing>
 8001b06:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff1f 	bl	8001950 <LL_ADC_INJ_IsConversionOngoing>
 8001b12:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d140      	bne.n	8001b9c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d13d      	bne.n	8001b9c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	7e1b      	ldrb	r3, [r3, #24]
 8001b28:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b2a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b32:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b42:	f023 0306 	bic.w	r3, r3, #6
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	69b9      	ldr	r1, [r7, #24]
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d118      	bne.n	8001b8c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b64:	f023 0304 	bic.w	r3, r3, #4
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b70:	4311      	orrs	r1, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b76:	4311      	orrs	r1, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0201 	orr.w	r2, r2, #1
 8001b88:	611a      	str	r2, [r3, #16]
 8001b8a:	e007      	b.n	8001b9c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0201 	bic.w	r2, r2, #1
 8001b9a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d10c      	bne.n	8001bbe <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f023 010f 	bic.w	r1, r3, #15
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	1e5a      	subs	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
 8001bbc:	e007      	b.n	8001bce <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 020f 	bic.w	r2, r2, #15
 8001bcc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	f023 0303 	bic.w	r3, r3, #3
 8001bd6:	f043 0201 	orr.w	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	659a      	str	r2, [r3, #88]	; 0x58
 8001bde:	e007      	b.n	8001bf0 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	f043 0210 	orr.w	r2, r3, #16
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3720      	adds	r7, #32
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	053e2d63 	.word	0x053e2d63
 8001c04:	50040000 	.word	0x50040000
 8001c08:	50040300 	.word	0x50040300
 8001c0c:	fff0c007 	.word	0xfff0c007

08001c10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0b6      	sub	sp, #216	; 0xd8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x22>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e3d5      	b.n	80023de <HAL_ADC_ConfigChannel+0x7ce>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fe73 	bl	800192a <LL_ADC_REG_IsConversionOngoing>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 83ba 	bne.w	80023c0 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d824      	bhi.n	8001c9e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	3b02      	subs	r3, #2
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d81b      	bhi.n	8001c96 <HAL_ADC_ConfigChannel+0x86>
 8001c5e:	a201      	add	r2, pc, #4	; (adr r2, 8001c64 <HAL_ADC_ConfigChannel+0x54>)
 8001c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c64:	08001c75 	.word	0x08001c75
 8001c68:	08001c7d 	.word	0x08001c7d
 8001c6c:	08001c85 	.word	0x08001c85
 8001c70:	08001c8d 	.word	0x08001c8d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	220c      	movs	r2, #12
 8001c78:	605a      	str	r2, [r3, #4]
          break;
 8001c7a:	e011      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	2212      	movs	r2, #18
 8001c80:	605a      	str	r2, [r3, #4]
          break;
 8001c82:	e00d      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	2218      	movs	r2, #24
 8001c88:	605a      	str	r2, [r3, #4]
          break;
 8001c8a:	e009      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c92:	605a      	str	r2, [r3, #4]
          break;
 8001c94:	e004      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2206      	movs	r2, #6
 8001c9a:	605a      	str	r2, [r3, #4]
          break;
 8001c9c:	e000      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001c9e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	f7ff fd5f 	bl	8001770 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fe37 	bl	800192a <LL_ADC_REG_IsConversionOngoing>
 8001cbc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fe43 	bl	8001950 <LL_ADC_INJ_IsConversionOngoing>
 8001cca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f040 81c1 	bne.w	800205a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f040 81bc 	bne.w	800205a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cea:	d10f      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f7ff fd66 	bl	80017c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fd20 	bl	800174a <LL_ADC_SetSamplingTimeCommonConfig>
 8001d0a:	e00e      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6819      	ldr	r1, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f7ff fd55 	bl	80017c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fd10 	bl	800174a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	08db      	lsrs	r3, r3, #3
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d00a      	beq.n	8001d62 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	6919      	ldr	r1, [r3, #16]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d5c:	f7ff fca0 	bl	80016a0 <LL_ADC_SetOffset>
 8001d60:	e17b      	b.n	800205a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fcbd 	bl	80016e8 <LL_ADC_GetOffsetChannel>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10a      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x17e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fcb2 	bl	80016e8 <LL_ADC_GetOffsetChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	0e9b      	lsrs	r3, r3, #26
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	e01e      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x1bc>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fca7 	bl	80016e8 <LL_ADC_GetOffsetChannel>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001db0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001db4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	e004      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001dc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x1d4>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	e018      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x206>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001df8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001e08:	2320      	movs	r3, #32
 8001e0a:	e004      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001e0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d106      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fc76 	bl	8001714 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fc5a 	bl	80016e8 <LL_ADC_GetOffsetChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10a      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x244>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2101      	movs	r1, #1
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fc4f 	bl	80016e8 <LL_ADC_GetOffsetChannel>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	0e9b      	lsrs	r3, r3, #26
 8001e4e:	f003 021f 	and.w	r2, r3, #31
 8001e52:	e01e      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x282>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2101      	movs	r1, #1
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fc44 	bl	80016e8 <LL_ADC_GetOffsetChannel>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001e82:	2320      	movs	r3, #32
 8001e84:	e004      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001e86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d105      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x29a>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	0e9b      	lsrs	r3, r3, #26
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	e018      	b.n	8001edc <HAL_ADC_ConfigChannel+0x2cc>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ebe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ec2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ec6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001ece:	2320      	movs	r3, #32
 8001ed0:	e004      	b.n	8001edc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001ed2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d106      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fc13 	bl	8001714 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2102      	movs	r1, #2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fbf7 	bl	80016e8 <LL_ADC_GetOffsetChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10a      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x30a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2102      	movs	r1, #2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fbec 	bl	80016e8 <LL_ADC_GetOffsetChannel>
 8001f10:	4603      	mov	r3, r0
 8001f12:	0e9b      	lsrs	r3, r3, #26
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	e01e      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x348>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2102      	movs	r1, #2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fbe1 	bl	80016e8 <LL_ADC_GetOffsetChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001f48:	2320      	movs	r3, #32
 8001f4a:	e004      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001f4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d105      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x360>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	0e9b      	lsrs	r3, r3, #26
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	e016      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x38e>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001f90:	2320      	movs	r3, #32
 8001f92:	e004      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d106      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2102      	movs	r1, #2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fbb2 	bl	8001714 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2103      	movs	r1, #3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fb96 	bl	80016e8 <LL_ADC_GetOffsetChannel>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10a      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x3cc>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2103      	movs	r1, #3
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fb8b 	bl	80016e8 <LL_ADC_GetOffsetChannel>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	0e9b      	lsrs	r3, r3, #26
 8001fd6:	f003 021f 	and.w	r2, r3, #31
 8001fda:	e017      	b.n	800200c <HAL_ADC_ConfigChannel+0x3fc>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2103      	movs	r1, #3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fb80 	bl	80016e8 <LL_ADC_GetOffsetChannel>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ff4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ff6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001ffe:	2320      	movs	r3, #32
 8002000:	e003      	b.n	800200a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002004:	fab3 f383 	clz	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002014:	2b00      	cmp	r3, #0
 8002016:	d105      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x414>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0e9b      	lsrs	r3, r3, #26
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	e011      	b.n	8002048 <HAL_ADC_ConfigChannel+0x438>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002034:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800203c:	2320      	movs	r3, #32
 800203e:	e003      	b.n	8002048 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002048:	429a      	cmp	r2, r3
 800204a:	d106      	bne.n	800205a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2200      	movs	r2, #0
 8002052:	2103      	movs	r1, #3
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fb5d 	bl	8001714 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fc50 	bl	8001904 <LL_ADC_IsEnabled>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 8140 	bne.w	80022ec <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	6819      	ldr	r1, [r3, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	461a      	mov	r2, r3
 800207a:	f7ff fbd1 	bl	8001820 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	4a8f      	ldr	r2, [pc, #572]	; (80022c0 <HAL_ADC_ConfigChannel+0x6b0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	f040 8131 	bne.w	80022ec <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10b      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x4a2>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	0e9b      	lsrs	r3, r3, #26
 80020a0:	3301      	adds	r3, #1
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	2b09      	cmp	r3, #9
 80020a8:	bf94      	ite	ls
 80020aa:	2301      	movls	r3, #1
 80020ac:	2300      	movhi	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	e019      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x4d6>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80020c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020c2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80020c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80020ca:	2320      	movs	r3, #32
 80020cc:	e003      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80020ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	3301      	adds	r3, #1
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	2b09      	cmp	r3, #9
 80020de:	bf94      	ite	ls
 80020e0:	2301      	movls	r3, #1
 80020e2:	2300      	movhi	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d079      	beq.n	80021de <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d107      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x4f6>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	0e9b      	lsrs	r3, r3, #26
 80020fc:	3301      	adds	r3, #1
 80020fe:	069b      	lsls	r3, r3, #26
 8002100:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002104:	e015      	b.n	8002132 <HAL_ADC_ConfigChannel+0x522>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002116:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800211e:	2320      	movs	r3, #32
 8002120:	e003      	b.n	800212a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	3301      	adds	r3, #1
 800212c:	069b      	lsls	r3, r3, #26
 800212e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x542>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	0e9b      	lsrs	r3, r3, #26
 8002144:	3301      	adds	r3, #1
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	2101      	movs	r1, #1
 800214c:	fa01 f303 	lsl.w	r3, r1, r3
 8002150:	e017      	b.n	8002182 <HAL_ADC_ConfigChannel+0x572>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002162:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800216a:	2320      	movs	r3, #32
 800216c:	e003      	b.n	8002176 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800216e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	3301      	adds	r3, #1
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	2101      	movs	r1, #1
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	ea42 0103 	orr.w	r1, r2, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10a      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x598>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	0e9b      	lsrs	r3, r3, #26
 8002198:	3301      	adds	r3, #1
 800219a:	f003 021f 	and.w	r2, r3, #31
 800219e:	4613      	mov	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4413      	add	r3, r2
 80021a4:	051b      	lsls	r3, r3, #20
 80021a6:	e018      	b.n	80021da <HAL_ADC_ConfigChannel+0x5ca>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80021b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80021ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80021c0:	2320      	movs	r3, #32
 80021c2:	e003      	b.n	80021cc <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80021c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	f003 021f 	and.w	r2, r3, #31
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021da:	430b      	orrs	r3, r1
 80021dc:	e081      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d107      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x5ea>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	0e9b      	lsrs	r3, r3, #26
 80021f0:	3301      	adds	r3, #1
 80021f2:	069b      	lsls	r3, r3, #26
 80021f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021f8:	e015      	b.n	8002226 <HAL_ADC_ConfigChannel+0x616>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002212:	2320      	movs	r3, #32
 8002214:	e003      	b.n	800221e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	fab3 f383 	clz	r3, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	3301      	adds	r3, #1
 8002220:	069b      	lsls	r3, r3, #26
 8002222:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222e:	2b00      	cmp	r3, #0
 8002230:	d109      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x636>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0e9b      	lsrs	r3, r3, #26
 8002238:	3301      	adds	r3, #1
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	2101      	movs	r1, #1
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	e017      	b.n	8002276 <HAL_ADC_ConfigChannel+0x666>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	61fb      	str	r3, [r7, #28]
  return result;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800225e:	2320      	movs	r3, #32
 8002260:	e003      	b.n	800226a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	3301      	adds	r3, #1
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	2101      	movs	r1, #1
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	ea42 0103 	orr.w	r1, r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10d      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x692>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	0e9b      	lsrs	r3, r3, #26
 800228c:	3301      	adds	r3, #1
 800228e:	f003 021f 	and.w	r2, r3, #31
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	3b1e      	subs	r3, #30
 800229a:	051b      	lsls	r3, r3, #20
 800229c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022a0:	e01e      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x6d0>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	613b      	str	r3, [r7, #16]
  return result;
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d104      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80022ba:	2320      	movs	r3, #32
 80022bc:	e006      	b.n	80022cc <HAL_ADC_ConfigChannel+0x6bc>
 80022be:	bf00      	nop
 80022c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	f003 021f 	and.w	r2, r3, #31
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	3b1e      	subs	r3, #30
 80022da:	051b      	lsls	r3, r3, #20
 80022dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e0:	430b      	orrs	r3, r1
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	6892      	ldr	r2, [r2, #8]
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7ff fa6e 	bl	80017c8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_ADC_ConfigChannel+0x7d8>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d06c      	beq.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022f8:	483c      	ldr	r0, [pc, #240]	; (80023ec <HAL_ADC_ConfigChannel+0x7dc>)
 80022fa:	f7ff f9c3 	bl	8001684 <LL_ADC_GetCommonPathInternalCh>
 80022fe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a3a      	ldr	r2, [pc, #232]	; (80023f0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d127      	bne.n	800235c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800230c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d121      	bne.n	800235c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a35      	ldr	r2, [pc, #212]	; (80023f4 <HAL_ADC_ConfigChannel+0x7e4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d157      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002322:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002326:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800232a:	4619      	mov	r1, r3
 800232c:	482f      	ldr	r0, [pc, #188]	; (80023ec <HAL_ADC_ConfigChannel+0x7dc>)
 800232e:	f7ff f996 	bl	800165e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002332:	4b31      	ldr	r3, [pc, #196]	; (80023f8 <HAL_ADC_ConfigChannel+0x7e8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	099b      	lsrs	r3, r3, #6
 8002338:	4a30      	ldr	r2, [pc, #192]	; (80023fc <HAL_ADC_ConfigChannel+0x7ec>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800234c:	e002      	b.n	8002354 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3b01      	subs	r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f9      	bne.n	800234e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800235a:	e03a      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a27      	ldr	r2, [pc, #156]	; (8002400 <HAL_ADC_ConfigChannel+0x7f0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d113      	bne.n	800238e <HAL_ADC_ConfigChannel+0x77e>
 8002366:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800236a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10d      	bne.n	800238e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1f      	ldr	r2, [pc, #124]	; (80023f4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d12a      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800237c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002384:	4619      	mov	r1, r3
 8002386:	4819      	ldr	r0, [pc, #100]	; (80023ec <HAL_ADC_ConfigChannel+0x7dc>)
 8002388:	f7ff f969 	bl	800165e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800238c:	e021      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <HAL_ADC_ConfigChannel+0x7f4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d11c      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002398:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800239c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d116      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <HAL_ADC_ConfigChannel+0x7e4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d111      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023b6:	4619      	mov	r1, r3
 80023b8:	480c      	ldr	r0, [pc, #48]	; (80023ec <HAL_ADC_ConfigChannel+0x7dc>)
 80023ba:	f7ff f950 	bl	800165e <LL_ADC_SetCommonPathInternalCh>
 80023be:	e008      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80023da:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	37d8      	adds	r7, #216	; 0xd8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	80080000 	.word	0x80080000
 80023ec:	50040300 	.word	0x50040300
 80023f0:	c7520000 	.word	0xc7520000
 80023f4:	50040000 	.word	0x50040000
 80023f8:	20000000 	.word	0x20000000
 80023fc:	053e2d63 	.word	0x053e2d63
 8002400:	cb840000 	.word	0xcb840000
 8002404:	80000001 	.word	0x80000001

08002408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <__NVIC_SetPriorityGrouping+0x44>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002424:	4013      	ands	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243a:	4a04      	ldr	r2, [pc, #16]	; (800244c <__NVIC_SetPriorityGrouping+0x44>)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	60d3      	str	r3, [r2, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <__NVIC_GetPriorityGrouping+0x18>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	f003 0307 	and.w	r3, r3, #7
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	2b00      	cmp	r3, #0
 800247c:	db0b      	blt.n	8002496 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	f003 021f 	and.w	r2, r3, #31
 8002484:	4907      	ldr	r1, [pc, #28]	; (80024a4 <__NVIC_EnableIRQ+0x38>)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	2001      	movs	r0, #1
 800248e:	fa00 f202 	lsl.w	r2, r0, r2
 8002492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000e100 	.word	0xe000e100

080024a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	6039      	str	r1, [r7, #0]
 80024b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	db0a      	blt.n	80024d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	490c      	ldr	r1, [pc, #48]	; (80024f4 <__NVIC_SetPriority+0x4c>)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	0112      	lsls	r2, r2, #4
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	440b      	add	r3, r1
 80024cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d0:	e00a      	b.n	80024e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4908      	ldr	r1, [pc, #32]	; (80024f8 <__NVIC_SetPriority+0x50>)
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	3b04      	subs	r3, #4
 80024e0:	0112      	lsls	r2, r2, #4
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	440b      	add	r3, r1
 80024e6:	761a      	strb	r2, [r3, #24]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000e100 	.word	0xe000e100
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b089      	sub	sp, #36	; 0x24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f1c3 0307 	rsb	r3, r3, #7
 8002516:	2b04      	cmp	r3, #4
 8002518:	bf28      	it	cs
 800251a:	2304      	movcs	r3, #4
 800251c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3304      	adds	r3, #4
 8002522:	2b06      	cmp	r3, #6
 8002524:	d902      	bls.n	800252c <NVIC_EncodePriority+0x30>
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3b03      	subs	r3, #3
 800252a:	e000      	b.n	800252e <NVIC_EncodePriority+0x32>
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	f04f 32ff 	mov.w	r2, #4294967295
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43da      	mvns	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	401a      	ands	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002544:	f04f 31ff 	mov.w	r1, #4294967295
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fa01 f303 	lsl.w	r3, r1, r3
 800254e:	43d9      	mvns	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	4313      	orrs	r3, r2
         );
}
 8002556:	4618      	mov	r0, r3
 8002558:	3724      	adds	r7, #36	; 0x24
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002574:	d301      	bcc.n	800257a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002576:	2301      	movs	r3, #1
 8002578:	e00f      	b.n	800259a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257a:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <SysTick_Config+0x40>)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3b01      	subs	r3, #1
 8002580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002582:	210f      	movs	r1, #15
 8002584:	f04f 30ff 	mov.w	r0, #4294967295
 8002588:	f7ff ff8e 	bl	80024a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <SysTick_Config+0x40>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <SysTick_Config+0x40>)
 8002594:	2207      	movs	r2, #7
 8002596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	e000e010 	.word	0xe000e010

080025a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff ff29 	bl	8002408 <__NVIC_SetPriorityGrouping>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4603      	mov	r3, r0
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025d0:	f7ff ff3e 	bl	8002450 <__NVIC_GetPriorityGrouping>
 80025d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	6978      	ldr	r0, [r7, #20]
 80025dc:	f7ff ff8e 	bl	80024fc <NVIC_EncodePriority>
 80025e0:	4602      	mov	r2, r0
 80025e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff5d 	bl	80024a8 <__NVIC_SetPriority>
}
 80025ee:	bf00      	nop
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff31 	bl	800246c <__NVIC_EnableIRQ>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ffa2 	bl	8002564 <SysTick_Config>
 8002620:	4603      	mov	r3, r0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e0ac      	b.n	8002798 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f9d2 	bl	80029ec <DFSDM_GetChannelFromInstance>
 8002648:	4603      	mov	r3, r0
 800264a:	4a55      	ldr	r2, [pc, #340]	; (80027a0 <HAL_DFSDM_ChannelInit+0x174>)
 800264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e09f      	b.n	8002798 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fd ff9d 	bl	8000598 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800265e:	4b51      	ldr	r3, [pc, #324]	; (80027a4 <HAL_DFSDM_ChannelInit+0x178>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3301      	adds	r3, #1
 8002664:	4a4f      	ldr	r2, [pc, #316]	; (80027a4 <HAL_DFSDM_ChannelInit+0x178>)
 8002666:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002668:	4b4e      	ldr	r3, [pc, #312]	; (80027a4 <HAL_DFSDM_ChannelInit+0x178>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d125      	bne.n	80026bc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002670:	4b4d      	ldr	r3, [pc, #308]	; (80027a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a4c      	ldr	r2, [pc, #304]	; (80027a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002676:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800267a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800267c:	4b4a      	ldr	r3, [pc, #296]	; (80027a8 <HAL_DFSDM_ChannelInit+0x17c>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4948      	ldr	r1, [pc, #288]	; (80027a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800268a:	4b47      	ldr	r3, [pc, #284]	; (80027a8 <HAL_DFSDM_ChannelInit+0x17c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a46      	ldr	r2, [pc, #280]	; (80027a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002690:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002694:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	791b      	ldrb	r3, [r3, #4]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d108      	bne.n	80026b0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800269e:	4b42      	ldr	r3, [pc, #264]	; (80027a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	041b      	lsls	r3, r3, #16
 80026aa:	493f      	ldr	r1, [pc, #252]	; (80027a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80026b0:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a3c      	ldr	r2, [pc, #240]	; (80027a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80026b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026ba:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80026ca:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026da:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80026e0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 020f 	bic.w	r2, r2, #15
 80026f8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6819      	ldr	r1, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002720:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6899      	ldr	r1, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f002 0207 	and.w	r2, r2, #7
 800274c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002778:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f930 	bl	80029ec <DFSDM_GetChannelFromInstance>
 800278c:	4602      	mov	r2, r0
 800278e:	4904      	ldr	r1, [pc, #16]	; (80027a0 <HAL_DFSDM_ChannelInit+0x174>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200001b8 	.word	0x200001b8
 80027a4:	200001b4 	.word	0x200001b4
 80027a8:	40016000 	.word	0x40016000

080027ac <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0ca      	b.n	8002954 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a66      	ldr	r2, [pc, #408]	; (800295c <HAL_DFSDM_FilterInit+0x1b0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d109      	bne.n	80027dc <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d003      	beq.n	80027d8 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0bb      	b.n	8002954 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7fd fe4f 	bl	8000498 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002808:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	7a1b      	ldrb	r3, [r3, #8]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d108      	bne.n	8002824 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e007      	b.n	8002834 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002832:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7a5b      	ldrb	r3, [r3, #9]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d108      	bne.n	800284e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	e007      	b.n	800285e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800285c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800286c:	f023 0308 	bic.w	r3, r3, #8
 8002870:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d108      	bne.n	800288c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6819      	ldr	r1, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7c1b      	ldrb	r3, [r3, #16]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d108      	bne.n	80028a6 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0210 	orr.w	r2, r2, #16
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	e007      	b.n	80028b6 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0210 	bic.w	r2, r2, #16
 80028b4:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7c5b      	ldrb	r3, [r3, #17]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d108      	bne.n	80028d0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0220 	orr.w	r2, r2, #32
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	e007      	b.n	80028e0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0220 	bic.w	r2, r2, #32
 80028de:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80028ee:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80028f2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6959      	ldr	r1, [r3, #20]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	3b01      	subs	r3, #1
 8002904:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002906:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800290e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699a      	ldr	r2, [r3, #24]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	7c1a      	ldrb	r2, [r3, #16]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0201 	orr.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40016100 	.word	0x40016100

08002960 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002976:	2b00      	cmp	r3, #0
 8002978:	d02e      	beq.n	80029d8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002980:	2bff      	cmp	r3, #255	; 0xff
 8002982:	d029      	beq.n	80029d8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002996:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d10d      	bne.n	80029ba <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80029ac:	431a      	orrs	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	e00a      	b.n	80029d0 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
 80029d6:	e001      	b.n	80029dc <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <DFSDM_GetChannelFromInstance+0x7c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d102      	bne.n	8002a02 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e02b      	b.n	8002a5a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <DFSDM_GetChannelFromInstance+0x80>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d102      	bne.n	8002a10 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	e024      	b.n	8002a5a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <DFSDM_GetChannelFromInstance+0x84>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d102      	bne.n	8002a1e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e01d      	b.n	8002a5a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a14      	ldr	r2, [pc, #80]	; (8002a74 <DFSDM_GetChannelFromInstance+0x88>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d102      	bne.n	8002a2c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002a26:	2304      	movs	r3, #4
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	e016      	b.n	8002a5a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <DFSDM_GetChannelFromInstance+0x8c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d102      	bne.n	8002a3a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002a34:	2305      	movs	r3, #5
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	e00f      	b.n	8002a5a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <DFSDM_GetChannelFromInstance+0x90>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d102      	bne.n	8002a48 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002a42:	2306      	movs	r3, #6
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	e008      	b.n	8002a5a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <DFSDM_GetChannelFromInstance+0x94>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d102      	bne.n	8002a56 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002a50:	2307      	movs	r3, #7
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	e001      	b.n	8002a5a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002a56:	2303      	movs	r3, #3
 8002a58:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	40016000 	.word	0x40016000
 8002a6c:	40016020 	.word	0x40016020
 8002a70:	40016040 	.word	0x40016040
 8002a74:	40016080 	.word	0x40016080
 8002a78:	400160a0 	.word	0x400160a0
 8002a7c:	400160c0 	.word	0x400160c0
 8002a80:	400160e0 	.word	0x400160e0

08002a84 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e08d      	b.n	8002bb2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <HAL_DMA_Init+0x138>)
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d80f      	bhi.n	8002ac2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b45      	ldr	r3, [pc, #276]	; (8002bc0 <HAL_DMA_Init+0x13c>)
 8002aaa:	4413      	add	r3, r2
 8002aac:	4a45      	ldr	r2, [pc, #276]	; (8002bc4 <HAL_DMA_Init+0x140>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	009a      	lsls	r2, r3, #2
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a42      	ldr	r2, [pc, #264]	; (8002bc8 <HAL_DMA_Init+0x144>)
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40
 8002ac0:	e00e      	b.n	8002ae0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b40      	ldr	r3, [pc, #256]	; (8002bcc <HAL_DMA_Init+0x148>)
 8002aca:	4413      	add	r3, r2
 8002acc:	4a3d      	ldr	r2, [pc, #244]	; (8002bc4 <HAL_DMA_Init+0x140>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	009a      	lsls	r2, r3, #2
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a3c      	ldr	r2, [pc, #240]	; (8002bd0 <HAL_DMA_Init+0x14c>)
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8fe 	bl	8002d34 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b40:	d102      	bne.n	8002b48 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b5c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d010      	beq.n	8002b88 <HAL_DMA_Init+0x104>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d80c      	bhi.n	8002b88 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f91e 	bl	8002db0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	e008      	b.n	8002b9a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40020407 	.word	0x40020407
 8002bc0:	bffdfff8 	.word	0xbffdfff8
 8002bc4:	cccccccd 	.word	0xcccccccd
 8002bc8:	40020000 	.word	0x40020000
 8002bcc:	bffdfbf8 	.word	0xbffdfbf8
 8002bd0:	40020400 	.word	0x40020400

08002bd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	f003 031c 	and.w	r3, r3, #28
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d026      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x7a>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d021      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0204 	bic.w	r2, r2, #4
 8002c26:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	f003 021c 	and.w	r2, r3, #28
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	2104      	movs	r1, #4
 8002c36:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d071      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002c4c:	e06c      	b.n	8002d28 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f003 031c 	and.w	r3, r3, #28
 8002c56:	2202      	movs	r2, #2
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d02e      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0xec>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d029      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10b      	bne.n	8002c92 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 020a 	bic.w	r2, r2, #10
 8002c88:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f003 021c 	and.w	r2, r3, #28
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	2102      	movs	r1, #2
 8002ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d038      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cbe:	e033      	b.n	8002d28 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	f003 031c 	and.w	r3, r3, #28
 8002cc8:	2208      	movs	r2, #8
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d02a      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x156>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d025      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 020e 	bic.w	r2, r2, #14
 8002cec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	f003 021c 	and.w	r2, r3, #28
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002d00:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d004      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
}
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d80a      	bhi.n	8002d5e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	089b      	lsrs	r3, r3, #2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d54:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6493      	str	r3, [r2, #72]	; 0x48
 8002d5c:	e007      	b.n	8002d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	009a      	lsls	r2, r3, #2
 8002d66:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002d68:	4413      	add	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	3b08      	subs	r3, #8
 8002d76:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002d78:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002d84:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40020407 	.word	0x40020407
 8002da4:	4002081c 	.word	0x4002081c
 8002da8:	cccccccd 	.word	0xcccccccd
 8002dac:	40020880 	.word	0x40020880

08002db0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	461a      	mov	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a08      	ldr	r2, [pc, #32]	; (8002df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002dd2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	2201      	movs	r2, #1
 8002dde:	409a      	lsls	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002de4:	bf00      	nop
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	1000823f 	.word	0x1000823f
 8002df4:	40020940 	.word	0x40020940

08002df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e06:	e166      	b.n	80030d6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	fa01 f303 	lsl.w	r3, r1, r3
 8002e14:	4013      	ands	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8158 	beq.w	80030d0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d005      	beq.n	8002e38 <HAL_GPIO_Init+0x40>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d130      	bne.n	8002e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	2203      	movs	r2, #3
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e6e:	2201      	movs	r2, #1
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	f003 0201 	and.w	r2, r3, #1
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d017      	beq.n	8002ed6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d123      	bne.n	8002f2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	08da      	lsrs	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3208      	adds	r2, #8
 8002eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	220f      	movs	r2, #15
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	08da      	lsrs	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3208      	adds	r2, #8
 8002f24:	6939      	ldr	r1, [r7, #16]
 8002f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	2203      	movs	r2, #3
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0203 	and.w	r2, r3, #3
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 80b2 	beq.w	80030d0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6c:	4b61      	ldr	r3, [pc, #388]	; (80030f4 <HAL_GPIO_Init+0x2fc>)
 8002f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f70:	4a60      	ldr	r2, [pc, #384]	; (80030f4 <HAL_GPIO_Init+0x2fc>)
 8002f72:	f043 0301 	orr.w	r3, r3, #1
 8002f76:	6613      	str	r3, [r2, #96]	; 0x60
 8002f78:	4b5e      	ldr	r3, [pc, #376]	; (80030f4 <HAL_GPIO_Init+0x2fc>)
 8002f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f84:	4a5c      	ldr	r2, [pc, #368]	; (80030f8 <HAL_GPIO_Init+0x300>)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	089b      	lsrs	r3, r3, #2
 8002f8a:	3302      	adds	r3, #2
 8002f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	220f      	movs	r2, #15
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fae:	d02b      	beq.n	8003008 <HAL_GPIO_Init+0x210>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a52      	ldr	r2, [pc, #328]	; (80030fc <HAL_GPIO_Init+0x304>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d025      	beq.n	8003004 <HAL_GPIO_Init+0x20c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a51      	ldr	r2, [pc, #324]	; (8003100 <HAL_GPIO_Init+0x308>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d01f      	beq.n	8003000 <HAL_GPIO_Init+0x208>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a50      	ldr	r2, [pc, #320]	; (8003104 <HAL_GPIO_Init+0x30c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d019      	beq.n	8002ffc <HAL_GPIO_Init+0x204>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a4f      	ldr	r2, [pc, #316]	; (8003108 <HAL_GPIO_Init+0x310>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d013      	beq.n	8002ff8 <HAL_GPIO_Init+0x200>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a4e      	ldr	r2, [pc, #312]	; (800310c <HAL_GPIO_Init+0x314>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_GPIO_Init+0x1fc>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a4d      	ldr	r2, [pc, #308]	; (8003110 <HAL_GPIO_Init+0x318>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d007      	beq.n	8002ff0 <HAL_GPIO_Init+0x1f8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a4c      	ldr	r2, [pc, #304]	; (8003114 <HAL_GPIO_Init+0x31c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d101      	bne.n	8002fec <HAL_GPIO_Init+0x1f4>
 8002fe8:	2307      	movs	r3, #7
 8002fea:	e00e      	b.n	800300a <HAL_GPIO_Init+0x212>
 8002fec:	2308      	movs	r3, #8
 8002fee:	e00c      	b.n	800300a <HAL_GPIO_Init+0x212>
 8002ff0:	2306      	movs	r3, #6
 8002ff2:	e00a      	b.n	800300a <HAL_GPIO_Init+0x212>
 8002ff4:	2305      	movs	r3, #5
 8002ff6:	e008      	b.n	800300a <HAL_GPIO_Init+0x212>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	e006      	b.n	800300a <HAL_GPIO_Init+0x212>
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e004      	b.n	800300a <HAL_GPIO_Init+0x212>
 8003000:	2302      	movs	r3, #2
 8003002:	e002      	b.n	800300a <HAL_GPIO_Init+0x212>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <HAL_GPIO_Init+0x212>
 8003008:	2300      	movs	r3, #0
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	f002 0203 	and.w	r2, r2, #3
 8003010:	0092      	lsls	r2, r2, #2
 8003012:	4093      	lsls	r3, r2
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800301a:	4937      	ldr	r1, [pc, #220]	; (80030f8 <HAL_GPIO_Init+0x300>)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	089b      	lsrs	r3, r3, #2
 8003020:	3302      	adds	r3, #2
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003028:	4b3b      	ldr	r3, [pc, #236]	; (8003118 <HAL_GPIO_Init+0x320>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	43db      	mvns	r3, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800304c:	4a32      	ldr	r2, [pc, #200]	; (8003118 <HAL_GPIO_Init+0x320>)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003052:	4b31      	ldr	r3, [pc, #196]	; (8003118 <HAL_GPIO_Init+0x320>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	43db      	mvns	r3, r3
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4013      	ands	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003076:	4a28      	ldr	r2, [pc, #160]	; (8003118 <HAL_GPIO_Init+0x320>)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800307c:	4b26      	ldr	r3, [pc, #152]	; (8003118 <HAL_GPIO_Init+0x320>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	43db      	mvns	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030a0:	4a1d      	ldr	r2, [pc, #116]	; (8003118 <HAL_GPIO_Init+0x320>)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030a6:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <HAL_GPIO_Init+0x320>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030ca:	4a13      	ldr	r2, [pc, #76]	; (8003118 <HAL_GPIO_Init+0x320>)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	3301      	adds	r3, #1
 80030d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f47f ae91 	bne.w	8002e08 <HAL_GPIO_Init+0x10>
  }
}
 80030e6:	bf00      	nop
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40010000 	.word	0x40010000
 80030fc:	48000400 	.word	0x48000400
 8003100:	48000800 	.word	0x48000800
 8003104:	48000c00 	.word	0x48000c00
 8003108:	48001000 	.word	0x48001000
 800310c:	48001400 	.word	0x48001400
 8003110:	48001800 	.word	0x48001800
 8003114:	48001c00 	.word	0x48001c00
 8003118:	40010400 	.word	0x40010400

0800311c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	807b      	strh	r3, [r7, #2]
 8003128:	4613      	mov	r3, r2
 800312a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800312c:	787b      	ldrb	r3, [r7, #1]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003132:	887a      	ldrh	r2, [r7, #2]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003138:	e002      	b.n	8003140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e081      	b.n	8003262 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fd fc6a 	bl	8000a4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2224      	movs	r2, #36	; 0x24
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800319c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d107      	bne.n	80031c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	e006      	b.n	80031d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d104      	bne.n	80031e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003208:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69d9      	ldr	r1, [r3, #28]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1a      	ldr	r2, [r3, #32]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b20      	cmp	r3, #32
 800327e:	d138      	bne.n	80032f2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800328a:	2302      	movs	r3, #2
 800328c:	e032      	b.n	80032f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2224      	movs	r2, #36	; 0x24
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0201 	bic.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032bc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0201 	orr.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e000      	b.n	80032f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032f2:	2302      	movs	r3, #2
  }
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b20      	cmp	r3, #32
 8003314:	d139      	bne.n	800338a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003320:	2302      	movs	r3, #2
 8003322:	e033      	b.n	800338c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2224      	movs	r2, #36	; 0x24
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003352:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0201 	orr.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e000      	b.n	800338c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800338a:	2302      	movs	r3, #2
  }
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800339a:	b08f      	sub	sp, #60	; 0x3c
 800339c:	af0a      	add	r7, sp, #40	; 0x28
 800339e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e116      	b.n	80035d8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d106      	bne.n	80033ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f008 faad 	bl	800b924 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2203      	movs	r2, #3
 80033ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d102      	bne.n	80033e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f005 f964 	bl	80086b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	687e      	ldr	r6, [r7, #4]
 80033f6:	466d      	mov	r5, sp
 80033f8:	f106 0410 	add.w	r4, r6, #16
 80033fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003404:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003408:	e885 0003 	stmia.w	r5, {r0, r1}
 800340c:	1d33      	adds	r3, r6, #4
 800340e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003410:	6838      	ldr	r0, [r7, #0]
 8003412:	f005 f877 	bl	8008504 <USB_CoreInit>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0d7      	b.n	80035d8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f005 f952 	bl	80086d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	e04a      	b.n	80034d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800343a:	7bfa      	ldrb	r2, [r7, #15]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	333d      	adds	r3, #61	; 0x3d
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800344e:	7bfa      	ldrb	r2, [r7, #15]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	333c      	adds	r3, #60	; 0x3c
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	b298      	uxth	r0, r3
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	3344      	adds	r3, #68	; 0x44
 8003476:	4602      	mov	r2, r0
 8003478:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	3340      	adds	r3, #64	; 0x40
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	3348      	adds	r3, #72	; 0x48
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	334c      	adds	r3, #76	; 0x4c
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	3354      	adds	r3, #84	; 0x54
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	3301      	adds	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d3af      	bcc.n	800343a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]
 80034de:	e044      	b.n	800356a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034e0:	7bfa      	ldrb	r2, [r7, #15]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	3301      	adds	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	429a      	cmp	r2, r3
 8003572:	d3b5      	bcc.n	80034e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	687e      	ldr	r6, [r7, #4]
 800357c:	466d      	mov	r5, sp
 800357e:	f106 0410 	add.w	r4, r6, #16
 8003582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800358a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800358e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003592:	1d33      	adds	r3, r6, #4
 8003594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003596:	6838      	ldr	r0, [r7, #0]
 8003598:	f005 f8ea 	bl	8008770 <USB_DevInit>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e014      	b.n	80035d8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d102      	bne.n	80035cc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f001 f882 	bl	80046d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f006 f972 	bl	80098ba <USB_DevDisconnect>

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_PCD_Start+0x1c>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e01c      	b.n	8003636 <HAL_PCD_Start+0x56>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	2b01      	cmp	r3, #1
 800360a:	d105      	bne.n	8003618 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f005 f839 	bl	8008694 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f006 f926 	bl	8009878 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800363e:	b590      	push	{r4, r7, lr}
 8003640:	b08d      	sub	sp, #52	; 0x34
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f006 f9e4 	bl	8009a22 <USB_GetMode>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	f040 847e 	bne.w	8003f5e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f006 f948 	bl	80098fc <USB_ReadInterrupts>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8474 	beq.w	8003f5c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	0a1b      	lsrs	r3, r3, #8
 800367e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f006 f935 	bl	80098fc <USB_ReadInterrupts>
 8003692:	4603      	mov	r3, r0
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b02      	cmp	r3, #2
 800369a:	d107      	bne.n	80036ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f002 0202 	and.w	r2, r2, #2
 80036aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f006 f923 	bl	80098fc <USB_ReadInterrupts>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b10      	cmp	r3, #16
 80036be:	d161      	bne.n	8003784 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0210 	bic.w	r2, r2, #16
 80036ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	f003 020f 	and.w	r2, r3, #15
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4413      	add	r3, r2
 80036ec:	3304      	adds	r3, #4
 80036ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	0c5b      	lsrs	r3, r3, #17
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d124      	bne.n	8003746 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d035      	beq.n	8003774 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003716:	b29b      	uxth	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	6a38      	ldr	r0, [r7, #32]
 800371c:	f005 ff5a 	bl	80095d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800372c:	441a      	add	r2, r3
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	6a1a      	ldr	r2, [r3, #32]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800373e:	441a      	add	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	621a      	str	r2, [r3, #32]
 8003744:	e016      	b.n	8003774 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	0c5b      	lsrs	r3, r3, #17
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	2b06      	cmp	r3, #6
 8003750:	d110      	bne.n	8003774 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003758:	2208      	movs	r2, #8
 800375a:	4619      	mov	r1, r3
 800375c:	6a38      	ldr	r0, [r7, #32]
 800375e:	f005 ff39 	bl	80095d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	6a1a      	ldr	r2, [r3, #32]
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800376e:	441a      	add	r2, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0210 	orr.w	r2, r2, #16
 8003782:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f006 f8b7 	bl	80098fc <USB_ReadInterrupts>
 800378e:	4603      	mov	r3, r0
 8003790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003794:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003798:	f040 80a7 	bne.w	80038ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f006 f8bc 	bl	8009922 <USB_ReadDevAllOutEpInterrupt>
 80037aa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80037ac:	e099      	b.n	80038e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 808e 	beq.w	80038d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	4611      	mov	r1, r2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f006 f8e0 	bl	800998a <USB_ReadDevOutEPInterrupt>
 80037ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00c      	beq.n	80037f0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e2:	461a      	mov	r2, r3
 80037e4:	2301      	movs	r3, #1
 80037e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80037e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fe96 	bl	800451c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00c      	beq.n	8003814 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003806:	461a      	mov	r2, r3
 8003808:	2308      	movs	r3, #8
 800380a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800380c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fed2 	bl	80045b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382a:	461a      	mov	r2, r3
 800382c:	2310      	movs	r3, #16
 800382e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d030      	beq.n	800389c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003842:	2b80      	cmp	r3, #128	; 0x80
 8003844:	d109      	bne.n	800385a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003854:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003858:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800385a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	4413      	add	r3, r2
 800386c:	3304      	adds	r3, #4
 800386e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	78db      	ldrb	r3, [r3, #3]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d108      	bne.n	800388a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2200      	movs	r2, #0
 800387c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	b2db      	uxtb	r3, r3
 8003882:	4619      	mov	r1, r3
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f008 f991 	bl	800bbac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003896:	461a      	mov	r2, r3
 8003898:	2302      	movs	r3, #2
 800389a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d008      	beq.n	80038b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b2:	461a      	mov	r2, r3
 80038b4:	2320      	movs	r3, #32
 80038b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ce:	461a      	mov	r2, r3
 80038d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	3301      	adds	r3, #1
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	085b      	lsrs	r3, r3, #1
 80038e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f47f af62 	bne.w	80037ae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f006 f804 	bl	80098fc <USB_ReadInterrupts>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038fe:	f040 80a4 	bne.w	8003a4a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f006 f825 	bl	8009956 <USB_ReadDevAllInEpInterrupt>
 800390c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003912:	e096      	b.n	8003a42 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 808b 	beq.w	8003a36 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f006 f84b 	bl	80099c6 <USB_ReadDevInEPInterrupt>
 8003930:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d020      	beq.n	800397e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	2201      	movs	r2, #1
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	43db      	mvns	r3, r3
 8003956:	69f9      	ldr	r1, [r7, #28]
 8003958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800395c:	4013      	ands	r3, r2
 800395e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396c:	461a      	mov	r2, r3
 800396e:	2301      	movs	r3, #1
 8003970:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	b2db      	uxtb	r3, r3
 8003976:	4619      	mov	r1, r3
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f008 f882 	bl	800ba82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003994:	461a      	mov	r2, r3
 8003996:	2308      	movs	r3, #8
 8003998:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b0:	461a      	mov	r2, r3
 80039b2:	2310      	movs	r3, #16
 80039b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039cc:	461a      	mov	r2, r3
 80039ce:	2340      	movs	r3, #64	; 0x40
 80039d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d023      	beq.n	8003a24 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80039dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039de:	6a38      	ldr	r0, [r7, #32]
 80039e0:	f005 f812 	bl	8008a08 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80039e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e6:	4613      	mov	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	3338      	adds	r3, #56	; 0x38
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	4413      	add	r3, r2
 80039f4:	3304      	adds	r3, #4
 80039f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	78db      	ldrb	r3, [r3, #3]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d108      	bne.n	8003a12 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2200      	movs	r2, #0
 8003a04:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f008 f8df 	bl	800bbd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2302      	movs	r3, #2
 8003a22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fcea 	bl	800440a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	3301      	adds	r3, #1
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f47f af65 	bne.w	8003914 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f005 ff54 	bl	80098fc <USB_ReadInterrupts>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a5e:	d122      	bne.n	8003aa6 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a6e:	f023 0301 	bic.w	r3, r3, #1
 8003a72:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d108      	bne.n	8003a90 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a86:	2100      	movs	r1, #0
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f008 fb11 	bl	800c0b0 <HAL_PCDEx_LPM_Callback>
 8003a8e:	e002      	b.n	8003a96 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f008 f863 	bl	800bb5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695a      	ldr	r2, [r3, #20]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003aa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f005 ff26 	bl	80098fc <USB_ReadInterrupts>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aba:	d112      	bne.n	8003ae2 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d102      	bne.n	8003ad2 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f008 f81f 	bl	800bb10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f005 ff08 	bl	80098fc <USB_ReadInterrupts>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003af6:	d121      	bne.n	8003b3c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003b06:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d111      	bne.n	8003b36 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	089b      	lsrs	r3, r3, #2
 8003b22:	f003 020f 	and.w	r2, r3, #15
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f008 fabe 	bl	800c0b0 <HAL_PCDEx_LPM_Callback>
 8003b34:	e002      	b.n	8003b3c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f007 ffea 	bl	800bb10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f005 fedb 	bl	80098fc <USB_ReadInterrupts>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b50:	f040 80b5 	bne.w	8003cbe <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b62:	f023 0301 	bic.w	r3, r3, #1
 8003b66:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2110      	movs	r1, #16
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f004 ff4a 	bl	8008a08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b74:	2300      	movs	r3, #0
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b78:	e046      	b.n	8003c08 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b86:	461a      	mov	r2, r3
 8003b88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b8c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b9e:	0151      	lsls	r1, r2, #5
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	440a      	add	r2, r1
 8003ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bc0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd2:	0151      	lsls	r1, r2, #5
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	440a      	add	r2, r1
 8003bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003be0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf2:	0151      	lsls	r1, r2, #5
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	440a      	add	r2, r1
 8003bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bfc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c00:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c04:	3301      	adds	r3, #1
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d3b3      	bcc.n	8003b7a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c20:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c24:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d016      	beq.n	8003c5c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3e:	f043 030b 	orr.w	r3, r3, #11
 8003c42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c54:	f043 030b 	orr.w	r3, r3, #11
 8003c58:	6453      	str	r3, [r2, #68]	; 0x44
 8003c5a:	e015      	b.n	8003c88 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c6e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c72:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c82:	f043 030b 	orr.w	r3, r3, #11
 8003c86:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c96:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c9a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f005 feeb 	bl	8009a84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f005 fe1a 	bl	80098fc <USB_ReadInterrupts>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd2:	d124      	bne.n	8003d1e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f005 feb0 	bl	8009a3e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f004 ff0d 	bl	8008b02 <USB_GetDevSpeed>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	461a      	mov	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681c      	ldr	r4, [r3, #0]
 8003cf4:	f001 fbe0 	bl	80054b8 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	4620      	mov	r0, r4
 8003d04:	f004 fc2a 	bl	800855c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f007 fee2 	bl	800bad2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f005 fdea 	bl	80098fc <USB_ReadInterrupts>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d10a      	bne.n	8003d48 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f007 febf 	bl	800bab6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f002 0208 	and.w	r2, r2, #8
 8003d46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f005 fdd5 	bl	80098fc <USB_ReadInterrupts>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d58:	2b80      	cmp	r3, #128	; 0x80
 8003d5a:	d122      	bne.n	8003da2 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d68:	2301      	movs	r3, #1
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6c:	e014      	b.n	8003d98 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d72:	4613      	mov	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4413      	add	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d105      	bne.n	8003d92 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fb0b 	bl	80043a8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	3301      	adds	r3, #1
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d3e5      	bcc.n	8003d6e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f005 fda8 	bl	80098fc <USB_ReadInterrupts>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db6:	d13b      	bne.n	8003e30 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003db8:	2301      	movs	r3, #1
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbc:	e02b      	b.n	8003e16 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	3340      	adds	r3, #64	; 0x40
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d115      	bne.n	8003e10 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003de4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	da12      	bge.n	8003e10 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dee:	4613      	mov	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	333f      	adds	r3, #63	; 0x3f
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 facc 	bl	80043a8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	3301      	adds	r3, #1
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d3ce      	bcc.n	8003dbe <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f005 fd61 	bl	80098fc <USB_ReadInterrupts>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e44:	d155      	bne.n	8003ef2 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e46:	2301      	movs	r3, #1
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4a:	e045      	b.n	8003ed8 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d12e      	bne.n	8003ed2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e74:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	da2b      	bge.n	8003ed2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003e86:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d121      	bne.n	8003ed2 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ece:	6053      	str	r3, [r2, #4]
            break;
 8003ed0:	e007      	b.n	8003ee2 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d3b4      	bcc.n	8003e4c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f005 fd00 	bl	80098fc <USB_ReadInterrupts>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f06:	d10a      	bne.n	8003f1e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f007 fe73 	bl	800bbf4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f005 fcea 	bl	80098fc <USB_ReadInterrupts>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d115      	bne.n	8003f5e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f007 fe63 	bl	800bc10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6859      	ldr	r1, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	e000      	b.n	8003f5e <HAL_PCD_IRQHandler+0x920>
      return;
 8003f5c:	bf00      	nop
    }
  }
}
 8003f5e:	3734      	adds	r7, #52	; 0x34
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd90      	pop	{r4, r7, pc}

08003f64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_PCD_SetAddress+0x1a>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e013      	b.n	8003fa6 <HAL_PCD_SetAddress+0x42>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	4611      	mov	r1, r2
 8003f96:	4618      	mov	r0, r3
 8003f98:	f005 fc48 	bl	800982c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	4608      	mov	r0, r1
 8003fb8:	4611      	mov	r1, r2
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	70fb      	strb	r3, [r7, #3]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	803b      	strh	r3, [r7, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	da0f      	bge.n	8003ff4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	f003 020f 	and.w	r2, r3, #15
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	3338      	adds	r3, #56	; 0x38
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3304      	adds	r3, #4
 8003fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	705a      	strb	r2, [r3, #1]
 8003ff2:	e00f      	b.n	8004014 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	f003 020f 	and.w	r2, r3, #15
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	4413      	add	r3, r2
 800400a:	3304      	adds	r3, #4
 800400c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	b2da      	uxtb	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004020:	883a      	ldrh	r2, [r7, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	78ba      	ldrb	r2, [r7, #2]
 800402a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	785b      	ldrb	r3, [r3, #1]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d004      	beq.n	800403e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800403e:	78bb      	ldrb	r3, [r7, #2]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d102      	bne.n	800404a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_PCD_EP_Open+0xaa>
 8004054:	2302      	movs	r3, #2
 8004056:	e00e      	b.n	8004076 <HAL_PCD_EP_Open+0xc8>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68f9      	ldr	r1, [r7, #12]
 8004066:	4618      	mov	r0, r3
 8004068:	f004 fd6a 	bl	8008b40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004074:	7afb      	ldrb	r3, [r7, #11]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	460b      	mov	r3, r1
 8004088:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800408a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800408e:	2b00      	cmp	r3, #0
 8004090:	da0f      	bge.n	80040b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 020f 	and.w	r2, r3, #15
 8004098:	4613      	mov	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	3338      	adds	r3, #56	; 0x38
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	3304      	adds	r3, #4
 80040a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	705a      	strb	r2, [r3, #1]
 80040b0:	e00f      	b.n	80040d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	f003 020f 	and.w	r2, r3, #15
 80040b8:	4613      	mov	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	4413      	add	r3, r2
 80040c8:	3304      	adds	r3, #4
 80040ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_PCD_EP_Close+0x6e>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e00e      	b.n	800410a <HAL_PCD_EP_Close+0x8c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68f9      	ldr	r1, [r7, #12]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f004 fda8 	bl	8008c50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	460b      	mov	r3, r1
 8004120:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004122:	7afb      	ldrb	r3, [r7, #11]
 8004124:	f003 020f 	and.w	r2, r3, #15
 8004128:	4613      	mov	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4413      	add	r3, r2
 8004138:	3304      	adds	r3, #4
 800413a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2200      	movs	r2, #0
 800414c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2200      	movs	r2, #0
 8004152:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004154:	7afb      	ldrb	r3, [r7, #11]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	b2da      	uxtb	r2, r3
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004160:	7afb      	ldrb	r3, [r7, #11]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6979      	ldr	r1, [r7, #20]
 8004170:	4618      	mov	r0, r3
 8004172:	f005 f829 	bl	80091c8 <USB_EP0StartXfer>
 8004176:	e005      	b.n	8004184 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6979      	ldr	r1, [r7, #20]
 800417e:	4618      	mov	r0, r3
 8004180:	f004 fe42 	bl	8008e08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	460b      	mov	r3, r1
 8004198:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	f003 020f 	and.w	r2, r3, #15
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80041b0:	681b      	ldr	r3, [r3, #0]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b086      	sub	sp, #24
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
 80041ca:	460b      	mov	r3, r1
 80041cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ce:	7afb      	ldrb	r3, [r7, #11]
 80041d0:	f003 020f 	and.w	r2, r3, #15
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	3338      	adds	r3, #56	; 0x38
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4413      	add	r3, r2
 80041e2:	3304      	adds	r3, #4
 80041e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2200      	movs	r2, #0
 80041f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2201      	movs	r2, #1
 80041fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041fe:	7afb      	ldrb	r3, [r7, #11]
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	b2da      	uxtb	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800420a:	7afb      	ldrb	r3, [r7, #11]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	2b00      	cmp	r3, #0
 8004212:	d106      	bne.n	8004222 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6979      	ldr	r1, [r7, #20]
 800421a:	4618      	mov	r0, r3
 800421c:	f004 ffd4 	bl	80091c8 <USB_EP0StartXfer>
 8004220:	e005      	b.n	800422e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6979      	ldr	r1, [r7, #20]
 8004228:	4618      	mov	r0, r3
 800422a:	f004 fded 	bl	8008e08 <USB_EPStartXfer>
  }

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	f003 020f 	and.w	r2, r3, #15
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	429a      	cmp	r2, r3
 8004250:	d901      	bls.n	8004256 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e04e      	b.n	80042f4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800425a:	2b00      	cmp	r3, #0
 800425c:	da0f      	bge.n	800427e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	f003 020f 	and.w	r2, r3, #15
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	3338      	adds	r3, #56	; 0x38
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	4413      	add	r3, r2
 8004272:	3304      	adds	r3, #4
 8004274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	705a      	strb	r2, [r3, #1]
 800427c:	e00d      	b.n	800429a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	4413      	add	r3, r2
 8004290:	3304      	adds	r3, #4
 8004292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_PCD_EP_SetStall+0x82>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e01c      	b.n	80042f4 <HAL_PCD_EP_SetStall+0xbc>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68f9      	ldr	r1, [r7, #12]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f005 f9db 	bl	8009684 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d108      	bne.n	80042ea <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f005 fbcd 	bl	8009a84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	f003 020f 	and.w	r2, r3, #15
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	429a      	cmp	r2, r3
 8004314:	d901      	bls.n	800431a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e042      	b.n	80043a0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800431a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800431e:	2b00      	cmp	r3, #0
 8004320:	da0f      	bge.n	8004342 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	f003 020f 	and.w	r2, r3, #15
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	3338      	adds	r3, #56	; 0x38
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	4413      	add	r3, r2
 8004336:	3304      	adds	r3, #4
 8004338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	705a      	strb	r2, [r3, #1]
 8004340:	e00f      	b.n	8004362 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	f003 020f 	and.w	r2, r3, #15
 8004348:	4613      	mov	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	3304      	adds	r3, #4
 800435a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	b2da      	uxtb	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_PCD_EP_ClrStall+0x86>
 800437e:	2302      	movs	r3, #2
 8004380:	e00e      	b.n	80043a0 <HAL_PCD_EP_ClrStall+0xa4>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68f9      	ldr	r1, [r7, #12]
 8004390:	4618      	mov	r0, r3
 8004392:	f005 f9e5 	bl	8009760 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80043b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	da0c      	bge.n	80043d6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	f003 020f 	and.w	r2, r3, #15
 80043c2:	4613      	mov	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	3338      	adds	r3, #56	; 0x38
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	4413      	add	r3, r2
 80043d0:	3304      	adds	r3, #4
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	e00c      	b.n	80043f0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	f003 020f 	and.w	r2, r3, #15
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	4413      	add	r3, r2
 80043ec:	3304      	adds	r3, #4
 80043ee:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68f9      	ldr	r1, [r7, #12]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f005 f808 	bl	800940c <USB_EPStopXfer>
 80043fc:	4603      	mov	r3, r0
 80043fe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004400:	7afb      	ldrb	r3, [r7, #11]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b088      	sub	sp, #32
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	4613      	mov	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	3338      	adds	r3, #56	; 0x38
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	4413      	add	r3, r2
 800442e:	3304      	adds	r3, #4
 8004430:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	429a      	cmp	r2, r3
 800443c:	d901      	bls.n	8004442 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e067      	b.n	8004512 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	429a      	cmp	r2, r3
 8004456:	d902      	bls.n	800445e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3303      	adds	r3, #3
 8004462:	089b      	lsrs	r3, r3, #2
 8004464:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004466:	e026      	b.n	80044b6 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	699a      	ldr	r2, [r3, #24]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	429a      	cmp	r2, r3
 800447c:	d902      	bls.n	8004484 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	3303      	adds	r3, #3
 8004488:	089b      	lsrs	r3, r3, #2
 800448a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6919      	ldr	r1, [r3, #16]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	b2da      	uxtb	r2, r3
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	b29b      	uxth	r3, r3
 8004498:	6978      	ldr	r0, [r7, #20]
 800449a:	f005 f861 	bl	8009560 <USB_WritePacket>

    ep->xfer_buff  += len;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	441a      	add	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a1a      	ldr	r2, [r3, #32]
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	441a      	add	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d809      	bhi.n	80044e0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a1a      	ldr	r2, [r3, #32]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d203      	bcs.n	80044e0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1c3      	bne.n	8004468 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	699a      	ldr	r2, [r3, #24]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d811      	bhi.n	8004510 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	2201      	movs	r2, #1
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	43db      	mvns	r3, r3
 8004506:	6939      	ldr	r1, [r7, #16]
 8004508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800450c:	4013      	ands	r3, r2
 800450e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	333c      	adds	r3, #60	; 0x3c
 8004534:	3304      	adds	r3, #4
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4a19      	ldr	r2, [pc, #100]	; (80045b4 <PCD_EP_OutXfrComplete_int+0x98>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d124      	bne.n	800459c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004568:	461a      	mov	r2, r3
 800456a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800456e:	6093      	str	r3, [r2, #8]
 8004570:	e01a      	b.n	80045a8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004588:	461a      	mov	r2, r3
 800458a:	2320      	movs	r3, #32
 800458c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f007 fa59 	bl	800ba4c <HAL_PCD_DataOutStageCallback>
 800459a:	e005      	b.n	80045a8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f007 fa52 	bl	800ba4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	4f54310a 	.word	0x4f54310a

080045b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	333c      	adds	r3, #60	; 0x3c
 80045d0:	3304      	adds	r3, #4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4a0c      	ldr	r2, [pc, #48]	; (800461c <PCD_EP_OutSetupPacket_int+0x64>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d90e      	bls.n	800460c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d009      	beq.n	800460c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004604:	461a      	mov	r2, r3
 8004606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800460a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f007 fa0b 	bl	800ba28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	4f54300a 	.word	0x4f54300a

08004620 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	70fb      	strb	r3, [r7, #3]
 800462c:	4613      	mov	r3, r2
 800462e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d107      	bne.n	800464e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800463e:	883b      	ldrh	r3, [r7, #0]
 8004640:	0419      	lsls	r1, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	430a      	orrs	r2, r1
 800464a:	629a      	str	r2, [r3, #40]	; 0x28
 800464c:	e028      	b.n	80046a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	0c1b      	lsrs	r3, r3, #16
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	4413      	add	r3, r2
 800465a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800465c:	2300      	movs	r3, #0
 800465e:	73fb      	strb	r3, [r7, #15]
 8004660:	e00d      	b.n	800467e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	3340      	adds	r3, #64	; 0x40
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	4413      	add	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	3301      	adds	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
 800467e:	7bfa      	ldrb	r2, [r7, #15]
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	3b01      	subs	r3, #1
 8004684:	429a      	cmp	r2, r3
 8004686:	d3ec      	bcc.n	8004662 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004688:	883b      	ldrh	r3, [r7, #0]
 800468a:	0418      	lsls	r0, r3, #16
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6819      	ldr	r1, [r3, #0]
 8004690:	78fb      	ldrb	r3, [r7, #3]
 8004692:	3b01      	subs	r3, #1
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	4302      	orrs	r2, r0
 8004698:	3340      	adds	r3, #64	; 0x40
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	460b      	mov	r3, r1
 80046b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	887a      	ldrh	r2, [r7, #2]
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004702:	f043 0303 	orr.w	r3, r3, #3
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a04      	ldr	r2, [pc, #16]	; (8004734 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004726:	6013      	str	r3, [r2, #0]
}
 8004728:	bf00      	nop
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40007000 	.word	0x40007000

08004738 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800473c:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <HAL_PWREx_GetVoltageRange+0x3c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004748:	d102      	bne.n	8004750 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800474a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800474e:	e00b      	b.n	8004768 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004750:	4b08      	ldr	r3, [pc, #32]	; (8004774 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800475e:	d102      	bne.n	8004766 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004764:	e000      	b.n	8004768 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004766:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004768:	4618      	mov	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40007000 	.word	0x40007000

08004778 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d141      	bne.n	800480a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004786:	4b4b      	ldr	r3, [pc, #300]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800478e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004792:	d131      	bne.n	80047f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004794:	4b47      	ldr	r3, [pc, #284]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800479a:	4a46      	ldr	r2, [pc, #280]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800479c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047a4:	4b43      	ldr	r3, [pc, #268]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047ac:	4a41      	ldr	r2, [pc, #260]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80047b4:	4b40      	ldr	r3, [pc, #256]	; (80048b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2232      	movs	r2, #50	; 0x32
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	4a3f      	ldr	r2, [pc, #252]	; (80048bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047c0:	fba2 2303 	umull	r2, r3, r2, r3
 80047c4:	0c9b      	lsrs	r3, r3, #18
 80047c6:	3301      	adds	r3, #1
 80047c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047ca:	e002      	b.n	80047d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047d2:	4b38      	ldr	r3, [pc, #224]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047de:	d102      	bne.n	80047e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f2      	bne.n	80047cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047e6:	4b33      	ldr	r3, [pc, #204]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f2:	d158      	bne.n	80048a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e057      	b.n	80048a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047f8:	4b2e      	ldr	r3, [pc, #184]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047fe:	4a2d      	ldr	r2, [pc, #180]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004804:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004808:	e04d      	b.n	80048a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004810:	d141      	bne.n	8004896 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004812:	4b28      	ldr	r3, [pc, #160]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800481a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481e:	d131      	bne.n	8004884 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004820:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004826:	4a23      	ldr	r2, [pc, #140]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004830:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004838:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800483e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004840:	4b1d      	ldr	r3, [pc, #116]	; (80048b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2232      	movs	r2, #50	; 0x32
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	4a1c      	ldr	r2, [pc, #112]	; (80048bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	0c9b      	lsrs	r3, r3, #18
 8004852:	3301      	adds	r3, #1
 8004854:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004856:	e002      	b.n	800485e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3b01      	subs	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800485e:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486a:	d102      	bne.n	8004872 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f2      	bne.n	8004858 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004872:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487e:	d112      	bne.n	80048a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e011      	b.n	80048a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800488a:	4a0a      	ldr	r2, [pc, #40]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004890:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004894:	e007      	b.n	80048a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004896:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800489e:	4a05      	ldr	r2, [pc, #20]	; (80048b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048a4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	40007000 	.word	0x40007000
 80048b8:	20000000 	.word	0x20000000
 80048bc:	431bde83 	.word	0x431bde83

080048c0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4a04      	ldr	r2, [pc, #16]	; (80048dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80048ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ce:	6053      	str	r3, [r2, #4]
}
 80048d0:	bf00      	nop
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40007000 	.word	0x40007000

080048e0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <HAL_PWREx_EnableVddIO2+0x1c>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	4a04      	ldr	r2, [pc, #16]	; (80048fc <HAL_PWREx_EnableVddIO2+0x1c>)
 80048ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048ee:	6053      	str	r3, [r2, #4]
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40007000 	.word	0x40007000

08004900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	f000 bc04 	b.w	800511c <HAL_RCC_OscConfig+0x81c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004914:	4ba0      	ldr	r3, [pc, #640]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 030c 	and.w	r3, r3, #12
 800491c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800491e:	4b9e      	ldr	r3, [pc, #632]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80e4 	beq.w	8004afe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <HAL_RCC_OscConfig+0x4c>
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	2b0c      	cmp	r3, #12
 8004940:	f040 808b 	bne.w	8004a5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2b01      	cmp	r3, #1
 8004948:	f040 8087 	bne.w	8004a5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800494c:	4b92      	ldr	r3, [pc, #584]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_RCC_OscConfig+0x64>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e3db      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1a      	ldr	r2, [r3, #32]
 8004968:	4b8b      	ldr	r3, [pc, #556]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d004      	beq.n	800497e <HAL_RCC_OscConfig+0x7e>
 8004974:	4b88      	ldr	r3, [pc, #544]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800497c:	e005      	b.n	800498a <HAL_RCC_OscConfig+0x8a>
 800497e:	4b86      	ldr	r3, [pc, #536]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004984:	091b      	lsrs	r3, r3, #4
 8004986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800498a:	4293      	cmp	r3, r2
 800498c:	d223      	bcs.n	80049d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fd9c 	bl	80054d0 <RCC_SetFlashLatencyFromMSIRange>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e3bc      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049a2:	4b7d      	ldr	r3, [pc, #500]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a7c      	ldr	r2, [pc, #496]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 80049a8:	f043 0308 	orr.w	r3, r3, #8
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	4b7a      	ldr	r3, [pc, #488]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	4977      	ldr	r1, [pc, #476]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049c0:	4b75      	ldr	r3, [pc, #468]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	4972      	ldr	r1, [pc, #456]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	604b      	str	r3, [r1, #4]
 80049d4:	e025      	b.n	8004a22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049d6:	4b70      	ldr	r3, [pc, #448]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a6f      	ldr	r2, [pc, #444]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 80049dc:	f043 0308 	orr.w	r3, r3, #8
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	4b6d      	ldr	r3, [pc, #436]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	496a      	ldr	r1, [pc, #424]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049f4:	4b68      	ldr	r3, [pc, #416]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	4965      	ldr	r1, [pc, #404]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d109      	bne.n	8004a22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fd5c 	bl	80054d0 <RCC_SetFlashLatencyFromMSIRange>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e37c      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a22:	f000 fcbf 	bl	80053a4 <HAL_RCC_GetSysClockFreq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4b5b      	ldr	r3, [pc, #364]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	495a      	ldr	r1, [pc, #360]	; (8004b9c <HAL_RCC_OscConfig+0x29c>)
 8004a34:	5ccb      	ldrb	r3, [r1, r3]
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3e:	4a58      	ldr	r2, [pc, #352]	; (8004ba0 <HAL_RCC_OscConfig+0x2a0>)
 8004a40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a42:	4b58      	ldr	r3, [pc, #352]	; (8004ba4 <HAL_RCC_OscConfig+0x2a4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fc fd76 	bl	8001538 <HAL_InitTick>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d052      	beq.n	8004afc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	e360      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d032      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a62:	4b4d      	ldr	r3, [pc, #308]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a4c      	ldr	r2, [pc, #304]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a6e:	f7fc fdb3 	bl	80015d8 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a76:	f7fc fdaf 	bl	80015d8 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e349      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a88:	4b43      	ldr	r3, [pc, #268]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0f0      	beq.n	8004a76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a94:	4b40      	ldr	r3, [pc, #256]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a3f      	ldr	r2, [pc, #252]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004a9a:	f043 0308 	orr.w	r3, r3, #8
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	4b3d      	ldr	r3, [pc, #244]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	493a      	ldr	r1, [pc, #232]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ab2:	4b39      	ldr	r3, [pc, #228]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	4935      	ldr	r1, [pc, #212]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	604b      	str	r3, [r1, #4]
 8004ac6:	e01a      	b.n	8004afe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ac8:	4b33      	ldr	r3, [pc, #204]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a32      	ldr	r2, [pc, #200]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ad4:	f7fc fd80 	bl	80015d8 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004adc:	f7fc fd7c 	bl	80015d8 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e316      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004aee:	4b2a      	ldr	r3, [pc, #168]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x1dc>
 8004afa:	e000      	b.n	8004afe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004afc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d073      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCC_OscConfig+0x21c>
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b0c      	cmp	r3, #12
 8004b14:	d10e      	bne.n	8004b34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d10b      	bne.n	8004b34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b1c:	4b1e      	ldr	r3, [pc, #120]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d063      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x2f0>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d15f      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e2f3      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b3c:	d106      	bne.n	8004b4c <HAL_RCC_OscConfig+0x24c>
 8004b3e:	4b16      	ldr	r3, [pc, #88]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	e01d      	b.n	8004b88 <HAL_RCC_OscConfig+0x288>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b54:	d10c      	bne.n	8004b70 <HAL_RCC_OscConfig+0x270>
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a0f      	ldr	r2, [pc, #60]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a0c      	ldr	r2, [pc, #48]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	e00b      	b.n	8004b88 <HAL_RCC_OscConfig+0x288>
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a08      	ldr	r2, [pc, #32]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a05      	ldr	r2, [pc, #20]	; (8004b98 <HAL_RCC_OscConfig+0x298>)
 8004b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01b      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b90:	f7fc fd22 	bl	80015d8 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b96:	e010      	b.n	8004bba <HAL_RCC_OscConfig+0x2ba>
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	0800c240 	.word	0x0800c240
 8004ba0:	20000000 	.word	0x20000000
 8004ba4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba8:	f7fc fd16 	bl	80015d8 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b64      	cmp	r3, #100	; 0x64
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e2b0      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bba:	4baf      	ldr	r3, [pc, #700]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f0      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x2a8>
 8004bc6:	e014      	b.n	8004bf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fc fd06 	bl	80015d8 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd0:	f7fc fd02 	bl	80015d8 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	; 0x64
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e29c      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004be2:	4ba5      	ldr	r3, [pc, #660]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x2d0>
 8004bee:	e000      	b.n	8004bf2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d060      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d005      	beq.n	8004c10 <HAL_RCC_OscConfig+0x310>
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b0c      	cmp	r3, #12
 8004c08:	d119      	bne.n	8004c3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d116      	bne.n	8004c3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c10:	4b99      	ldr	r3, [pc, #612]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_OscConfig+0x328>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e279      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c28:	4b93      	ldr	r3, [pc, #588]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	061b      	lsls	r3, r3, #24
 8004c36:	4990      	ldr	r1, [pc, #576]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c3c:	e040      	b.n	8004cc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d023      	beq.n	8004c8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c46:	4b8c      	ldr	r3, [pc, #560]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a8b      	ldr	r2, [pc, #556]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c52:	f7fc fcc1 	bl	80015d8 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c5a:	f7fc fcbd 	bl	80015d8 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e257      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c6c:	4b82      	ldr	r3, [pc, #520]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0f0      	beq.n	8004c5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c78:	4b7f      	ldr	r3, [pc, #508]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	061b      	lsls	r3, r3, #24
 8004c86:	497c      	ldr	r1, [pc, #496]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	604b      	str	r3, [r1, #4]
 8004c8c:	e018      	b.n	8004cc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c8e:	4b7a      	ldr	r3, [pc, #488]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a79      	ldr	r2, [pc, #484]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9a:	f7fc fc9d 	bl	80015d8 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca2:	f7fc fc99 	bl	80015d8 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e233      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cb4:	4b70      	ldr	r3, [pc, #448]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f0      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d03c      	beq.n	8004d46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01c      	beq.n	8004d0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cd4:	4b68      	ldr	r3, [pc, #416]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cda:	4a67      	ldr	r2, [pc, #412]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004cdc:	f043 0301 	orr.w	r3, r3, #1
 8004ce0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce4:	f7fc fc78 	bl	80015d8 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cec:	f7fc fc74 	bl	80015d8 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e20e      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cfe:	4b5e      	ldr	r3, [pc, #376]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0ef      	beq.n	8004cec <HAL_RCC_OscConfig+0x3ec>
 8004d0c:	e01b      	b.n	8004d46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d0e:	4b5a      	ldr	r3, [pc, #360]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d14:	4a58      	ldr	r2, [pc, #352]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004d16:	f023 0301 	bic.w	r3, r3, #1
 8004d1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1e:	f7fc fc5b 	bl	80015d8 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d26:	f7fc fc57 	bl	80015d8 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e1f1      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d38:	4b4f      	ldr	r3, [pc, #316]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1ef      	bne.n	8004d26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 80a6 	beq.w	8004ea0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d54:	2300      	movs	r3, #0
 8004d56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d58:	4b47      	ldr	r3, [pc, #284]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10d      	bne.n	8004d80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d64:	4b44      	ldr	r3, [pc, #272]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d68:	4a43      	ldr	r2, [pc, #268]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8004d70:	4b41      	ldr	r3, [pc, #260]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d80:	4b3e      	ldr	r3, [pc, #248]	; (8004e7c <HAL_RCC_OscConfig+0x57c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d118      	bne.n	8004dbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d8c:	4b3b      	ldr	r3, [pc, #236]	; (8004e7c <HAL_RCC_OscConfig+0x57c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a3a      	ldr	r2, [pc, #232]	; (8004e7c <HAL_RCC_OscConfig+0x57c>)
 8004d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d98:	f7fc fc1e 	bl	80015d8 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da0:	f7fc fc1a 	bl	80015d8 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e1b4      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db2:	4b32      	ldr	r3, [pc, #200]	; (8004e7c <HAL_RCC_OscConfig+0x57c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d108      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x4d8>
 8004dc6:	4b2c      	ldr	r3, [pc, #176]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dcc:	4a2a      	ldr	r2, [pc, #168]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dd6:	e024      	b.n	8004e22 <HAL_RCC_OscConfig+0x522>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b05      	cmp	r3, #5
 8004dde:	d110      	bne.n	8004e02 <HAL_RCC_OscConfig+0x502>
 8004de0:	4b25      	ldr	r3, [pc, #148]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de6:	4a24      	ldr	r2, [pc, #144]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004de8:	f043 0304 	orr.w	r3, r3, #4
 8004dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004df0:	4b21      	ldr	r3, [pc, #132]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	4a20      	ldr	r2, [pc, #128]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e00:	e00f      	b.n	8004e22 <HAL_RCC_OscConfig+0x522>
 8004e02:	4b1d      	ldr	r3, [pc, #116]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e08:	4a1b      	ldr	r2, [pc, #108]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e12:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e18:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004e1a:	f023 0304 	bic.w	r3, r3, #4
 8004e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d016      	beq.n	8004e58 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2a:	f7fc fbd5 	bl	80015d8 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e30:	e00a      	b.n	8004e48 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e32:	f7fc fbd1 	bl	80015d8 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e169      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCC_OscConfig+0x578>)
 8004e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0ed      	beq.n	8004e32 <HAL_RCC_OscConfig+0x532>
 8004e56:	e01a      	b.n	8004e8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e58:	f7fc fbbe 	bl	80015d8 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e5e:	e00f      	b.n	8004e80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7fc fbba 	bl	80015d8 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d906      	bls.n	8004e80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e152      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
 8004e76:	bf00      	nop
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e80:	4ba8      	ldr	r3, [pc, #672]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e8      	bne.n	8004e60 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e8e:	7ffb      	ldrb	r3, [r7, #31]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d105      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e94:	4ba3      	ldr	r3, [pc, #652]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8004e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e98:	4aa2      	ldr	r2, [pc, #648]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8004e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d03c      	beq.n	8004f26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01c      	beq.n	8004eee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004eb4:	4b9b      	ldr	r3, [pc, #620]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8004eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eba:	4a9a      	ldr	r2, [pc, #616]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec4:	f7fc fb88 	bl	80015d8 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ecc:	f7fc fb84 	bl	80015d8 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e11e      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ede:	4b91      	ldr	r3, [pc, #580]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8004ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0ef      	beq.n	8004ecc <HAL_RCC_OscConfig+0x5cc>
 8004eec:	e01b      	b.n	8004f26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004eee:	4b8d      	ldr	r3, [pc, #564]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8004ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ef4:	4a8b      	ldr	r2, [pc, #556]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8004ef6:	f023 0301 	bic.w	r3, r3, #1
 8004efa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efe:	f7fc fb6b 	bl	80015d8 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f06:	f7fc fb67 	bl	80015d8 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e101      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f18:	4b82      	ldr	r3, [pc, #520]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8004f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1ef      	bne.n	8004f06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80f5 	beq.w	800511a <HAL_RCC_OscConfig+0x81a>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	f040 80cb 	bne.w	80050d0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f3a:	4b7a      	ldr	r3, [pc, #488]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f003 0203 	and.w	r2, r3, #3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d12c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d123      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d11b      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d113      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d109      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	085b      	lsrs	r3, r3, #1
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d06d      	beq.n	8005084 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	2b0c      	cmp	r3, #12
 8004fac:	d068      	beq.n	8005080 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fae:	4b5d      	ldr	r3, [pc, #372]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d105      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004fba:	4b5a      	ldr	r3, [pc, #360]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e0a8      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004fca:	4b56      	ldr	r3, [pc, #344]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a55      	ldr	r2, [pc, #340]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8004fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fd6:	f7fc faff 	bl	80015d8 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fde:	f7fc fafb 	bl	80015d8 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e095      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ff0:	4b4c      	ldr	r3, [pc, #304]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f0      	bne.n	8004fde <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ffc:	4b49      	ldr	r3, [pc, #292]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	4b49      	ldr	r3, [pc, #292]	; (8005128 <HAL_RCC_OscConfig+0x828>)
 8005002:	4013      	ands	r3, r2
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800500c:	3a01      	subs	r2, #1
 800500e:	0112      	lsls	r2, r2, #4
 8005010:	4311      	orrs	r1, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005016:	0212      	lsls	r2, r2, #8
 8005018:	4311      	orrs	r1, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800501e:	0852      	lsrs	r2, r2, #1
 8005020:	3a01      	subs	r2, #1
 8005022:	0552      	lsls	r2, r2, #21
 8005024:	4311      	orrs	r1, r2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800502a:	0852      	lsrs	r2, r2, #1
 800502c:	3a01      	subs	r2, #1
 800502e:	0652      	lsls	r2, r2, #25
 8005030:	4311      	orrs	r1, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005036:	06d2      	lsls	r2, r2, #27
 8005038:	430a      	orrs	r2, r1
 800503a:	493a      	ldr	r1, [pc, #232]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 800503c:	4313      	orrs	r3, r2
 800503e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005040:	4b38      	ldr	r3, [pc, #224]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a37      	ldr	r2, [pc, #220]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8005046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800504a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800504c:	4b35      	ldr	r3, [pc, #212]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	4a34      	ldr	r2, [pc, #208]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8005052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005056:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005058:	f7fc fabe 	bl	80015d8 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005060:	f7fc faba 	bl	80015d8 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e054      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005072:	4b2c      	ldr	r3, [pc, #176]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0f0      	beq.n	8005060 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800507e:	e04c      	b.n	800511a <HAL_RCC_OscConfig+0x81a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e04b      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005084:	4b27      	ldr	r3, [pc, #156]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d144      	bne.n	800511a <HAL_RCC_OscConfig+0x81a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005090:	4b24      	ldr	r3, [pc, #144]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a23      	ldr	r2, [pc, #140]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 8005096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800509a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800509c:	4b21      	ldr	r3, [pc, #132]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4a20      	ldr	r2, [pc, #128]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 80050a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050a8:	f7fc fa96 	bl	80015d8 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b0:	f7fc fa92 	bl	80015d8 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e02c      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050c2:	4b18      	ldr	r3, [pc, #96]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0x7b0>
 80050ce:	e024      	b.n	800511a <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	2b0c      	cmp	r3, #12
 80050d4:	d01f      	beq.n	8005116 <HAL_RCC_OscConfig+0x816>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d6:	4b13      	ldr	r3, [pc, #76]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a12      	ldr	r2, [pc, #72]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 80050dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e2:	f7fc fa79 	bl	80015d8 <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x7fc>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ea:	f7fc fa75 	bl	80015d8 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x7fc>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e00f      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050fc:	4b09      	ldr	r3, [pc, #36]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1f0      	bne.n	80050ea <HAL_RCC_OscConfig+0x7ea>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005108:	4b06      	ldr	r3, [pc, #24]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	4905      	ldr	r1, [pc, #20]	; (8005124 <HAL_RCC_OscConfig+0x824>)
 800510e:	4b07      	ldr	r3, [pc, #28]	; (800512c <HAL_RCC_OscConfig+0x82c>)
 8005110:	4013      	ands	r3, r2
 8005112:	60cb      	str	r3, [r1, #12]
 8005114:	e001      	b.n	800511a <HAL_RCC_OscConfig+0x81a>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <HAL_RCC_OscConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3720      	adds	r7, #32
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40021000 	.word	0x40021000
 8005128:	019d800c 	.word	0x019d800c
 800512c:	feeefffc 	.word	0xfeeefffc

08005130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e11d      	b.n	8005384 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005148:	4b90      	ldr	r3, [pc, #576]	; (800538c <HAL_RCC_ClockConfig+0x25c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 030f 	and.w	r3, r3, #15
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d910      	bls.n	8005178 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005156:	4b8d      	ldr	r3, [pc, #564]	; (800538c <HAL_RCC_ClockConfig+0x25c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f023 020f 	bic.w	r2, r3, #15
 800515e:	498b      	ldr	r1, [pc, #556]	; (800538c <HAL_RCC_ClockConfig+0x25c>)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	4313      	orrs	r3, r2
 8005164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005166:	4b89      	ldr	r3, [pc, #548]	; (800538c <HAL_RCC_ClockConfig+0x25c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d001      	beq.n	8005178 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e105      	b.n	8005384 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d010      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	4b81      	ldr	r3, [pc, #516]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005190:	429a      	cmp	r2, r3
 8005192:	d908      	bls.n	80051a6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005194:	4b7e      	ldr	r3, [pc, #504]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	497b      	ldr	r1, [pc, #492]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d079      	beq.n	80052a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d11e      	bne.n	80051f8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ba:	4b75      	ldr	r3, [pc, #468]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e0dc      	b.n	8005384 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80051ca:	f000 f9db 	bl	8005584 <RCC_GetSysClockFreqFromPLLSource>
 80051ce:	4603      	mov	r3, r0
 80051d0:	4a70      	ldr	r2, [pc, #448]	; (8005394 <HAL_RCC_ClockConfig+0x264>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d946      	bls.n	8005264 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80051d6:	4b6e      	ldr	r3, [pc, #440]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d140      	bne.n	8005264 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051e2:	4b6b      	ldr	r3, [pc, #428]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ea:	4a69      	ldr	r2, [pc, #420]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 80051ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051f2:	2380      	movs	r3, #128	; 0x80
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	e035      	b.n	8005264 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d107      	bne.n	8005210 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005200:	4b63      	ldr	r3, [pc, #396]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d115      	bne.n	8005238 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e0b9      	b.n	8005384 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d107      	bne.n	8005228 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005218:	4b5d      	ldr	r3, [pc, #372]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d109      	bne.n	8005238 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e0ad      	b.n	8005384 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005228:	4b59      	ldr	r3, [pc, #356]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0a5      	b.n	8005384 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005238:	f000 f8b4 	bl	80053a4 <HAL_RCC_GetSysClockFreq>
 800523c:	4603      	mov	r3, r0
 800523e:	4a55      	ldr	r2, [pc, #340]	; (8005394 <HAL_RCC_ClockConfig+0x264>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d90f      	bls.n	8005264 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005244:	4b52      	ldr	r3, [pc, #328]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d109      	bne.n	8005264 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005250:	4b4f      	ldr	r3, [pc, #316]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005258:	4a4d      	ldr	r2, [pc, #308]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 800525a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800525e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005264:	4b4a      	ldr	r3, [pc, #296]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f023 0203 	bic.w	r2, r3, #3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	4947      	ldr	r1, [pc, #284]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 8005272:	4313      	orrs	r3, r2
 8005274:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005276:	f7fc f9af 	bl	80015d8 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527c:	e00a      	b.n	8005294 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800527e:	f7fc f9ab 	bl	80015d8 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	f241 3288 	movw	r2, #5000	; 0x1388
 800528c:	4293      	cmp	r3, r2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e077      	b.n	8005384 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005294:	4b3e      	ldr	r3, [pc, #248]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 020c 	and.w	r2, r3, #12
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d1eb      	bne.n	800527e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b80      	cmp	r3, #128	; 0x80
 80052aa:	d105      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80052ac:	4b38      	ldr	r3, [pc, #224]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4a37      	ldr	r2, [pc, #220]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 80052b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052b6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d010      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	4b31      	ldr	r3, [pc, #196]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d208      	bcs.n	80052e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d4:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	492b      	ldr	r1, [pc, #172]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052e6:	4b29      	ldr	r3, [pc, #164]	; (800538c <HAL_RCC_ClockConfig+0x25c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d210      	bcs.n	8005316 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f4:	4b25      	ldr	r3, [pc, #148]	; (800538c <HAL_RCC_ClockConfig+0x25c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f023 020f 	bic.w	r2, r3, #15
 80052fc:	4923      	ldr	r1, [pc, #140]	; (800538c <HAL_RCC_ClockConfig+0x25c>)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	4313      	orrs	r3, r2
 8005302:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005304:	4b21      	ldr	r3, [pc, #132]	; (800538c <HAL_RCC_ClockConfig+0x25c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d001      	beq.n	8005316 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e036      	b.n	8005384 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005322:	4b1b      	ldr	r3, [pc, #108]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	4918      	ldr	r1, [pc, #96]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 8005330:	4313      	orrs	r3, r2
 8005332:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b00      	cmp	r3, #0
 800533e:	d009      	beq.n	8005354 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005340:	4b13      	ldr	r3, [pc, #76]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	4910      	ldr	r1, [pc, #64]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 8005350:	4313      	orrs	r3, r2
 8005352:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005354:	f000 f826 	bl	80053a4 <HAL_RCC_GetSysClockFreq>
 8005358:	4602      	mov	r2, r0
 800535a:	4b0d      	ldr	r3, [pc, #52]	; (8005390 <HAL_RCC_ClockConfig+0x260>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	091b      	lsrs	r3, r3, #4
 8005360:	f003 030f 	and.w	r3, r3, #15
 8005364:	490c      	ldr	r1, [pc, #48]	; (8005398 <HAL_RCC_ClockConfig+0x268>)
 8005366:	5ccb      	ldrb	r3, [r1, r3]
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
 8005370:	4a0a      	ldr	r2, [pc, #40]	; (800539c <HAL_RCC_ClockConfig+0x26c>)
 8005372:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005374:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <HAL_RCC_ClockConfig+0x270>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f7fc f8dd 	bl	8001538 <HAL_InitTick>
 800537e:	4603      	mov	r3, r0
 8005380:	73fb      	strb	r3, [r7, #15]

  return status;
 8005382:	7bfb      	ldrb	r3, [r7, #15]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40022000 	.word	0x40022000
 8005390:	40021000 	.word	0x40021000
 8005394:	04c4b400 	.word	0x04c4b400
 8005398:	0800c240 	.word	0x0800c240
 800539c:	20000000 	.word	0x20000000
 80053a0:	20000004 	.word	0x20000004

080053a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b089      	sub	sp, #36	; 0x24
 80053a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	61fb      	str	r3, [r7, #28]
 80053ae:	2300      	movs	r3, #0
 80053b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053b2:	4b3e      	ldr	r3, [pc, #248]	; (80054ac <HAL_RCC_GetSysClockFreq+0x108>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 030c 	and.w	r3, r3, #12
 80053ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053bc:	4b3b      	ldr	r3, [pc, #236]	; (80054ac <HAL_RCC_GetSysClockFreq+0x108>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d005      	beq.n	80053d8 <HAL_RCC_GetSysClockFreq+0x34>
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	2b0c      	cmp	r3, #12
 80053d0:	d121      	bne.n	8005416 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d11e      	bne.n	8005416 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053d8:	4b34      	ldr	r3, [pc, #208]	; (80054ac <HAL_RCC_GetSysClockFreq+0x108>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d107      	bne.n	80053f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053e4:	4b31      	ldr	r3, [pc, #196]	; (80054ac <HAL_RCC_GetSysClockFreq+0x108>)
 80053e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ea:	0a1b      	lsrs	r3, r3, #8
 80053ec:	f003 030f 	and.w	r3, r3, #15
 80053f0:	61fb      	str	r3, [r7, #28]
 80053f2:	e005      	b.n	8005400 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053f4:	4b2d      	ldr	r3, [pc, #180]	; (80054ac <HAL_RCC_GetSysClockFreq+0x108>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	091b      	lsrs	r3, r3, #4
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005400:	4a2b      	ldr	r2, [pc, #172]	; (80054b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005408:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10d      	bne.n	800542c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005414:	e00a      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b04      	cmp	r3, #4
 800541a:	d102      	bne.n	8005422 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800541c:	4b25      	ldr	r3, [pc, #148]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	e004      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	2b08      	cmp	r3, #8
 8005426:	d101      	bne.n	800542c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005428:	4b22      	ldr	r3, [pc, #136]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800542a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b0c      	cmp	r3, #12
 8005430:	d134      	bne.n	800549c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005432:	4b1e      	ldr	r3, [pc, #120]	; (80054ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b02      	cmp	r3, #2
 8005440:	d003      	beq.n	800544a <HAL_RCC_GetSysClockFreq+0xa6>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b03      	cmp	r3, #3
 8005446:	d003      	beq.n	8005450 <HAL_RCC_GetSysClockFreq+0xac>
 8005448:	e005      	b.n	8005456 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800544a:	4b1a      	ldr	r3, [pc, #104]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800544c:	617b      	str	r3, [r7, #20]
      break;
 800544e:	e005      	b.n	800545c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005450:	4b18      	ldr	r3, [pc, #96]	; (80054b4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005452:	617b      	str	r3, [r7, #20]
      break;
 8005454:	e002      	b.n	800545c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	617b      	str	r3, [r7, #20]
      break;
 800545a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800545c:	4b13      	ldr	r3, [pc, #76]	; (80054ac <HAL_RCC_GetSysClockFreq+0x108>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	3301      	adds	r3, #1
 8005468:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800546a:	4b10      	ldr	r3, [pc, #64]	; (80054ac <HAL_RCC_GetSysClockFreq+0x108>)
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	0a1b      	lsrs	r3, r3, #8
 8005470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	fb02 f203 	mul.w	r2, r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005480:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005482:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	0e5b      	lsrs	r3, r3, #25
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	3301      	adds	r3, #1
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	fbb2 f3f3 	udiv	r3, r2, r3
 800549a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800549c:	69bb      	ldr	r3, [r7, #24]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3724      	adds	r7, #36	; 0x24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40021000 	.word	0x40021000
 80054b0:	0800c250 	.word	0x0800c250
 80054b4:	00f42400 	.word	0x00f42400

080054b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054bc:	4b03      	ldr	r3, [pc, #12]	; (80054cc <HAL_RCC_GetHCLKFreq+0x14>)
 80054be:	681b      	ldr	r3, [r3, #0]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	20000000 	.word	0x20000000

080054d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054d8:	2300      	movs	r3, #0
 80054da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054dc:	4b27      	ldr	r3, [pc, #156]	; (800557c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054e8:	f7ff f926 	bl	8004738 <HAL_PWREx_GetVoltageRange>
 80054ec:	6178      	str	r0, [r7, #20]
 80054ee:	e014      	b.n	800551a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054f0:	4b22      	ldr	r3, [pc, #136]	; (800557c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f4:	4a21      	ldr	r2, [pc, #132]	; (800557c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fa:	6593      	str	r3, [r2, #88]	; 0x58
 80054fc:	4b1f      	ldr	r3, [pc, #124]	; (800557c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005508:	f7ff f916 	bl	8004738 <HAL_PWREx_GetVoltageRange>
 800550c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800550e:	4b1b      	ldr	r3, [pc, #108]	; (800557c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005512:	4a1a      	ldr	r2, [pc, #104]	; (800557c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005518:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005520:	d10b      	bne.n	800553a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b80      	cmp	r3, #128	; 0x80
 8005526:	d913      	bls.n	8005550 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2ba0      	cmp	r3, #160	; 0xa0
 800552c:	d902      	bls.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800552e:	2302      	movs	r3, #2
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	e00d      	b.n	8005550 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005534:	2301      	movs	r3, #1
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	e00a      	b.n	8005550 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b7f      	cmp	r3, #127	; 0x7f
 800553e:	d902      	bls.n	8005546 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005540:	2302      	movs	r3, #2
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	e004      	b.n	8005550 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b70      	cmp	r3, #112	; 0x70
 800554a:	d101      	bne.n	8005550 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800554c:	2301      	movs	r3, #1
 800554e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f023 020f 	bic.w	r2, r3, #15
 8005558:	4909      	ldr	r1, [pc, #36]	; (8005580 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005560:	4b07      	ldr	r3, [pc, #28]	; (8005580 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	429a      	cmp	r2, r3
 800556c:	d001      	beq.n	8005572 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40021000 	.word	0x40021000
 8005580:	40022000 	.word	0x40022000

08005584 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800558a:	4b2d      	ldr	r3, [pc, #180]	; (8005640 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b03      	cmp	r3, #3
 8005598:	d00b      	beq.n	80055b2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b03      	cmp	r3, #3
 800559e:	d825      	bhi.n	80055ec <RCC_GetSysClockFreqFromPLLSource+0x68>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d008      	beq.n	80055b8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d11f      	bne.n	80055ec <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80055ac:	4b25      	ldr	r3, [pc, #148]	; (8005644 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80055ae:	613b      	str	r3, [r7, #16]
    break;
 80055b0:	e01f      	b.n	80055f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80055b2:	4b24      	ldr	r3, [pc, #144]	; (8005644 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80055b4:	613b      	str	r3, [r7, #16]
    break;
 80055b6:	e01c      	b.n	80055f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80055b8:	4b21      	ldr	r3, [pc, #132]	; (8005640 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d107      	bne.n	80055d4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80055c4:	4b1e      	ldr	r3, [pc, #120]	; (8005640 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	e005      	b.n	80055e0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055d4:	4b1a      	ldr	r3, [pc, #104]	; (8005640 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	091b      	lsrs	r3, r3, #4
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80055e0:	4a19      	ldr	r2, [pc, #100]	; (8005648 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055e8:	613b      	str	r3, [r7, #16]
    break;
 80055ea:	e002      	b.n	80055f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80055ec:	2300      	movs	r3, #0
 80055ee:	613b      	str	r3, [r7, #16]
    break;
 80055f0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055f2:	4b13      	ldr	r3, [pc, #76]	; (8005640 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	091b      	lsrs	r3, r3, #4
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	3301      	adds	r3, #1
 80055fe:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005600:	4b0f      	ldr	r3, [pc, #60]	; (8005640 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	0a1b      	lsrs	r3, r3, #8
 8005606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	fb02 f203 	mul.w	r2, r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	fbb2 f3f3 	udiv	r3, r2, r3
 8005616:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005618:	4b09      	ldr	r3, [pc, #36]	; (8005640 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	0e5b      	lsrs	r3, r3, #25
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	3301      	adds	r3, #1
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005630:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005632:	683b      	ldr	r3, [r7, #0]
}
 8005634:	4618      	mov	r0, r3
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	40021000 	.word	0x40021000
 8005644:	00f42400 	.word	0x00f42400
 8005648:	0800c250 	.word	0x0800c250

0800564c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005654:	2300      	movs	r3, #0
 8005656:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005658:	2300      	movs	r3, #0
 800565a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005664:	2b00      	cmp	r3, #0
 8005666:	d040      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800566c:	2b80      	cmp	r3, #128	; 0x80
 800566e:	d02a      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005670:	2b80      	cmp	r3, #128	; 0x80
 8005672:	d825      	bhi.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005674:	2b60      	cmp	r3, #96	; 0x60
 8005676:	d026      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005678:	2b60      	cmp	r3, #96	; 0x60
 800567a:	d821      	bhi.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800567c:	2b40      	cmp	r3, #64	; 0x40
 800567e:	d006      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d81d      	bhi.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005684:	2b00      	cmp	r3, #0
 8005686:	d009      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005688:	2b20      	cmp	r3, #32
 800568a:	d010      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x62>
 800568c:	e018      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800568e:	4b89      	ldr	r3, [pc, #548]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	4a88      	ldr	r2, [pc, #544]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005698:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800569a:	e015      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3304      	adds	r3, #4
 80056a0:	2100      	movs	r1, #0
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fb62 	bl	8005d6c <RCCEx_PLLSAI1_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056ac:	e00c      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3320      	adds	r3, #32
 80056b2:	2100      	movs	r1, #0
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fc4d 	bl	8005f54 <RCCEx_PLLSAI2_Config>
 80056ba:	4603      	mov	r3, r0
 80056bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056be:	e003      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	74fb      	strb	r3, [r7, #19]
      break;
 80056c4:	e000      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80056c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056c8:	7cfb      	ldrb	r3, [r7, #19]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056ce:	4b79      	ldr	r3, [pc, #484]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056d4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056dc:	4975      	ldr	r1, [pc, #468]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80056e4:	e001      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e6:	7cfb      	ldrb	r3, [r7, #19]
 80056e8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d047      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056fe:	d030      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005704:	d82a      	bhi.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800570a:	d02a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800570c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005710:	d824      	bhi.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005716:	d008      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800571c:	d81e      	bhi.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005726:	d010      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005728:	e018      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800572a:	4b62      	ldr	r3, [pc, #392]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	4a61      	ldr	r2, [pc, #388]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005734:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005736:	e015      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3304      	adds	r3, #4
 800573c:	2100      	movs	r1, #0
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fb14 	bl	8005d6c <RCCEx_PLLSAI1_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005748:	e00c      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3320      	adds	r3, #32
 800574e:	2100      	movs	r1, #0
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fbff 	bl	8005f54 <RCCEx_PLLSAI2_Config>
 8005756:	4603      	mov	r3, r0
 8005758:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800575a:	e003      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	74fb      	strb	r3, [r7, #19]
      break;
 8005760:	e000      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005764:	7cfb      	ldrb	r3, [r7, #19]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800576a:	4b52      	ldr	r3, [pc, #328]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800576c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005778:	494e      	ldr	r1, [pc, #312]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800577a:	4313      	orrs	r3, r2
 800577c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005780:	e001      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005782:	7cfb      	ldrb	r3, [r7, #19]
 8005784:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 809f 	beq.w	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005794:	2300      	movs	r3, #0
 8005796:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005798:	4b46      	ldr	r3, [pc, #280]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800579a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80057a4:	2301      	movs	r3, #1
 80057a6:	e000      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80057a8:	2300      	movs	r3, #0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00d      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ae:	4b41      	ldr	r3, [pc, #260]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b2:	4a40      	ldr	r2, [pc, #256]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b8:	6593      	str	r3, [r2, #88]	; 0x58
 80057ba:	4b3e      	ldr	r3, [pc, #248]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c2:	60bb      	str	r3, [r7, #8]
 80057c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057c6:	2301      	movs	r3, #1
 80057c8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057ca:	4b3b      	ldr	r3, [pc, #236]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a3a      	ldr	r2, [pc, #232]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057d6:	f7fb feff 	bl	80015d8 <HAL_GetTick>
 80057da:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057dc:	e009      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057de:	f7fb fefb 	bl	80015d8 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d902      	bls.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	74fb      	strb	r3, [r7, #19]
        break;
 80057f0:	e005      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057f2:	4b31      	ldr	r3, [pc, #196]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0ef      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80057fe:	7cfb      	ldrb	r3, [r7, #19]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d15b      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005804:	4b2b      	ldr	r3, [pc, #172]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01f      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	429a      	cmp	r2, r3
 8005820:	d019      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005822:	4b24      	ldr	r3, [pc, #144]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800582c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800582e:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005834:	4a1f      	ldr	r2, [pc, #124]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800583a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800583e:	4b1d      	ldr	r3, [pc, #116]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005844:	4a1b      	ldr	r2, [pc, #108]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800584a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800584e:	4a19      	ldr	r2, [pc, #100]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d016      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005860:	f7fb feba 	bl	80015d8 <HAL_GetTick>
 8005864:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005866:	e00b      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005868:	f7fb feb6 	bl	80015d8 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	f241 3288 	movw	r2, #5000	; 0x1388
 8005876:	4293      	cmp	r3, r2
 8005878:	d902      	bls.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	74fb      	strb	r3, [r7, #19]
            break;
 800587e:	e006      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005880:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0ec      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800588e:	7cfb      	ldrb	r3, [r7, #19]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10c      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005894:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058a4:	4903      	ldr	r1, [pc, #12]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058ac:	e008      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058ae:	7cfb      	ldrb	r3, [r7, #19]
 80058b0:	74bb      	strb	r3, [r7, #18]
 80058b2:	e005      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80058b4:	40021000 	.word	0x40021000
 80058b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058bc:	7cfb      	ldrb	r3, [r7, #19]
 80058be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058c0:	7c7b      	ldrb	r3, [r7, #17]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d105      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c6:	4ba0      	ldr	r3, [pc, #640]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ca:	4a9f      	ldr	r2, [pc, #636]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058de:	4b9a      	ldr	r3, [pc, #616]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e4:	f023 0203 	bic.w	r2, r3, #3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ec:	4996      	ldr	r1, [pc, #600]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005900:	4b91      	ldr	r3, [pc, #580]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005906:	f023 020c 	bic.w	r2, r3, #12
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	498e      	ldr	r1, [pc, #568]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005922:	4b89      	ldr	r3, [pc, #548]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005928:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005930:	4985      	ldr	r1, [pc, #532]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005944:	4b80      	ldr	r3, [pc, #512]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005952:	497d      	ldr	r1, [pc, #500]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005966:	4b78      	ldr	r3, [pc, #480]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005974:	4974      	ldr	r1, [pc, #464]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005988:	4b6f      	ldr	r3, [pc, #444]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005996:	496c      	ldr	r1, [pc, #432]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059aa:	4b67      	ldr	r3, [pc, #412]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059b8:	4963      	ldr	r1, [pc, #396]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059cc:	4b5e      	ldr	r3, [pc, #376]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059da:	495b      	ldr	r1, [pc, #364]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059ee:	4b56      	ldr	r3, [pc, #344]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fc:	4952      	ldr	r1, [pc, #328]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a10:	4b4d      	ldr	r3, [pc, #308]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1e:	494a      	ldr	r1, [pc, #296]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a32:	4b45      	ldr	r3, [pc, #276]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a40:	4941      	ldr	r1, [pc, #260]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a54:	4b3c      	ldr	r3, [pc, #240]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a5a:	f023 0203 	bic.w	r2, r3, #3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a62:	4939      	ldr	r1, [pc, #228]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d028      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a76:	4b34      	ldr	r3, [pc, #208]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a84:	4930      	ldr	r1, [pc, #192]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a94:	d106      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a96:	4b2c      	ldr	r3, [pc, #176]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	4a2b      	ldr	r2, [pc, #172]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aa0:	60d3      	str	r3, [r2, #12]
 8005aa2:	e011      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aac:	d10c      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 f959 	bl	8005d6c <RCCEx_PLLSAI1_Config>
 8005aba:	4603      	mov	r3, r0
 8005abc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005abe:	7cfb      	ldrb	r3, [r7, #19]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005ac4:	7cfb      	ldrb	r3, [r7, #19]
 8005ac6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d04d      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005adc:	d108      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005ade:	4b1a      	ldr	r3, [pc, #104]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ae0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ae4:	4a18      	ldr	r2, [pc, #96]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005aea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005aee:	e012      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005af0:	4b15      	ldr	r3, [pc, #84]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005af6:	4a14      	ldr	r2, [pc, #80]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005af8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005afc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005b00:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b0e:	490e      	ldr	r1, [pc, #56]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b1e:	d106      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b20:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4a08      	ldr	r2, [pc, #32]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b2a:	60d3      	str	r3, [r2, #12]
 8005b2c:	e020      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b36:	d109      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b38:	4b03      	ldr	r3, [pc, #12]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	4a02      	ldr	r2, [pc, #8]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b42:	60d3      	str	r3, [r2, #12]
 8005b44:	e014      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005b46:	bf00      	nop
 8005b48:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b54:	d10c      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 f905 	bl	8005d6c <RCCEx_PLLSAI1_Config>
 8005b62:	4603      	mov	r3, r0
 8005b64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b66:	7cfb      	ldrb	r3, [r7, #19]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005b6c:	7cfb      	ldrb	r3, [r7, #19]
 8005b6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d028      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b7c:	4b7a      	ldr	r3, [pc, #488]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b8a:	4977      	ldr	r1, [pc, #476]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b9a:	d106      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b9c:	4b72      	ldr	r3, [pc, #456]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	4a71      	ldr	r2, [pc, #452]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ba6:	60d3      	str	r3, [r2, #12]
 8005ba8:	e011      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bb2:	d10c      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	2101      	movs	r1, #1
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 f8d6 	bl	8005d6c <RCCEx_PLLSAI1_Config>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bc4:	7cfb      	ldrb	r3, [r7, #19]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005bca:	7cfb      	ldrb	r3, [r7, #19]
 8005bcc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d01e      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bda:	4b63      	ldr	r3, [pc, #396]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bea:	495f      	ldr	r1, [pc, #380]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bfc:	d10c      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3304      	adds	r3, #4
 8005c02:	2102      	movs	r1, #2
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 f8b1 	bl	8005d6c <RCCEx_PLLSAI1_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c0e:	7cfb      	ldrb	r3, [r7, #19]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005c14:	7cfb      	ldrb	r3, [r7, #19]
 8005c16:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00b      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c24:	4b50      	ldr	r3, [pc, #320]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c2a:	f023 0204 	bic.w	r2, r3, #4
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c34:	494c      	ldr	r1, [pc, #304]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00b      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c48:	4b47      	ldr	r3, [pc, #284]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c4e:	f023 0218 	bic.w	r2, r3, #24
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c58:	4943      	ldr	r1, [pc, #268]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d035      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c6c:	4b3e      	ldr	r3, [pc, #248]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a3d      	ldr	r2, [pc, #244]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c78:	f7fb fcae 	bl	80015d8 <HAL_GetTick>
 8005c7c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c7e:	e009      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c80:	f7fb fcaa 	bl	80015d8 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d902      	bls.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	74fb      	strb	r3, [r7, #19]
        break;
 8005c92:	e005      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c94:	4b34      	ldr	r3, [pc, #208]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1ef      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005ca0:	7cfb      	ldrb	r3, [r7, #19]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d113      	bne.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005ca6:	4b30      	ldr	r3, [pc, #192]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005ca8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cb6:	492c      	ldr	r1, [pc, #176]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3320      	adds	r3, #32
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 f945 	bl	8005f54 <RCCEx_PLLSAI2_Config>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005cce:	7cfb      	ldrb	r3, [r7, #19]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005cd4:	7cfb      	ldrb	r3, [r7, #19]
 8005cd6:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01e      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005ce4:	4b20      	ldr	r3, [pc, #128]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005ce6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf4:	491c      	ldr	r1, [pc, #112]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d06:	d10c      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3320      	adds	r3, #32
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 f920 	bl	8005f54 <RCCEx_PLLSAI2_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d18:	7cfb      	ldrb	r3, [r7, #19]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8005d1e:	7cfb      	ldrb	r3, [r7, #19]
 8005d20:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d017      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005d2e:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d3e:	490a      	ldr	r1, [pc, #40]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d50:	d105      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d52:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	4a04      	ldr	r2, [pc, #16]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d5c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40021000 	.word	0x40021000

08005d6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d7a:	4b72      	ldr	r3, [pc, #456]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00e      	beq.n	8005da4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d86:	4b6f      	ldr	r3, [pc, #444]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f003 0203 	and.w	r2, r3, #3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d103      	bne.n	8005d9e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
       ||
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d142      	bne.n	8005e24 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	73fb      	strb	r3, [r7, #15]
 8005da2:	e03f      	b.n	8005e24 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d018      	beq.n	8005dde <RCCEx_PLLSAI1_Config+0x72>
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d825      	bhi.n	8005dfc <RCCEx_PLLSAI1_Config+0x90>
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d002      	beq.n	8005dba <RCCEx_PLLSAI1_Config+0x4e>
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d009      	beq.n	8005dcc <RCCEx_PLLSAI1_Config+0x60>
 8005db8:	e020      	b.n	8005dfc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005dba:	4b62      	ldr	r3, [pc, #392]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d11d      	bne.n	8005e02 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dca:	e01a      	b.n	8005e02 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005dcc:	4b5d      	ldr	r3, [pc, #372]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d116      	bne.n	8005e06 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ddc:	e013      	b.n	8005e06 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005dde:	4b59      	ldr	r3, [pc, #356]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10f      	bne.n	8005e0a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005dea:	4b56      	ldr	r3, [pc, #344]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d109      	bne.n	8005e0a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dfa:	e006      	b.n	8005e0a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005e00:	e004      	b.n	8005e0c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005e02:	bf00      	nop
 8005e04:	e002      	b.n	8005e0c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005e06:	bf00      	nop
 8005e08:	e000      	b.n	8005e0c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005e0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d108      	bne.n	8005e24 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005e12:	4b4c      	ldr	r3, [pc, #304]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f023 0203 	bic.w	r2, r3, #3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4949      	ldr	r1, [pc, #292]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f040 8086 	bne.w	8005f38 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005e2c:	4b45      	ldr	r3, [pc, #276]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a44      	ldr	r2, [pc, #272]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e38:	f7fb fbce 	bl	80015d8 <HAL_GetTick>
 8005e3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e3e:	e009      	b.n	8005e54 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e40:	f7fb fbca 	bl	80015d8 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d902      	bls.n	8005e54 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	73fb      	strb	r3, [r7, #15]
        break;
 8005e52:	e005      	b.n	8005e60 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e54:	4b3b      	ldr	r3, [pc, #236]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1ef      	bne.n	8005e40 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d168      	bne.n	8005f38 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d113      	bne.n	8005e94 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e6c:	4b35      	ldr	r3, [pc, #212]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	4b35      	ldr	r3, [pc, #212]	; (8005f48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e72:	4013      	ands	r3, r2
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	6892      	ldr	r2, [r2, #8]
 8005e78:	0211      	lsls	r1, r2, #8
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	68d2      	ldr	r2, [r2, #12]
 8005e7e:	06d2      	lsls	r2, r2, #27
 8005e80:	4311      	orrs	r1, r2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6852      	ldr	r2, [r2, #4]
 8005e86:	3a01      	subs	r2, #1
 8005e88:	0112      	lsls	r2, r2, #4
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	492d      	ldr	r1, [pc, #180]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	610b      	str	r3, [r1, #16]
 8005e92:	e02d      	b.n	8005ef0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d115      	bne.n	8005ec6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e9a:	4b2a      	ldr	r3, [pc, #168]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e9c:	691a      	ldr	r2, [r3, #16]
 8005e9e:	4b2b      	ldr	r3, [pc, #172]	; (8005f4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6892      	ldr	r2, [r2, #8]
 8005ea6:	0211      	lsls	r1, r2, #8
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6912      	ldr	r2, [r2, #16]
 8005eac:	0852      	lsrs	r2, r2, #1
 8005eae:	3a01      	subs	r2, #1
 8005eb0:	0552      	lsls	r2, r2, #21
 8005eb2:	4311      	orrs	r1, r2
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6852      	ldr	r2, [r2, #4]
 8005eb8:	3a01      	subs	r2, #1
 8005eba:	0112      	lsls	r2, r2, #4
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	4921      	ldr	r1, [pc, #132]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	610b      	str	r3, [r1, #16]
 8005ec4:	e014      	b.n	8005ef0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ec6:	4b1f      	ldr	r3, [pc, #124]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ec8:	691a      	ldr	r2, [r3, #16]
 8005eca:	4b21      	ldr	r3, [pc, #132]	; (8005f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	6892      	ldr	r2, [r2, #8]
 8005ed2:	0211      	lsls	r1, r2, #8
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6952      	ldr	r2, [r2, #20]
 8005ed8:	0852      	lsrs	r2, r2, #1
 8005eda:	3a01      	subs	r2, #1
 8005edc:	0652      	lsls	r2, r2, #25
 8005ede:	4311      	orrs	r1, r2
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6852      	ldr	r2, [r2, #4]
 8005ee4:	3a01      	subs	r2, #1
 8005ee6:	0112      	lsls	r2, r2, #4
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	4916      	ldr	r1, [pc, #88]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ef0:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a13      	ldr	r2, [pc, #76]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ef6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005efa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005efc:	f7fb fb6c 	bl	80015d8 <HAL_GetTick>
 8005f00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f02:	e009      	b.n	8005f18 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f04:	f7fb fb68 	bl	80015d8 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d902      	bls.n	8005f18 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	73fb      	strb	r3, [r7, #15]
          break;
 8005f16:	e005      	b.n	8005f24 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0ef      	beq.n	8005f04 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d106      	bne.n	8005f38 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f2a:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f2c:	691a      	ldr	r2, [r3, #16]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	4904      	ldr	r1, [pc, #16]	; (8005f44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40021000 	.word	0x40021000
 8005f48:	07ff800f 	.word	0x07ff800f
 8005f4c:	ff9f800f 	.word	0xff9f800f
 8005f50:	f9ff800f 	.word	0xf9ff800f

08005f54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f62:	4b72      	ldr	r3, [pc, #456]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00e      	beq.n	8005f8c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f6e:	4b6f      	ldr	r3, [pc, #444]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 0203 	and.w	r2, r3, #3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d103      	bne.n	8005f86 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
       ||
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d142      	bne.n	800600c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	73fb      	strb	r3, [r7, #15]
 8005f8a:	e03f      	b.n	800600c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d018      	beq.n	8005fc6 <RCCEx_PLLSAI2_Config+0x72>
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d825      	bhi.n	8005fe4 <RCCEx_PLLSAI2_Config+0x90>
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d002      	beq.n	8005fa2 <RCCEx_PLLSAI2_Config+0x4e>
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d009      	beq.n	8005fb4 <RCCEx_PLLSAI2_Config+0x60>
 8005fa0:	e020      	b.n	8005fe4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fa2:	4b62      	ldr	r3, [pc, #392]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d11d      	bne.n	8005fea <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fb2:	e01a      	b.n	8005fea <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fb4:	4b5d      	ldr	r3, [pc, #372]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d116      	bne.n	8005fee <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fc4:	e013      	b.n	8005fee <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fc6:	4b59      	ldr	r3, [pc, #356]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10f      	bne.n	8005ff2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fd2:	4b56      	ldr	r3, [pc, #344]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d109      	bne.n	8005ff2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fe2:	e006      	b.n	8005ff2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe8:	e004      	b.n	8005ff4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005fea:	bf00      	nop
 8005fec:	e002      	b.n	8005ff4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e000      	b.n	8005ff4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005ff2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d108      	bne.n	800600c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005ffa:	4b4c      	ldr	r3, [pc, #304]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f023 0203 	bic.w	r2, r3, #3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4949      	ldr	r1, [pc, #292]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006008:	4313      	orrs	r3, r2
 800600a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f040 8086 	bne.w	8006120 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006014:	4b45      	ldr	r3, [pc, #276]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a44      	ldr	r2, [pc, #272]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 800601a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800601e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006020:	f7fb fada 	bl	80015d8 <HAL_GetTick>
 8006024:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006026:	e009      	b.n	800603c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006028:	f7fb fad6 	bl	80015d8 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d902      	bls.n	800603c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	73fb      	strb	r3, [r7, #15]
        break;
 800603a:	e005      	b.n	8006048 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800603c:	4b3b      	ldr	r3, [pc, #236]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1ef      	bne.n	8006028 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d168      	bne.n	8006120 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d113      	bne.n	800607c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006054:	4b35      	ldr	r3, [pc, #212]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006056:	695a      	ldr	r2, [r3, #20]
 8006058:	4b35      	ldr	r3, [pc, #212]	; (8006130 <RCCEx_PLLSAI2_Config+0x1dc>)
 800605a:	4013      	ands	r3, r2
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6892      	ldr	r2, [r2, #8]
 8006060:	0211      	lsls	r1, r2, #8
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68d2      	ldr	r2, [r2, #12]
 8006066:	06d2      	lsls	r2, r2, #27
 8006068:	4311      	orrs	r1, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6852      	ldr	r2, [r2, #4]
 800606e:	3a01      	subs	r2, #1
 8006070:	0112      	lsls	r2, r2, #4
 8006072:	430a      	orrs	r2, r1
 8006074:	492d      	ldr	r1, [pc, #180]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006076:	4313      	orrs	r3, r2
 8006078:	614b      	str	r3, [r1, #20]
 800607a:	e02d      	b.n	80060d8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d115      	bne.n	80060ae <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006082:	4b2a      	ldr	r3, [pc, #168]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006084:	695a      	ldr	r2, [r3, #20]
 8006086:	4b2b      	ldr	r3, [pc, #172]	; (8006134 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006088:	4013      	ands	r3, r2
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6892      	ldr	r2, [r2, #8]
 800608e:	0211      	lsls	r1, r2, #8
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	6912      	ldr	r2, [r2, #16]
 8006094:	0852      	lsrs	r2, r2, #1
 8006096:	3a01      	subs	r2, #1
 8006098:	0552      	lsls	r2, r2, #21
 800609a:	4311      	orrs	r1, r2
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6852      	ldr	r2, [r2, #4]
 80060a0:	3a01      	subs	r2, #1
 80060a2:	0112      	lsls	r2, r2, #4
 80060a4:	430a      	orrs	r2, r1
 80060a6:	4921      	ldr	r1, [pc, #132]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	614b      	str	r3, [r1, #20]
 80060ac:	e014      	b.n	80060d8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060ae:	4b1f      	ldr	r3, [pc, #124]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060b0:	695a      	ldr	r2, [r3, #20]
 80060b2:	4b21      	ldr	r3, [pc, #132]	; (8006138 <RCCEx_PLLSAI2_Config+0x1e4>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6892      	ldr	r2, [r2, #8]
 80060ba:	0211      	lsls	r1, r2, #8
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6952      	ldr	r2, [r2, #20]
 80060c0:	0852      	lsrs	r2, r2, #1
 80060c2:	3a01      	subs	r2, #1
 80060c4:	0652      	lsls	r2, r2, #25
 80060c6:	4311      	orrs	r1, r2
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6852      	ldr	r2, [r2, #4]
 80060cc:	3a01      	subs	r2, #1
 80060ce:	0112      	lsls	r2, r2, #4
 80060d0:	430a      	orrs	r2, r1
 80060d2:	4916      	ldr	r1, [pc, #88]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80060d8:	4b14      	ldr	r3, [pc, #80]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a13      	ldr	r2, [pc, #76]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 80060de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e4:	f7fb fa78 	bl	80015d8 <HAL_GetTick>
 80060e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060ea:	e009      	b.n	8006100 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060ec:	f7fb fa74 	bl	80015d8 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d902      	bls.n	8006100 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	73fb      	strb	r3, [r7, #15]
          break;
 80060fe:	e005      	b.n	800610c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006100:	4b0a      	ldr	r3, [pc, #40]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0ef      	beq.n	80060ec <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800610c:	7bfb      	ldrb	r3, [r7, #15]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006112:	4b06      	ldr	r3, [pc, #24]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006114:	695a      	ldr	r2, [r3, #20]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	4904      	ldr	r1, [pc, #16]	; (800612c <RCCEx_PLLSAI2_Config+0x1d8>)
 800611c:	4313      	orrs	r3, r2
 800611e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	40021000 	.word	0x40021000
 8006130:	07ff800f 	.word	0x07ff800f
 8006134:	ff9f800f 	.word	0xff9f800f
 8006138:	f9ff800f 	.word	0xf9ff800f

0800613c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d06c      	beq.n	8006228 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fa fe44 	bl	8000df0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	22ca      	movs	r2, #202	; 0xca
 8006176:	625a      	str	r2, [r3, #36]	; 0x24
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2253      	movs	r2, #83	; 0x53
 800617e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f9a0 	bl	80064c6 <RTC_EnterInitMode>
 8006186:	4603      	mov	r3, r0
 8006188:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d14b      	bne.n	8006228 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6812      	ldr	r2, [r2, #0]
 800619a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800619e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6899      	ldr	r1, [r3, #8]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	68d2      	ldr	r2, [r2, #12]
 80061ca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6919      	ldr	r1, [r3, #16]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	041a      	lsls	r2, r3, #16
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f9a3 	bl	800652c <RTC_ExitInitMode>
 80061e6:	4603      	mov	r3, r0
 80061e8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d11b      	bne.n	8006228 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0203 	bic.w	r2, r2, #3
 80061fe:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69da      	ldr	r2, [r3, #28]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	22ff      	movs	r2, #255	; 0xff
 800621e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8006228:	7bfb      	ldrb	r3, [r7, #15]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006232:	b590      	push	{r4, r7, lr}
 8006234:	b087      	sub	sp, #28
 8006236:	af00      	add	r7, sp, #0
 8006238:	60f8      	str	r0, [r7, #12]
 800623a:	60b9      	str	r1, [r7, #8]
 800623c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <HAL_RTC_SetTime+0x1a>
 8006248:	2302      	movs	r3, #2
 800624a:	e08b      	b.n	8006364 <HAL_RTC_SetTime+0x132>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	22ca      	movs	r2, #202	; 0xca
 8006262:	625a      	str	r2, [r3, #36]	; 0x24
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2253      	movs	r2, #83	; 0x53
 800626a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f92a 	bl	80064c6 <RTC_EnterInitMode>
 8006272:	4603      	mov	r3, r0
 8006274:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006276:	7cfb      	ldrb	r3, [r7, #19]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d163      	bne.n	8006344 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d126      	bne.n	80062d0 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	d102      	bne.n	8006296 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2200      	movs	r2, #0
 8006294:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f000 f984 	bl	80065a8 <RTC_ByteToBcd2>
 80062a0:	4603      	mov	r3, r0
 80062a2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	785b      	ldrb	r3, [r3, #1]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 f97d 	bl	80065a8 <RTC_ByteToBcd2>
 80062ae:	4603      	mov	r3, r0
 80062b0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062b2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	789b      	ldrb	r3, [r3, #2]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 f975 	bl	80065a8 <RTC_ByteToBcd2>
 80062be:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062c0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	78db      	ldrb	r3, [r3, #3]
 80062c8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062ca:	4313      	orrs	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	e018      	b.n	8006302 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d102      	bne.n	80062e4 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2200      	movs	r2, #0
 80062e2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	785b      	ldrb	r3, [r3, #1]
 80062ee:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062f0:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062f6:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	78db      	ldrb	r3, [r3, #3]
 80062fc:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800630c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006310:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006320:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6899      	ldr	r1, [r3, #8]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	431a      	orrs	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 f8f6 	bl	800652c <RTC_ExitInitMode>
 8006340:	4603      	mov	r3, r0
 8006342:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	22ff      	movs	r2, #255	; 0xff
 800634a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800634c:	7cfb      	ldrb	r3, [r7, #19]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006362:	7cfb      	ldrb	r3, [r7, #19]
}
 8006364:	4618      	mov	r0, r3
 8006366:	371c      	adds	r7, #28
 8006368:	46bd      	mov	sp, r7
 800636a:	bd90      	pop	{r4, r7, pc}

0800636c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800636c:	b590      	push	{r4, r7, lr}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_RTC_SetDate+0x1a>
 8006382:	2302      	movs	r3, #2
 8006384:	e075      	b.n	8006472 <HAL_RTC_SetDate+0x106>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2202      	movs	r2, #2
 8006392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10e      	bne.n	80063ba <HAL_RTC_SetDate+0x4e>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	785b      	ldrb	r3, [r3, #1]
 80063a0:	f003 0310 	and.w	r3, r3, #16
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d008      	beq.n	80063ba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	785b      	ldrb	r3, [r3, #1]
 80063ac:	f023 0310 	bic.w	r3, r3, #16
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	330a      	adds	r3, #10
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d11c      	bne.n	80063fa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	78db      	ldrb	r3, [r3, #3]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 f8ef 	bl	80065a8 <RTC_ByteToBcd2>
 80063ca:	4603      	mov	r3, r0
 80063cc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	785b      	ldrb	r3, [r3, #1]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 f8e8 	bl	80065a8 <RTC_ByteToBcd2>
 80063d8:	4603      	mov	r3, r0
 80063da:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80063dc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	789b      	ldrb	r3, [r3, #2]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 f8e0 	bl	80065a8 <RTC_ByteToBcd2>
 80063e8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80063ea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	e00e      	b.n	8006418 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	78db      	ldrb	r3, [r3, #3]
 80063fe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006406:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800640c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	22ca      	movs	r2, #202	; 0xca
 800641e:	625a      	str	r2, [r3, #36]	; 0x24
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2253      	movs	r2, #83	; 0x53
 8006426:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f000 f84c 	bl	80064c6 <RTC_EnterInitMode>
 800642e:	4603      	mov	r3, r0
 8006430:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006432:	7cfb      	ldrb	r3, [r7, #19]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10c      	bne.n	8006452 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006442:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006446:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f86f 	bl	800652c <RTC_ExitInitMode>
 800644e:	4603      	mov	r3, r0
 8006450:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	22ff      	movs	r2, #255	; 0xff
 8006458:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800645a:	7cfb      	ldrb	r3, [r7, #19]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d103      	bne.n	8006468 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006470:	7cfb      	ldrb	r3, [r7, #19]
}
 8006472:	4618      	mov	r0, r3
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	bd90      	pop	{r4, r7, pc}

0800647a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006490:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006492:	f7fb f8a1 	bl	80015d8 <HAL_GetTick>
 8006496:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006498:	e009      	b.n	80064ae <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800649a:	f7fb f89d 	bl	80015d8 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064a8:	d901      	bls.n	80064ae <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e007      	b.n	80064be <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f003 0320 	and.w	r3, r3, #32
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0ee      	beq.n	800649a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d120      	bne.n	8006522 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f04f 32ff 	mov.w	r2, #4294967295
 80064e8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80064ea:	f7fb f875 	bl	80015d8 <HAL_GetTick>
 80064ee:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80064f0:	e00d      	b.n	800650e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80064f2:	f7fb f871 	bl	80015d8 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006500:	d905      	bls.n	800650e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2203      	movs	r2, #3
 800650a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006518:	2b00      	cmp	r3, #0
 800651a:	d102      	bne.n	8006522 <RTC_EnterInitMode+0x5c>
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	2b03      	cmp	r3, #3
 8006520:	d1e7      	bne.n	80064f2 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006522:	7bfb      	ldrb	r3, [r7, #15]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006534:	2300      	movs	r3, #0
 8006536:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006538:	4b1a      	ldr	r3, [pc, #104]	; (80065a4 <RTC_ExitInitMode+0x78>)
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	4a19      	ldr	r2, [pc, #100]	; (80065a4 <RTC_ExitInitMode+0x78>)
 800653e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006542:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006544:	4b17      	ldr	r3, [pc, #92]	; (80065a4 <RTC_ExitInitMode+0x78>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10c      	bne.n	800656a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff ff92 	bl	800647a <HAL_RTC_WaitForSynchro>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d01e      	beq.n	800659a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2203      	movs	r2, #3
 8006560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	73fb      	strb	r3, [r7, #15]
 8006568:	e017      	b.n	800659a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800656a:	4b0e      	ldr	r3, [pc, #56]	; (80065a4 <RTC_ExitInitMode+0x78>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	4a0d      	ldr	r2, [pc, #52]	; (80065a4 <RTC_ExitInitMode+0x78>)
 8006570:	f023 0320 	bic.w	r3, r3, #32
 8006574:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff ff7f 	bl	800647a <HAL_RTC_WaitForSynchro>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d005      	beq.n	800658e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2203      	movs	r2, #3
 8006586:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800658e:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <RTC_ExitInitMode+0x78>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	4a04      	ldr	r2, [pc, #16]	; (80065a4 <RTC_ExitInitMode+0x78>)
 8006594:	f043 0320 	orr.w	r3, r3, #32
 8006598:	6093      	str	r3, [r2, #8]
  }

  return status;
 800659a:	7bfb      	ldrb	r3, [r7, #15]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40002800 	.word	0x40002800

080065a8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	4603      	mov	r3, r0
 80065b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80065b6:	79fb      	ldrb	r3, [r7, #7]
 80065b8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80065ba:	e005      	b.n	80065c8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3301      	adds	r3, #1
 80065c0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80065c2:	7afb      	ldrb	r3, [r7, #11]
 80065c4:	3b0a      	subs	r3, #10
 80065c6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80065c8:	7afb      	ldrb	r3, [r7, #11]
 80065ca:	2b09      	cmp	r3, #9
 80065cc:	d8f6      	bhi.n	80065bc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	7afb      	ldrb	r3, [r7, #11]
 80065d8:	4313      	orrs	r3, r2
 80065da:	b2db      	uxtb	r3, r3
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d008      	beq.n	8006616 <HAL_SD_IRQHandler+0x2e>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f9be 	bl	8006990 <SD_Read_IT>
 8006614:	e199      	b.n	800694a <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 80ae 	beq.w	8006782 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800662e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6812      	ldr	r2, [r2, #0]
 800663a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800663e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006642:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006652:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006662:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d038      	beq.n	80066e0 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d104      	bne.n	8006682 <HAL_SD_IRQHandler+0x9a>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b00      	cmp	r3, #0
 8006680:	d011      	beq.n	80066a6 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f001 fe14 	bl	80082b4 <SDMMC_CmdStopTransfer>
 800668c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d008      	beq.n	80066a6 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	431a      	orrs	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f96b 	bl	800697c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4aa0      	ldr	r2, [pc, #640]	; (800692c <HAL_SD_IRQHandler+0x344>)
 80066ac:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d104      	bne.n	80066d0 <HAL_SD_IRQHandler+0xe8>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f949 	bl	8006968 <HAL_SD_RxCpltCallback>
 80066d6:	e138      	b.n	800694a <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f93b 	bl	8006954 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 80066de:	e134      	b.n	800694a <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 812f 	beq.w	800694a <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2200      	movs	r2, #0
 80066f2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2200      	movs	r2, #0
 80066fa:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2200      	movs	r2, #0
 8006702:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d104      	bne.n	8006718 <HAL_SD_IRQHandler+0x130>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f003 0320 	and.w	r3, r3, #32
 8006714:	2b00      	cmp	r3, #0
 8006716:	d011      	beq.n	800673c <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4618      	mov	r0, r3
 800671e:	f001 fdc9 	bl	80082b4 <SDMMC_CmdStopTransfer>
 8006722:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d008      	beq.n	800673c <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f920 	bl	800697c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f003 0310 	and.w	r3, r3, #16
 8006750:	2b00      	cmp	r3, #0
 8006752:	d104      	bne.n	800675e <HAL_SD_IRQHandler+0x176>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f8f8 	bl	8006954 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d105      	bne.n	800677a <HAL_SD_IRQHandler+0x192>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80e8 	beq.w	800694a <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f8f4 	bl	8006968 <HAL_SD_RxCpltCallback>
}
 8006780:	e0e3      	b.n	800694a <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d008      	beq.n	80067a2 <HAL_SD_IRQHandler+0x1ba>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f949 	bl	8006a32 <SD_Write_IT>
 80067a0:	e0d3      	b.n	800694a <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a8:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 809d 	beq.w	80068ec <HAL_SD_IRQHandler+0x304>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d005      	beq.n	80067cc <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	f043 0202 	orr.w	r2, r3, #2
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d2:	f003 0308 	and.w	r3, r3, #8
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d005      	beq.n	80067e6 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	f043 0208 	orr.w	r2, r3, #8
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ec:	f003 0320 	and.w	r3, r3, #32
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d005      	beq.n	8006800 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f8:	f043 0220 	orr.w	r2, r3, #32
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006806:	f003 0310 	and.w	r3, r3, #16
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	f043 0210 	orr.w	r2, r3, #16
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a43      	ldr	r2, [pc, #268]	; (800692c <HAL_SD_IRQHandler+0x344>)
 8006820:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006830:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006840:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006850:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68da      	ldr	r2, [r3, #12]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006860:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f001 fd24 	bl	80082b4 <SDMMC_CmdStopTransfer>
 800686c:	4602      	mov	r2, r0
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006886:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006890:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f866 	bl	800697c <HAL_SD_ErrorCallback>
}
 80068b0:	e04b      	b.n	800694a <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d046      	beq.n	800694a <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d042      	beq.n	800694a <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80068d2:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2200      	movs	r2, #0
 80068da:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f849 	bl	800697c <HAL_SD_ErrorCallback>
}
 80068ea:	e02e      	b.n	800694a <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d027      	beq.n	800694a <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006902:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10e      	bne.n	8006930 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f003 0320 	and.w	r3, r3, #32
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f8fb 	bl	8006b18 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8006922:	e012      	b.n	800694a <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f8e3 	bl	8006af0 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800692a:	e00e      	b.n	800694a <HAL_SD_IRQHandler+0x362>
 800692c:	18000f3a 	.word	0x18000f3a
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f8e2 	bl	8006b04 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8006940:	e003      	b.n	800694a <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f8ca 	bl	8006adc <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8006948:	e7ff      	b.n	800694a <HAL_SD_IRQHandler+0x362>
 800694a:	bf00      	nop
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop

08006954 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d03f      	beq.n	8006a2a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80069aa:	2300      	movs	r3, #0
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	e033      	b.n	8006a18 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f001 fc15 	bl	80081e4 <SDMMC_ReadFIFO>
 80069ba:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3301      	adds	r3, #1
 80069c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	0a1b      	lsrs	r3, r3, #8
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3301      	adds	r3, #1
 80069de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	3301      	adds	r3, #1
 80069f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	0e1b      	lsrs	r3, r3, #24
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	3301      	adds	r3, #1
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2b07      	cmp	r3, #7
 8006a1c:	d9c8      	bls.n	80069b0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006a2a:	bf00      	nop
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b086      	sub	sp, #24
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d043      	beq.n	8006ad4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]
 8006a50:	e037      	b.n	8006ac2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	021a      	lsls	r2, r3, #8
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3301      	adds	r3, #1
 8006a74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	041a      	lsls	r2, r3, #16
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	061a      	lsls	r2, r3, #24
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f107 0208 	add.w	r2, r7, #8
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 fba1 	bl	80081fe <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b07      	cmp	r3, #7
 8006ac6:	d9c4      	bls.n	8006a52 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e095      	b.n	8006c6a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d108      	bne.n	8006b58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b4e:	d009      	beq.n	8006b64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	61da      	str	r2, [r3, #28]
 8006b56:	e005      	b.n	8006b64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fa fa22 	bl	8000fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ba4:	d902      	bls.n	8006bac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	e002      	b.n	8006bb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006bba:	d007      	beq.n	8006bcc <HAL_SPI_Init+0xa0>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bc4:	d002      	beq.n	8006bcc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0e:	ea42 0103 	orr.w	r1, r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c16:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	0c1b      	lsrs	r3, r3, #16
 8006c28:	f003 0204 	and.w	r2, r3, #4
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	f003 0310 	and.w	r3, r3, #16
 8006c34:	431a      	orrs	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c48:	ea42 0103 	orr.w	r1, r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b088      	sub	sp, #32
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	60f8      	str	r0, [r7, #12]
 8006c7a:	60b9      	str	r1, [r7, #8]
 8006c7c:	603b      	str	r3, [r7, #0]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_SPI_Transmit+0x22>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e158      	b.n	8006f46 <HAL_SPI_Transmit+0x2d4>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c9c:	f7fa fc9c 	bl	80015d8 <HAL_GetTick>
 8006ca0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ca2:	88fb      	ldrh	r3, [r7, #6]
 8006ca4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d002      	beq.n	8006cb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cb6:	e13d      	b.n	8006f34 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <HAL_SPI_Transmit+0x52>
 8006cbe:	88fb      	ldrh	r3, [r7, #6]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d102      	bne.n	8006cca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cc8:	e134      	b.n	8006f34 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2203      	movs	r2, #3
 8006cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	88fa      	ldrh	r2, [r7, #6]
 8006ce2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	88fa      	ldrh	r2, [r7, #6]
 8006ce8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d14:	d10f      	bne.n	8006d36 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d40:	2b40      	cmp	r3, #64	; 0x40
 8006d42:	d007      	beq.n	8006d54 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d5c:	d94b      	bls.n	8006df6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <HAL_SPI_Transmit+0xfa>
 8006d66:	8afb      	ldrh	r3, [r7, #22]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d13e      	bne.n	8006dea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d70:	881a      	ldrh	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7c:	1c9a      	adds	r2, r3, #2
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d90:	e02b      	b.n	8006dea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d112      	bne.n	8006dc6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da4:	881a      	ldrh	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db0:	1c9a      	adds	r2, r3, #2
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006dc4:	e011      	b.n	8006dea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dc6:	f7fa fc07 	bl	80015d8 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d803      	bhi.n	8006dde <HAL_SPI_Transmit+0x16c>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ddc:	d102      	bne.n	8006de4 <HAL_SPI_Transmit+0x172>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d102      	bne.n	8006dea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006de8:	e0a4      	b.n	8006f34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1ce      	bne.n	8006d92 <HAL_SPI_Transmit+0x120>
 8006df4:	e07c      	b.n	8006ef0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <HAL_SPI_Transmit+0x192>
 8006dfe:	8afb      	ldrh	r3, [r7, #22]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d170      	bne.n	8006ee6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d912      	bls.n	8006e34 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e12:	881a      	ldrh	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1e:	1c9a      	adds	r2, r3, #2
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	3b02      	subs	r3, #2
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e32:	e058      	b.n	8006ee6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	330c      	adds	r3, #12
 8006e3e:	7812      	ldrb	r2, [r2, #0]
 8006e40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	3b01      	subs	r3, #1
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006e5a:	e044      	b.n	8006ee6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d12b      	bne.n	8006ec2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d912      	bls.n	8006e9a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	881a      	ldrh	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	1c9a      	adds	r2, r3, #2
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	3b02      	subs	r3, #2
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e98:	e025      	b.n	8006ee6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	330c      	adds	r3, #12
 8006ea4:	7812      	ldrb	r2, [r2, #0]
 8006ea6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ec0:	e011      	b.n	8006ee6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ec2:	f7fa fb89 	bl	80015d8 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d803      	bhi.n	8006eda <HAL_SPI_Transmit+0x268>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed8:	d102      	bne.n	8006ee0 <HAL_SPI_Transmit+0x26e>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d102      	bne.n	8006ee6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ee4:	e026      	b.n	8006f34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1b5      	bne.n	8006e5c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 fce3 	bl	80078c0 <SPI_EndRxTxTransaction>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2220      	movs	r2, #32
 8006f04:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f0e:	2300      	movs	r3, #0
 8006f10:	613b      	str	r3, [r7, #16]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	613b      	str	r3, [r7, #16]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	613b      	str	r3, [r7, #16]
 8006f22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	77fb      	strb	r3, [r7, #31]
 8006f30:	e000      	b.n	8006f34 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006f32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f44:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3720      	adds	r7, #32
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b088      	sub	sp, #32
 8006f52:	af02      	add	r7, sp, #8
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	60b9      	str	r1, [r7, #8]
 8006f58:	603b      	str	r3, [r7, #0]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f6a:	d112      	bne.n	8006f92 <HAL_SPI_Receive+0x44>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10e      	bne.n	8006f92 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2204      	movs	r2, #4
 8006f78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f7c:	88fa      	ldrh	r2, [r7, #6]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	4613      	mov	r3, r2
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	68b9      	ldr	r1, [r7, #8]
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 f910 	bl	80071ae <HAL_SPI_TransmitReceive>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	e109      	b.n	80071a6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_SPI_Receive+0x52>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e102      	b.n	80071a6 <HAL_SPI_Receive+0x258>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fa8:	f7fa fb16 	bl	80015d8 <HAL_GetTick>
 8006fac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d002      	beq.n	8006fc0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006fba:	2302      	movs	r3, #2
 8006fbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fbe:	e0e9      	b.n	8007194 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <HAL_SPI_Receive+0x7e>
 8006fc6:	88fb      	ldrh	r3, [r7, #6]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d102      	bne.n	8006fd2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fd0:	e0e0      	b.n	8007194 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2204      	movs	r2, #4
 8006fd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	88fa      	ldrh	r2, [r7, #6]
 8006fea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	88fa      	ldrh	r2, [r7, #6]
 8006ff2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800701c:	d908      	bls.n	8007030 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800702c:	605a      	str	r2, [r3, #4]
 800702e:	e007      	b.n	8007040 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800703e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007048:	d10f      	bne.n	800706a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007058:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007068:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007074:	2b40      	cmp	r3, #64	; 0x40
 8007076:	d007      	beq.n	8007088 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007086:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007090:	d867      	bhi.n	8007162 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007092:	e030      	b.n	80070f6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d117      	bne.n	80070d2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f103 020c 	add.w	r2, r3, #12
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	7812      	ldrb	r2, [r2, #0]
 80070b0:	b2d2      	uxtb	r2, r2
 80070b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80070d0:	e011      	b.n	80070f6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070d2:	f7fa fa81 	bl	80015d8 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d803      	bhi.n	80070ea <HAL_SPI_Receive+0x19c>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e8:	d102      	bne.n	80070f0 <HAL_SPI_Receive+0x1a2>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d102      	bne.n	80070f6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80070f4:	e04e      	b.n	8007194 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1c8      	bne.n	8007094 <HAL_SPI_Receive+0x146>
 8007102:	e034      	b.n	800716e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b01      	cmp	r3, #1
 8007110:	d115      	bne.n	800713e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	b292      	uxth	r2, r2
 800711e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007124:	1c9a      	adds	r2, r3, #2
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007130:	b29b      	uxth	r3, r3
 8007132:	3b01      	subs	r3, #1
 8007134:	b29a      	uxth	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800713c:	e011      	b.n	8007162 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800713e:	f7fa fa4b 	bl	80015d8 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d803      	bhi.n	8007156 <HAL_SPI_Receive+0x208>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007154:	d102      	bne.n	800715c <HAL_SPI_Receive+0x20e>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d102      	bne.n	8007162 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007160:	e018      	b.n	8007194 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1ca      	bne.n	8007104 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 fb4c 	bl	8007810 <SPI_EndRxTransaction>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d002      	beq.n	8007184 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2220      	movs	r2, #32
 8007182:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	75fb      	strb	r3, [r7, #23]
 8007190:	e000      	b.n	8007194 <HAL_SPI_Receive+0x246>
  }

error :
 8007192:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b08a      	sub	sp, #40	; 0x28
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	60f8      	str	r0, [r7, #12]
 80071b6:	60b9      	str	r1, [r7, #8]
 80071b8:	607a      	str	r2, [r7, #4]
 80071ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071bc:	2301      	movs	r3, #1
 80071be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_SPI_TransmitReceive+0x26>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e1fb      	b.n	80075cc <HAL_SPI_TransmitReceive+0x41e>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071dc:	f7fa f9fc 	bl	80015d8 <HAL_GetTick>
 80071e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80071f0:	887b      	ldrh	r3, [r7, #2]
 80071f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80071f4:	887b      	ldrh	r3, [r7, #2]
 80071f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071f8:	7efb      	ldrb	r3, [r7, #27]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d00e      	beq.n	800721c <HAL_SPI_TransmitReceive+0x6e>
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007204:	d106      	bne.n	8007214 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d102      	bne.n	8007214 <HAL_SPI_TransmitReceive+0x66>
 800720e:	7efb      	ldrb	r3, [r7, #27]
 8007210:	2b04      	cmp	r3, #4
 8007212:	d003      	beq.n	800721c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007214:	2302      	movs	r3, #2
 8007216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800721a:	e1cd      	b.n	80075b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d005      	beq.n	800722e <HAL_SPI_TransmitReceive+0x80>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <HAL_SPI_TransmitReceive+0x80>
 8007228:	887b      	ldrh	r3, [r7, #2]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d103      	bne.n	8007236 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007234:	e1c0      	b.n	80075b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b04      	cmp	r3, #4
 8007240:	d003      	beq.n	800724a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2205      	movs	r2, #5
 8007246:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	887a      	ldrh	r2, [r7, #2]
 800725a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	887a      	ldrh	r2, [r7, #2]
 8007262:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	887a      	ldrh	r2, [r7, #2]
 8007270:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	887a      	ldrh	r2, [r7, #2]
 8007276:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800728c:	d802      	bhi.n	8007294 <HAL_SPI_TransmitReceive+0xe6>
 800728e:	8a3b      	ldrh	r3, [r7, #16]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d908      	bls.n	80072a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072a2:	605a      	str	r2, [r3, #4]
 80072a4:	e007      	b.n	80072b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c0:	2b40      	cmp	r3, #64	; 0x40
 80072c2:	d007      	beq.n	80072d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072dc:	d97c      	bls.n	80073d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <HAL_SPI_TransmitReceive+0x13e>
 80072e6:	8a7b      	ldrh	r3, [r7, #18]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d169      	bne.n	80073c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	881a      	ldrh	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	1c9a      	adds	r2, r3, #2
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007306:	b29b      	uxth	r3, r3
 8007308:	3b01      	subs	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007310:	e056      	b.n	80073c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b02      	cmp	r3, #2
 800731e:	d11b      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x1aa>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007324:	b29b      	uxth	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d016      	beq.n	8007358 <HAL_SPI_TransmitReceive+0x1aa>
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	2b01      	cmp	r3, #1
 800732e:	d113      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007334:	881a      	ldrh	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007340:	1c9a      	adds	r2, r3, #2
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800734a:	b29b      	uxth	r3, r3
 800734c:	3b01      	subs	r3, #1
 800734e:	b29a      	uxth	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	2b01      	cmp	r3, #1
 8007364:	d11c      	bne.n	80073a0 <HAL_SPI_TransmitReceive+0x1f2>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d016      	beq.n	80073a0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68da      	ldr	r2, [r3, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737c:	b292      	uxth	r2, r2
 800737e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007384:	1c9a      	adds	r2, r3, #2
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007390:	b29b      	uxth	r3, r3
 8007392:	3b01      	subs	r3, #1
 8007394:	b29a      	uxth	r2, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800739c:	2301      	movs	r3, #1
 800739e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073a0:	f7fa f91a 	bl	80015d8 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d807      	bhi.n	80073c0 <HAL_SPI_TransmitReceive+0x212>
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b6:	d003      	beq.n	80073c0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80073be:	e0fb      	b.n	80075b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1a3      	bne.n	8007312 <HAL_SPI_TransmitReceive+0x164>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d19d      	bne.n	8007312 <HAL_SPI_TransmitReceive+0x164>
 80073d6:	e0df      	b.n	8007598 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <HAL_SPI_TransmitReceive+0x23a>
 80073e0:	8a7b      	ldrh	r3, [r7, #18]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	f040 80cb 	bne.w	800757e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d912      	bls.n	8007418 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f6:	881a      	ldrh	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	1c9a      	adds	r2, r3, #2
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800740c:	b29b      	uxth	r3, r3
 800740e:	3b02      	subs	r3, #2
 8007410:	b29a      	uxth	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007416:	e0b2      	b.n	800757e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	330c      	adds	r3, #12
 8007422:	7812      	ldrb	r2, [r2, #0]
 8007424:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007434:	b29b      	uxth	r3, r3
 8007436:	3b01      	subs	r3, #1
 8007438:	b29a      	uxth	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800743e:	e09e      	b.n	800757e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b02      	cmp	r3, #2
 800744c:	d134      	bne.n	80074b8 <HAL_SPI_TransmitReceive+0x30a>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007452:	b29b      	uxth	r3, r3
 8007454:	2b00      	cmp	r3, #0
 8007456:	d02f      	beq.n	80074b8 <HAL_SPI_TransmitReceive+0x30a>
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	2b01      	cmp	r3, #1
 800745c:	d12c      	bne.n	80074b8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007462:	b29b      	uxth	r3, r3
 8007464:	2b01      	cmp	r3, #1
 8007466:	d912      	bls.n	800748e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	881a      	ldrh	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007478:	1c9a      	adds	r2, r3, #2
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b02      	subs	r3, #2
 8007486:	b29a      	uxth	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800748c:	e012      	b.n	80074b4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	330c      	adds	r3, #12
 8007498:	7812      	ldrb	r2, [r2, #0]
 800749a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	3b01      	subs	r3, #1
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d148      	bne.n	8007558 <HAL_SPI_TransmitReceive+0x3aa>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d042      	beq.n	8007558 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074d8:	b29b      	uxth	r3, r3
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d923      	bls.n	8007526 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68da      	ldr	r2, [r3, #12]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e8:	b292      	uxth	r2, r2
 80074ea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	1c9a      	adds	r2, r3, #2
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b02      	subs	r3, #2
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800750e:	b29b      	uxth	r3, r3
 8007510:	2b01      	cmp	r3, #1
 8007512:	d81f      	bhi.n	8007554 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007522:	605a      	str	r2, [r3, #4]
 8007524:	e016      	b.n	8007554 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f103 020c 	add.w	r2, r3, #12
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	7812      	ldrb	r2, [r2, #0]
 8007534:	b2d2      	uxtb	r2, r2
 8007536:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007554:	2301      	movs	r3, #1
 8007556:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007558:	f7fa f83e 	bl	80015d8 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007564:	429a      	cmp	r2, r3
 8007566:	d803      	bhi.n	8007570 <HAL_SPI_TransmitReceive+0x3c2>
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756e:	d102      	bne.n	8007576 <HAL_SPI_TransmitReceive+0x3c8>
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	2b00      	cmp	r3, #0
 8007574:	d103      	bne.n	800757e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800757c:	e01c      	b.n	80075b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007582:	b29b      	uxth	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	f47f af5b 	bne.w	8007440 <HAL_SPI_TransmitReceive+0x292>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007590:	b29b      	uxth	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	f47f af54 	bne.w	8007440 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007598:	69fa      	ldr	r2, [r7, #28]
 800759a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 f98f 	bl	80078c0 <SPI_EndRxTxTransaction>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d006      	beq.n	80075b6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2220      	movs	r2, #32
 80075b2:	661a      	str	r2, [r3, #96]	; 0x60
 80075b4:	e000      	b.n	80075b8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80075b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80075c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3728      	adds	r7, #40	; 0x28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	4613      	mov	r3, r2
 80075e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075e4:	f7f9 fff8 	bl	80015d8 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	1a9b      	subs	r3, r3, r2
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	4413      	add	r3, r2
 80075f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80075f4:	f7f9 fff0 	bl	80015d8 <HAL_GetTick>
 80075f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80075fa:	4b39      	ldr	r3, [pc, #228]	; (80076e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	015b      	lsls	r3, r3, #5
 8007600:	0d1b      	lsrs	r3, r3, #20
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	fb02 f303 	mul.w	r3, r2, r3
 8007608:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800760a:	e054      	b.n	80076b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007612:	d050      	beq.n	80076b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007614:	f7f9 ffe0 	bl	80015d8 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	69fa      	ldr	r2, [r7, #28]
 8007620:	429a      	cmp	r2, r3
 8007622:	d902      	bls.n	800762a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d13d      	bne.n	80076a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007638:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007642:	d111      	bne.n	8007668 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800764c:	d004      	beq.n	8007658 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007656:	d107      	bne.n	8007668 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007666:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007670:	d10f      	bne.n	8007692 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007690:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e017      	b.n	80076d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	4013      	ands	r3, r2
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	bf0c      	ite	eq
 80076c6:	2301      	moveq	r3, #1
 80076c8:	2300      	movne	r3, #0
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	79fb      	ldrb	r3, [r7, #7]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d19b      	bne.n	800760c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3720      	adds	r7, #32
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	20000000 	.word	0x20000000

080076e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08a      	sub	sp, #40	; 0x28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80076f2:	2300      	movs	r3, #0
 80076f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80076f6:	f7f9 ff6f 	bl	80015d8 <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fe:	1a9b      	subs	r3, r3, r2
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	4413      	add	r3, r2
 8007704:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007706:	f7f9 ff67 	bl	80015d8 <HAL_GetTick>
 800770a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	330c      	adds	r3, #12
 8007712:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007714:	4b3d      	ldr	r3, [pc, #244]	; (800780c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	00da      	lsls	r2, r3, #3
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	0d1b      	lsrs	r3, r3, #20
 8007724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007726:	fb02 f303 	mul.w	r3, r2, r3
 800772a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800772c:	e060      	b.n	80077f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007734:	d107      	bne.n	8007746 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d104      	bne.n	8007746 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007744:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774c:	d050      	beq.n	80077f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800774e:	f7f9 ff43 	bl	80015d8 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800775a:	429a      	cmp	r2, r3
 800775c:	d902      	bls.n	8007764 <SPI_WaitFifoStateUntilTimeout+0x80>
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	2b00      	cmp	r3, #0
 8007762:	d13d      	bne.n	80077e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007772:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800777c:	d111      	bne.n	80077a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007786:	d004      	beq.n	8007792 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007790:	d107      	bne.n	80077a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077aa:	d10f      	bne.n	80077cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077ba:	601a      	str	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e010      	b.n	8007802 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689a      	ldr	r2, [r3, #8]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	4013      	ands	r3, r2
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d196      	bne.n	800772e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3728      	adds	r7, #40	; 0x28
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20000000 	.word	0x20000000

08007810 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af02      	add	r7, sp, #8
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007824:	d111      	bne.n	800784a <SPI_EndRxTransaction+0x3a>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800782e:	d004      	beq.n	800783a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007838:	d107      	bne.n	800784a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007848:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2200      	movs	r2, #0
 8007852:	2180      	movs	r1, #128	; 0x80
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f7ff febd 	bl	80075d4 <SPI_WaitFlagStateUntilTimeout>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007864:	f043 0220 	orr.w	r2, r3, #32
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e023      	b.n	80078b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007878:	d11d      	bne.n	80078b6 <SPI_EndRxTransaction+0xa6>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007882:	d004      	beq.n	800788e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800788c:	d113      	bne.n	80078b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2200      	movs	r2, #0
 8007896:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f7ff ff22 	bl	80076e4 <SPI_WaitFifoStateUntilTimeout>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d007      	beq.n	80078b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078aa:	f043 0220 	orr.w	r2, r3, #32
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e000      	b.n	80078b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af02      	add	r7, sp, #8
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f7ff ff03 	bl	80076e4 <SPI_WaitFifoStateUntilTimeout>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d007      	beq.n	80078f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e8:	f043 0220 	orr.w	r2, r3, #32
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e027      	b.n	8007944 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2200      	movs	r2, #0
 80078fc:	2180      	movs	r1, #128	; 0x80
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f7ff fe68 	bl	80075d4 <SPI_WaitFlagStateUntilTimeout>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d007      	beq.n	800791a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800790e:	f043 0220 	orr.w	r2, r3, #32
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e014      	b.n	8007944 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2200      	movs	r2, #0
 8007922:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f7ff fedc 	bl	80076e4 <SPI_WaitFifoStateUntilTimeout>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d007      	beq.n	8007942 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007936:	f043 0220 	orr.w	r2, r3, #32
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e000      	b.n	8007944 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e049      	b.n	80079f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d106      	bne.n	8007978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7f9 fd52 	bl	800141c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3304      	adds	r3, #4
 8007988:	4619      	mov	r1, r3
 800798a:	4610      	mov	r0, r2
 800798c:	f000 fa50 	bl	8007e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b082      	sub	sp, #8
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d122      	bne.n	8007a56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d11b      	bne.n	8007a56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f06f 0202 	mvn.w	r2, #2
 8007a26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f9d8 	bl	8007df2 <HAL_TIM_IC_CaptureCallback>
 8007a42:	e005      	b.n	8007a50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f9ca 	bl	8007dde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f9db 	bl	8007e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	f003 0304 	and.w	r3, r3, #4
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d122      	bne.n	8007aaa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d11b      	bne.n	8007aaa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f06f 0204 	mvn.w	r2, #4
 8007a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f9ae 	bl	8007df2 <HAL_TIM_IC_CaptureCallback>
 8007a96:	e005      	b.n	8007aa4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f9a0 	bl	8007dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f9b1 	bl	8007e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	f003 0308 	and.w	r3, r3, #8
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	d122      	bne.n	8007afe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	f003 0308 	and.w	r3, r3, #8
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	d11b      	bne.n	8007afe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f06f 0208 	mvn.w	r2, #8
 8007ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	f003 0303 	and.w	r3, r3, #3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d003      	beq.n	8007aec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f984 	bl	8007df2 <HAL_TIM_IC_CaptureCallback>
 8007aea:	e005      	b.n	8007af8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f976 	bl	8007dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f987 	bl	8007e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	f003 0310 	and.w	r3, r3, #16
 8007b08:	2b10      	cmp	r3, #16
 8007b0a:	d122      	bne.n	8007b52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f003 0310 	and.w	r3, r3, #16
 8007b16:	2b10      	cmp	r3, #16
 8007b18:	d11b      	bne.n	8007b52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f06f 0210 	mvn.w	r2, #16
 8007b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2208      	movs	r2, #8
 8007b28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d003      	beq.n	8007b40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f95a 	bl	8007df2 <HAL_TIM_IC_CaptureCallback>
 8007b3e:	e005      	b.n	8007b4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f94c 	bl	8007dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f95d 	bl	8007e06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d10e      	bne.n	8007b7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d107      	bne.n	8007b7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f06f 0201 	mvn.w	r2, #1
 8007b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f926 	bl	8007dca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b88:	2b80      	cmp	r3, #128	; 0x80
 8007b8a:	d10e      	bne.n	8007baa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b96:	2b80      	cmp	r3, #128	; 0x80
 8007b98:	d107      	bne.n	8007baa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fb09 	bl	80081bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bb8:	d10e      	bne.n	8007bd8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc4:	2b80      	cmp	r3, #128	; 0x80
 8007bc6:	d107      	bne.n	8007bd8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fafc 	bl	80081d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be2:	2b40      	cmp	r3, #64	; 0x40
 8007be4:	d10e      	bne.n	8007c04 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf0:	2b40      	cmp	r3, #64	; 0x40
 8007bf2:	d107      	bne.n	8007c04 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f90b 	bl	8007e1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 0320 	and.w	r3, r3, #32
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d10e      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b20      	cmp	r3, #32
 8007c1e:	d107      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f06f 0220 	mvn.w	r2, #32
 8007c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fabc 	bl	80081a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c30:	bf00      	nop
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d101      	bne.n	8007c54 <HAL_TIM_ConfigClockSource+0x1c>
 8007c50:	2302      	movs	r3, #2
 8007c52:	e0b6      	b.n	8007dc2 <HAL_TIM_ConfigClockSource+0x18a>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c90:	d03e      	beq.n	8007d10 <HAL_TIM_ConfigClockSource+0xd8>
 8007c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c96:	f200 8087 	bhi.w	8007da8 <HAL_TIM_ConfigClockSource+0x170>
 8007c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c9e:	f000 8086 	beq.w	8007dae <HAL_TIM_ConfigClockSource+0x176>
 8007ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca6:	d87f      	bhi.n	8007da8 <HAL_TIM_ConfigClockSource+0x170>
 8007ca8:	2b70      	cmp	r3, #112	; 0x70
 8007caa:	d01a      	beq.n	8007ce2 <HAL_TIM_ConfigClockSource+0xaa>
 8007cac:	2b70      	cmp	r3, #112	; 0x70
 8007cae:	d87b      	bhi.n	8007da8 <HAL_TIM_ConfigClockSource+0x170>
 8007cb0:	2b60      	cmp	r3, #96	; 0x60
 8007cb2:	d050      	beq.n	8007d56 <HAL_TIM_ConfigClockSource+0x11e>
 8007cb4:	2b60      	cmp	r3, #96	; 0x60
 8007cb6:	d877      	bhi.n	8007da8 <HAL_TIM_ConfigClockSource+0x170>
 8007cb8:	2b50      	cmp	r3, #80	; 0x50
 8007cba:	d03c      	beq.n	8007d36 <HAL_TIM_ConfigClockSource+0xfe>
 8007cbc:	2b50      	cmp	r3, #80	; 0x50
 8007cbe:	d873      	bhi.n	8007da8 <HAL_TIM_ConfigClockSource+0x170>
 8007cc0:	2b40      	cmp	r3, #64	; 0x40
 8007cc2:	d058      	beq.n	8007d76 <HAL_TIM_ConfigClockSource+0x13e>
 8007cc4:	2b40      	cmp	r3, #64	; 0x40
 8007cc6:	d86f      	bhi.n	8007da8 <HAL_TIM_ConfigClockSource+0x170>
 8007cc8:	2b30      	cmp	r3, #48	; 0x30
 8007cca:	d064      	beq.n	8007d96 <HAL_TIM_ConfigClockSource+0x15e>
 8007ccc:	2b30      	cmp	r3, #48	; 0x30
 8007cce:	d86b      	bhi.n	8007da8 <HAL_TIM_ConfigClockSource+0x170>
 8007cd0:	2b20      	cmp	r3, #32
 8007cd2:	d060      	beq.n	8007d96 <HAL_TIM_ConfigClockSource+0x15e>
 8007cd4:	2b20      	cmp	r3, #32
 8007cd6:	d867      	bhi.n	8007da8 <HAL_TIM_ConfigClockSource+0x170>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d05c      	beq.n	8007d96 <HAL_TIM_ConfigClockSource+0x15e>
 8007cdc:	2b10      	cmp	r3, #16
 8007cde:	d05a      	beq.n	8007d96 <HAL_TIM_ConfigClockSource+0x15e>
 8007ce0:	e062      	b.n	8007da8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6818      	ldr	r0, [r3, #0]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	6899      	ldr	r1, [r3, #8]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	f000 f9b1 	bl	8008058 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	609a      	str	r2, [r3, #8]
      break;
 8007d0e:	e04f      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6818      	ldr	r0, [r3, #0]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	6899      	ldr	r1, [r3, #8]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	f000 f99a 	bl	8008058 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689a      	ldr	r2, [r3, #8]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d32:	609a      	str	r2, [r3, #8]
      break;
 8007d34:	e03c      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6818      	ldr	r0, [r3, #0]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	6859      	ldr	r1, [r3, #4]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	461a      	mov	r2, r3
 8007d44:	f000 f90e 	bl	8007f64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2150      	movs	r1, #80	; 0x50
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 f967 	bl	8008022 <TIM_ITRx_SetConfig>
      break;
 8007d54:	e02c      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6818      	ldr	r0, [r3, #0]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	6859      	ldr	r1, [r3, #4]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	461a      	mov	r2, r3
 8007d64:	f000 f92d 	bl	8007fc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2160      	movs	r1, #96	; 0x60
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 f957 	bl	8008022 <TIM_ITRx_SetConfig>
      break;
 8007d74:	e01c      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6818      	ldr	r0, [r3, #0]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	6859      	ldr	r1, [r3, #4]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	461a      	mov	r2, r3
 8007d84:	f000 f8ee 	bl	8007f64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2140      	movs	r1, #64	; 0x40
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 f947 	bl	8008022 <TIM_ITRx_SetConfig>
      break;
 8007d94:	e00c      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4610      	mov	r0, r2
 8007da2:	f000 f93e 	bl	8008022 <TIM_ITRx_SetConfig>
      break;
 8007da6:	e003      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	73fb      	strb	r3, [r7, #15]
      break;
 8007dac:	e000      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b083      	sub	sp, #12
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dfa:	bf00      	nop
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e0e:	bf00      	nop
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e22:	bf00      	nop
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
	...

08007e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a40      	ldr	r2, [pc, #256]	; (8007f44 <TIM_Base_SetConfig+0x114>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d013      	beq.n	8007e70 <TIM_Base_SetConfig+0x40>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e4e:	d00f      	beq.n	8007e70 <TIM_Base_SetConfig+0x40>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a3d      	ldr	r2, [pc, #244]	; (8007f48 <TIM_Base_SetConfig+0x118>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00b      	beq.n	8007e70 <TIM_Base_SetConfig+0x40>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a3c      	ldr	r2, [pc, #240]	; (8007f4c <TIM_Base_SetConfig+0x11c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d007      	beq.n	8007e70 <TIM_Base_SetConfig+0x40>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a3b      	ldr	r2, [pc, #236]	; (8007f50 <TIM_Base_SetConfig+0x120>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d003      	beq.n	8007e70 <TIM_Base_SetConfig+0x40>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a3a      	ldr	r2, [pc, #232]	; (8007f54 <TIM_Base_SetConfig+0x124>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d108      	bne.n	8007e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a2f      	ldr	r2, [pc, #188]	; (8007f44 <TIM_Base_SetConfig+0x114>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d01f      	beq.n	8007eca <TIM_Base_SetConfig+0x9a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e90:	d01b      	beq.n	8007eca <TIM_Base_SetConfig+0x9a>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a2c      	ldr	r2, [pc, #176]	; (8007f48 <TIM_Base_SetConfig+0x118>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d017      	beq.n	8007eca <TIM_Base_SetConfig+0x9a>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a2b      	ldr	r2, [pc, #172]	; (8007f4c <TIM_Base_SetConfig+0x11c>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d013      	beq.n	8007eca <TIM_Base_SetConfig+0x9a>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a2a      	ldr	r2, [pc, #168]	; (8007f50 <TIM_Base_SetConfig+0x120>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d00f      	beq.n	8007eca <TIM_Base_SetConfig+0x9a>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a29      	ldr	r2, [pc, #164]	; (8007f54 <TIM_Base_SetConfig+0x124>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d00b      	beq.n	8007eca <TIM_Base_SetConfig+0x9a>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a28      	ldr	r2, [pc, #160]	; (8007f58 <TIM_Base_SetConfig+0x128>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d007      	beq.n	8007eca <TIM_Base_SetConfig+0x9a>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a27      	ldr	r2, [pc, #156]	; (8007f5c <TIM_Base_SetConfig+0x12c>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d003      	beq.n	8007eca <TIM_Base_SetConfig+0x9a>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a26      	ldr	r2, [pc, #152]	; (8007f60 <TIM_Base_SetConfig+0x130>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d108      	bne.n	8007edc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	689a      	ldr	r2, [r3, #8]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a10      	ldr	r2, [pc, #64]	; (8007f44 <TIM_Base_SetConfig+0x114>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00f      	beq.n	8007f28 <TIM_Base_SetConfig+0xf8>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a12      	ldr	r2, [pc, #72]	; (8007f54 <TIM_Base_SetConfig+0x124>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d00b      	beq.n	8007f28 <TIM_Base_SetConfig+0xf8>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a11      	ldr	r2, [pc, #68]	; (8007f58 <TIM_Base_SetConfig+0x128>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d007      	beq.n	8007f28 <TIM_Base_SetConfig+0xf8>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a10      	ldr	r2, [pc, #64]	; (8007f5c <TIM_Base_SetConfig+0x12c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d003      	beq.n	8007f28 <TIM_Base_SetConfig+0xf8>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a0f      	ldr	r2, [pc, #60]	; (8007f60 <TIM_Base_SetConfig+0x130>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d103      	bne.n	8007f30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	615a      	str	r2, [r3, #20]
}
 8007f36:	bf00      	nop
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	40012c00 	.word	0x40012c00
 8007f48:	40000400 	.word	0x40000400
 8007f4c:	40000800 	.word	0x40000800
 8007f50:	40000c00 	.word	0x40000c00
 8007f54:	40013400 	.word	0x40013400
 8007f58:	40014000 	.word	0x40014000
 8007f5c:	40014400 	.word	0x40014400
 8007f60:	40014800 	.word	0x40014800

08007f64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b087      	sub	sp, #28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6a1b      	ldr	r3, [r3, #32]
 8007f74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	f023 0201 	bic.w	r2, r3, #1
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	011b      	lsls	r3, r3, #4
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f023 030a 	bic.w	r3, r3, #10
 8007fa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	621a      	str	r2, [r3, #32]
}
 8007fb6:	bf00      	nop
 8007fb8:	371c      	adds	r7, #28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b087      	sub	sp, #28
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	f023 0210 	bic.w	r2, r3, #16
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6a1b      	ldr	r3, [r3, #32]
 8007fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	031b      	lsls	r3, r3, #12
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ffe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	011b      	lsls	r3, r3, #4
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	4313      	orrs	r3, r2
 8008008:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	621a      	str	r2, [r3, #32]
}
 8008016:	bf00      	nop
 8008018:	371c      	adds	r7, #28
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008022:	b480      	push	{r7}
 8008024:	b085      	sub	sp, #20
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4313      	orrs	r3, r2
 8008040:	f043 0307 	orr.w	r3, r3, #7
 8008044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	609a      	str	r2, [r3, #8]
}
 800804c:	bf00      	nop
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
 8008064:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008072:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	021a      	lsls	r2, r3, #8
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	431a      	orrs	r2, r3
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	4313      	orrs	r3, r2
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	4313      	orrs	r3, r2
 8008084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	609a      	str	r2, [r3, #8]
}
 800808c:	bf00      	nop
 800808e:	371c      	adds	r7, #28
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e068      	b.n	8008182 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2202      	movs	r2, #2
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a2e      	ldr	r2, [pc, #184]	; (8008190 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d004      	beq.n	80080e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a2d      	ldr	r2, [pc, #180]	; (8008194 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d108      	bne.n	80080f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80080ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	4313      	orrs	r3, r2
 8008106:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a1e      	ldr	r2, [pc, #120]	; (8008190 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d01d      	beq.n	8008156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008122:	d018      	beq.n	8008156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a1b      	ldr	r2, [pc, #108]	; (8008198 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d013      	beq.n	8008156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a1a      	ldr	r2, [pc, #104]	; (800819c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d00e      	beq.n	8008156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a18      	ldr	r2, [pc, #96]	; (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d009      	beq.n	8008156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a13      	ldr	r2, [pc, #76]	; (8008194 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d004      	beq.n	8008156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a14      	ldr	r2, [pc, #80]	; (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d10c      	bne.n	8008170 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800815c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	4313      	orrs	r3, r2
 8008166:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	40012c00 	.word	0x40012c00
 8008194:	40013400 	.word	0x40013400
 8008198:	40000400 	.word	0x40000400
 800819c:	40000800 	.word	0x40000800
 80081a0:	40000c00 	.word	0x40000c00
 80081a4:	40014000 	.word	0x40014000

080081a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800823e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008244:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800824a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	4313      	orrs	r3, r2
 8008250:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	68da      	ldr	r2, [r3, #12]
 8008256:	4b06      	ldr	r3, [pc, #24]	; (8008270 <SDMMC_SendCommand+0x50>)
 8008258:	4013      	ands	r3, r2
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	431a      	orrs	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	fffee0c0 	.word	0xfffee0c0

08008274 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	b2db      	uxtb	r3, r3
}
 8008282:	4618      	mov	r0, r3
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800828e:	b480      	push	{r7}
 8008290:	b085      	sub	sp, #20
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3314      	adds	r3, #20
 800829c:	461a      	mov	r2, r3
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	4413      	add	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b088      	sub	sp, #32
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80082c0:	230c      	movs	r3, #12
 80082c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082ca:	2300      	movs	r3, #0
 80082cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082d2:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082ec:	f107 0308 	add.w	r3, r7, #8
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff ff94 	bl	8008220 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80082f8:	4a08      	ldr	r2, [pc, #32]	; (800831c <SDMMC_CmdStopTransfer+0x68>)
 80082fa:	210c      	movs	r1, #12
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f80f 	bl	8008320 <SDMMC_GetCmdResp1>
 8008302:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008310:	69fb      	ldr	r3, [r7, #28]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3720      	adds	r7, #32
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	05f5e100 	.word	0x05f5e100

08008320 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	460b      	mov	r3, r1
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800832e:	4b70      	ldr	r3, [pc, #448]	; (80084f0 <SDMMC_GetCmdResp1+0x1d0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a70      	ldr	r2, [pc, #448]	; (80084f4 <SDMMC_GetCmdResp1+0x1d4>)
 8008334:	fba2 2303 	umull	r2, r3, r2, r3
 8008338:	0a5a      	lsrs	r2, r3, #9
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	fb02 f303 	mul.w	r3, r2, r3
 8008340:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	1e5a      	subs	r2, r3, #1
 8008346:	61fa      	str	r2, [r7, #28]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d102      	bne.n	8008352 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800834c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008350:	e0c9      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008356:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	4b67      	ldr	r3, [pc, #412]	; (80084f8 <SDMMC_GetCmdResp1+0x1d8>)
 800835c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0ef      	beq.n	8008342 <SDMMC_GetCmdResp1+0x22>
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1ea      	bne.n	8008342 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008370:	f003 0304 	and.w	r3, r3, #4
 8008374:	2b00      	cmp	r3, #0
 8008376:	d004      	beq.n	8008382 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2204      	movs	r2, #4
 800837c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800837e:	2304      	movs	r3, #4
 8008380:	e0b1      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	d004      	beq.n	8008398 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008394:	2301      	movs	r3, #1
 8008396:	e0a6      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	4a58      	ldr	r2, [pc, #352]	; (80084fc <SDMMC_GetCmdResp1+0x1dc>)
 800839c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f7ff ff68 	bl	8008274 <SDMMC_GetCommandResponse>
 80083a4:	4603      	mov	r3, r0
 80083a6:	461a      	mov	r2, r3
 80083a8:	7afb      	ldrb	r3, [r7, #11]
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d001      	beq.n	80083b2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e099      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80083b2:	2100      	movs	r1, #0
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7ff ff6a 	bl	800828e <SDMMC_GetResponse>
 80083ba:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	4b50      	ldr	r3, [pc, #320]	; (8008500 <SDMMC_GetCmdResp1+0x1e0>)
 80083c0:	4013      	ands	r3, r2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80083c6:	2300      	movs	r3, #0
 80083c8:	e08d      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	da02      	bge.n	80083d6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80083d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083d4:	e087      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80083e0:	2340      	movs	r3, #64	; 0x40
 80083e2:	e080      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80083ee:	2380      	movs	r3, #128	; 0x80
 80083f0:	e079      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d002      	beq.n	8008402 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80083fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008400:	e071      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d002      	beq.n	8008412 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800840c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008410:	e069      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800841c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008420:	e061      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800842c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008430:	e059      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800843c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008440:	e051      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800844c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008450:	e049      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800845c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008460:	e041      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800846c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008470:	e039      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800847c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008480:	e031      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800848c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008490:	e029      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800849c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80084a0:	e021      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80084ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80084b0:	e019      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80084bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80084c0:	e011      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80084cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80084d0:	e009      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f003 0308 	and.w	r3, r3, #8
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d002      	beq.n	80084e2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80084dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80084e0:	e001      	b.n	80084e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80084e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3720      	adds	r7, #32
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20000000 	.word	0x20000000
 80084f4:	10624dd3 	.word	0x10624dd3
 80084f8:	00200045 	.word	0x00200045
 80084fc:	002000c5 	.word	0x002000c5
 8008500:	fdffe008 	.word	0xfdffe008

08008504 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008504:	b084      	sub	sp, #16
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	f107 001c 	add.w	r0, r7, #28
 8008512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f001 faf6 	bl	8009b14 <USB_CoreReset>
 8008528:	4603      	mov	r3, r0
 800852a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800852c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800852e:	2b00      	cmp	r3, #0
 8008530:	d106      	bne.n	8008540 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008536:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	639a      	str	r2, [r3, #56]	; 0x38
 800853e:	e005      	b.n	800854c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008544:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800854c:	7bfb      	ldrb	r3, [r7, #15]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008558:	b004      	add	sp, #16
 800855a:	4770      	bx	lr

0800855c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	4613      	mov	r3, r2
 8008568:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800856a:	79fb      	ldrb	r3, [r7, #7]
 800856c:	2b02      	cmp	r3, #2
 800856e:	d165      	bne.n	800863c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	4a3e      	ldr	r2, [pc, #248]	; (800866c <USB_SetTurnaroundTime+0x110>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d906      	bls.n	8008586 <USB_SetTurnaroundTime+0x2a>
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	4a3d      	ldr	r2, [pc, #244]	; (8008670 <USB_SetTurnaroundTime+0x114>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d202      	bcs.n	8008586 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008580:	230f      	movs	r3, #15
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	e05c      	b.n	8008640 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	4a39      	ldr	r2, [pc, #228]	; (8008670 <USB_SetTurnaroundTime+0x114>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d306      	bcc.n	800859c <USB_SetTurnaroundTime+0x40>
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	4a38      	ldr	r2, [pc, #224]	; (8008674 <USB_SetTurnaroundTime+0x118>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d202      	bcs.n	800859c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008596:	230e      	movs	r3, #14
 8008598:	617b      	str	r3, [r7, #20]
 800859a:	e051      	b.n	8008640 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	4a35      	ldr	r2, [pc, #212]	; (8008674 <USB_SetTurnaroundTime+0x118>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d306      	bcc.n	80085b2 <USB_SetTurnaroundTime+0x56>
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	4a34      	ldr	r2, [pc, #208]	; (8008678 <USB_SetTurnaroundTime+0x11c>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d202      	bcs.n	80085b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80085ac:	230d      	movs	r3, #13
 80085ae:	617b      	str	r3, [r7, #20]
 80085b0:	e046      	b.n	8008640 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	4a30      	ldr	r2, [pc, #192]	; (8008678 <USB_SetTurnaroundTime+0x11c>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d306      	bcc.n	80085c8 <USB_SetTurnaroundTime+0x6c>
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	4a2f      	ldr	r2, [pc, #188]	; (800867c <USB_SetTurnaroundTime+0x120>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d802      	bhi.n	80085c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80085c2:	230c      	movs	r3, #12
 80085c4:	617b      	str	r3, [r7, #20]
 80085c6:	e03b      	b.n	8008640 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	4a2c      	ldr	r2, [pc, #176]	; (800867c <USB_SetTurnaroundTime+0x120>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d906      	bls.n	80085de <USB_SetTurnaroundTime+0x82>
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4a2b      	ldr	r2, [pc, #172]	; (8008680 <USB_SetTurnaroundTime+0x124>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d802      	bhi.n	80085de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80085d8:	230b      	movs	r3, #11
 80085da:	617b      	str	r3, [r7, #20]
 80085dc:	e030      	b.n	8008640 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	4a27      	ldr	r2, [pc, #156]	; (8008680 <USB_SetTurnaroundTime+0x124>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d906      	bls.n	80085f4 <USB_SetTurnaroundTime+0x98>
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	4a26      	ldr	r2, [pc, #152]	; (8008684 <USB_SetTurnaroundTime+0x128>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d802      	bhi.n	80085f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80085ee:	230a      	movs	r3, #10
 80085f0:	617b      	str	r3, [r7, #20]
 80085f2:	e025      	b.n	8008640 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	4a23      	ldr	r2, [pc, #140]	; (8008684 <USB_SetTurnaroundTime+0x128>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d906      	bls.n	800860a <USB_SetTurnaroundTime+0xae>
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4a22      	ldr	r2, [pc, #136]	; (8008688 <USB_SetTurnaroundTime+0x12c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d202      	bcs.n	800860a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008604:	2309      	movs	r3, #9
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	e01a      	b.n	8008640 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	4a1e      	ldr	r2, [pc, #120]	; (8008688 <USB_SetTurnaroundTime+0x12c>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d306      	bcc.n	8008620 <USB_SetTurnaroundTime+0xc4>
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	4a1d      	ldr	r2, [pc, #116]	; (800868c <USB_SetTurnaroundTime+0x130>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d802      	bhi.n	8008620 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800861a:	2308      	movs	r3, #8
 800861c:	617b      	str	r3, [r7, #20]
 800861e:	e00f      	b.n	8008640 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	4a1a      	ldr	r2, [pc, #104]	; (800868c <USB_SetTurnaroundTime+0x130>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d906      	bls.n	8008636 <USB_SetTurnaroundTime+0xda>
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	4a19      	ldr	r2, [pc, #100]	; (8008690 <USB_SetTurnaroundTime+0x134>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d202      	bcs.n	8008636 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008630:	2307      	movs	r3, #7
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	e004      	b.n	8008640 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008636:	2306      	movs	r3, #6
 8008638:	617b      	str	r3, [r7, #20]
 800863a:	e001      	b.n	8008640 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800863c:	2309      	movs	r3, #9
 800863e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	68da      	ldr	r2, [r3, #12]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	029b      	lsls	r3, r3, #10
 8008654:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008658:	431a      	orrs	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	371c      	adds	r7, #28
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	00d8acbf 	.word	0x00d8acbf
 8008670:	00e4e1c0 	.word	0x00e4e1c0
 8008674:	00f42400 	.word	0x00f42400
 8008678:	01067380 	.word	0x01067380
 800867c:	011a499f 	.word	0x011a499f
 8008680:	01312cff 	.word	0x01312cff
 8008684:	014ca43f 	.word	0x014ca43f
 8008688:	016e3600 	.word	0x016e3600
 800868c:	01a6ab1f 	.word	0x01a6ab1f
 8008690:	01e84800 	.word	0x01e84800

08008694 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f043 0201 	orr.w	r2, r3, #1
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b083      	sub	sp, #12
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f023 0201 	bic.w	r2, r3, #1
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80086e4:	2300      	movs	r3, #0
 80086e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086f4:	78fb      	ldrb	r3, [r7, #3]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d115      	bne.n	8008726 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008706:	2001      	movs	r0, #1
 8008708:	f7f8 ff72 	bl	80015f0 <HAL_Delay>
      ms++;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	3301      	adds	r3, #1
 8008710:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f001 f985 	bl	8009a22 <USB_GetMode>
 8008718:	4603      	mov	r3, r0
 800871a:	2b01      	cmp	r3, #1
 800871c:	d01e      	beq.n	800875c <USB_SetCurrentMode+0x84>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b31      	cmp	r3, #49	; 0x31
 8008722:	d9f0      	bls.n	8008706 <USB_SetCurrentMode+0x2e>
 8008724:	e01a      	b.n	800875c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008726:	78fb      	ldrb	r3, [r7, #3]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d115      	bne.n	8008758 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008738:	2001      	movs	r0, #1
 800873a:	f7f8 ff59 	bl	80015f0 <HAL_Delay>
      ms++;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3301      	adds	r3, #1
 8008742:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f001 f96c 	bl	8009a22 <USB_GetMode>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d005      	beq.n	800875c <USB_SetCurrentMode+0x84>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2b31      	cmp	r3, #49	; 0x31
 8008754:	d9f0      	bls.n	8008738 <USB_SetCurrentMode+0x60>
 8008756:	e001      	b.n	800875c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e005      	b.n	8008768 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b32      	cmp	r3, #50	; 0x32
 8008760:	d101      	bne.n	8008766 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e000      	b.n	8008768 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008770:	b084      	sub	sp, #16
 8008772:	b580      	push	{r7, lr}
 8008774:	b086      	sub	sp, #24
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800877e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800878a:	2300      	movs	r3, #0
 800878c:	613b      	str	r3, [r7, #16]
 800878e:	e009      	b.n	80087a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	3340      	adds	r3, #64	; 0x40
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	2200      	movs	r2, #0
 800879c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	3301      	adds	r3, #1
 80087a2:	613b      	str	r3, [r7, #16]
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	2b0e      	cmp	r3, #14
 80087a8:	d9f2      	bls.n	8008790 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80087aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d11c      	bne.n	80087ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087be:	f043 0302 	orr.w	r3, r3, #2
 80087c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	601a      	str	r2, [r3, #0]
 80087e8:	e005      	b.n	80087f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087fc:	461a      	mov	r2, r3
 80087fe:	2300      	movs	r3, #0
 8008800:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008808:	4619      	mov	r1, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008810:	461a      	mov	r2, r3
 8008812:	680b      	ldr	r3, [r1, #0]
 8008814:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008816:	2103      	movs	r1, #3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f959 	bl	8008ad0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800881e:	2110      	movs	r1, #16
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 f8f1 	bl	8008a08 <USB_FlushTxFifo>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f91d 	bl	8008a70 <USB_FlushRxFifo>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008846:	461a      	mov	r2, r3
 8008848:	2300      	movs	r3, #0
 800884a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008852:	461a      	mov	r2, r3
 8008854:	2300      	movs	r3, #0
 8008856:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800885e:	461a      	mov	r2, r3
 8008860:	2300      	movs	r3, #0
 8008862:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008864:	2300      	movs	r3, #0
 8008866:	613b      	str	r3, [r7, #16]
 8008868:	e043      	b.n	80088f2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4413      	add	r3, r2
 8008872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800887c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008880:	d118      	bne.n	80088b4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10a      	bne.n	800889e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008894:	461a      	mov	r2, r3
 8008896:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800889a:	6013      	str	r3, [r2, #0]
 800889c:	e013      	b.n	80088c6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088aa:	461a      	mov	r2, r3
 80088ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	e008      	b.n	80088c6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c0:	461a      	mov	r2, r3
 80088c2:	2300      	movs	r3, #0
 80088c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d2:	461a      	mov	r2, r3
 80088d4:	2300      	movs	r3, #0
 80088d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e4:	461a      	mov	r2, r3
 80088e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	3301      	adds	r3, #1
 80088f0:	613b      	str	r3, [r7, #16]
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d3b7      	bcc.n	800886a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088fa:	2300      	movs	r3, #0
 80088fc:	613b      	str	r3, [r7, #16]
 80088fe:	e043      	b.n	8008988 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	015a      	lsls	r2, r3, #5
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4413      	add	r3, r2
 8008908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008916:	d118      	bne.n	800894a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10a      	bne.n	8008934 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	4413      	add	r3, r2
 8008926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892a:	461a      	mov	r2, r3
 800892c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008930:	6013      	str	r3, [r2, #0]
 8008932:	e013      	b.n	800895c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008940:	461a      	mov	r2, r3
 8008942:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008946:	6013      	str	r3, [r2, #0]
 8008948:	e008      	b.n	800895c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008956:	461a      	mov	r2, r3
 8008958:	2300      	movs	r3, #0
 800895a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008968:	461a      	mov	r2, r3
 800896a:	2300      	movs	r3, #0
 800896c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	015a      	lsls	r2, r3, #5
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	4413      	add	r3, r2
 8008976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800897a:	461a      	mov	r2, r3
 800897c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008980:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	3301      	adds	r3, #1
 8008986:	613b      	str	r3, [r7, #16]
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	429a      	cmp	r2, r3
 800898e:	d3b7      	bcc.n	8008900 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800899e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80089b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	f043 0210 	orr.w	r2, r3, #16
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699a      	ldr	r2, [r3, #24]
 80089c2:	4b10      	ldr	r3, [pc, #64]	; (8008a04 <USB_DevInit+0x294>)
 80089c4:	4313      	orrs	r3, r2
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80089ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d005      	beq.n	80089dc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	f043 0208 	orr.w	r2, r3, #8
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80089dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d107      	bne.n	80089f2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089ea:	f043 0304 	orr.w	r3, r3, #4
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089fe:	b004      	add	sp, #16
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	803c3800 	.word	0x803c3800

08008a08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4a13      	ldr	r2, [pc, #76]	; (8008a6c <USB_FlushTxFifo+0x64>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d901      	bls.n	8008a28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e01b      	b.n	8008a60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	daf2      	bge.n	8008a16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	019b      	lsls	r3, r3, #6
 8008a38:	f043 0220 	orr.w	r2, r3, #32
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	3301      	adds	r3, #1
 8008a44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4a08      	ldr	r2, [pc, #32]	; (8008a6c <USB_FlushTxFifo+0x64>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d901      	bls.n	8008a52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e006      	b.n	8008a60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	f003 0320 	and.w	r3, r3, #32
 8008a5a:	2b20      	cmp	r3, #32
 8008a5c:	d0f0      	beq.n	8008a40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	00030d40 	.word	0x00030d40

08008a70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	4a11      	ldr	r2, [pc, #68]	; (8008acc <USB_FlushRxFifo+0x5c>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d901      	bls.n	8008a8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e018      	b.n	8008ac0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	daf2      	bge.n	8008a7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2210      	movs	r2, #16
 8008a9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	4a08      	ldr	r2, [pc, #32]	; (8008acc <USB_FlushRxFifo+0x5c>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d901      	bls.n	8008ab2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e006      	b.n	8008ac0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	f003 0310 	and.w	r3, r3, #16
 8008aba:	2b10      	cmp	r3, #16
 8008abc:	d0f0      	beq.n	8008aa0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	00030d40 	.word	0x00030d40

08008ad0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	68f9      	ldr	r1, [r7, #12]
 8008aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008af0:	4313      	orrs	r3, r2
 8008af2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b087      	sub	sp, #28
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f003 0306 	and.w	r3, r3, #6
 8008b1a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d002      	beq.n	8008b28 <USB_GetDevSpeed+0x26>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2b06      	cmp	r3, #6
 8008b26:	d102      	bne.n	8008b2e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008b28:	2302      	movs	r3, #2
 8008b2a:	75fb      	strb	r3, [r7, #23]
 8008b2c:	e001      	b.n	8008b32 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008b2e:	230f      	movs	r3, #15
 8008b30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	371c      	adds	r7, #28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	785b      	ldrb	r3, [r3, #1]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d13a      	bne.n	8008bd2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b62:	69da      	ldr	r2, [r3, #28]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	f003 030f 	and.w	r3, r3, #15
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	68f9      	ldr	r1, [r7, #12]
 8008b76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d155      	bne.n	8008c40 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	791b      	ldrb	r3, [r3, #4]
 8008bae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bb0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	059b      	lsls	r3, r3, #22
 8008bb6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	0151      	lsls	r1, r2, #5
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	440a      	add	r2, r1
 8008bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	e036      	b.n	8008c40 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd8:	69da      	ldr	r2, [r3, #28]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	f003 030f 	and.w	r3, r3, #15
 8008be2:	2101      	movs	r1, #1
 8008be4:	fa01 f303 	lsl.w	r3, r1, r3
 8008be8:	041b      	lsls	r3, r3, #16
 8008bea:	68f9      	ldr	r1, [r7, #12]
 8008bec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d11a      	bne.n	8008c40 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	791b      	ldrb	r3, [r3, #4]
 8008c24:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c26:	430b      	orrs	r3, r1
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	0151      	lsls	r1, r2, #5
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	440a      	add	r2, r1
 8008c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c3e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
	...

08008c50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	785b      	ldrb	r3, [r3, #1]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d161      	bne.n	8008d30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c82:	d11f      	bne.n	8008cc4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	0151      	lsls	r1, r2, #5
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	440a      	add	r2, r1
 8008c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ca2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	0151      	lsls	r1, r2, #5
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	440a      	add	r2, r1
 8008cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cc2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	f003 030f 	and.w	r3, r3, #15
 8008cd4:	2101      	movs	r1, #1
 8008cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	43db      	mvns	r3, r3
 8008cde:	68f9      	ldr	r1, [r7, #12]
 8008ce0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cee:	69da      	ldr	r2, [r3, #28]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	f003 030f 	and.w	r3, r3, #15
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	43db      	mvns	r3, r3
 8008d02:	68f9      	ldr	r1, [r7, #12]
 8008d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d08:	4013      	ands	r3, r2
 8008d0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	0159      	lsls	r1, r3, #5
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	440b      	add	r3, r1
 8008d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d26:	4619      	mov	r1, r3
 8008d28:	4b35      	ldr	r3, [pc, #212]	; (8008e00 <USB_DeactivateEndpoint+0x1b0>)
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	600b      	str	r3, [r1, #0]
 8008d2e:	e060      	b.n	8008df2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d46:	d11f      	bne.n	8008d88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	0151      	lsls	r1, r2, #5
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	440a      	add	r2, r1
 8008d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	0151      	lsls	r1, r2, #5
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	440a      	add	r2, r1
 8008d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	f003 030f 	and.w	r3, r3, #15
 8008d98:	2101      	movs	r1, #1
 8008d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9e:	041b      	lsls	r3, r3, #16
 8008da0:	43db      	mvns	r3, r3
 8008da2:	68f9      	ldr	r1, [r7, #12]
 8008da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008da8:	4013      	ands	r3, r2
 8008daa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db2:	69da      	ldr	r2, [r3, #28]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	f003 030f 	and.w	r3, r3, #15
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc2:	041b      	lsls	r3, r3, #16
 8008dc4:	43db      	mvns	r3, r3
 8008dc6:	68f9      	ldr	r1, [r7, #12]
 8008dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dcc:	4013      	ands	r3, r2
 8008dce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	0159      	lsls	r1, r3, #5
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	440b      	add	r3, r1
 8008de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dea:	4619      	mov	r1, r3
 8008dec:	4b05      	ldr	r3, [pc, #20]	; (8008e04 <USB_DeactivateEndpoint+0x1b4>)
 8008dee:	4013      	ands	r3, r2
 8008df0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	ec337800 	.word	0xec337800
 8008e04:	eff37800 	.word	0xeff37800

08008e08 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	785b      	ldrb	r3, [r3, #1]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	f040 810a 	bne.w	800903a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d132      	bne.n	8008e94 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	0151      	lsls	r1, r2, #5
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	440a      	add	r2, r1
 8008e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	0151      	lsls	r1, r2, #5
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	440a      	add	r2, r1
 8008e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	0151      	lsls	r1, r2, #5
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	440a      	add	r2, r1
 8008e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e8c:	0cdb      	lsrs	r3, r3, #19
 8008e8e:	04db      	lsls	r3, r3, #19
 8008e90:	6113      	str	r3, [r2, #16]
 8008e92:	e074      	b.n	8008f7e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	0151      	lsls	r1, r2, #5
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	440a      	add	r2, r1
 8008eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eae:	0cdb      	lsrs	r3, r3, #19
 8008eb0:	04db      	lsls	r3, r3, #19
 8008eb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	0151      	lsls	r1, r2, #5
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	440a      	add	r2, r1
 8008eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ece:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ed2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ed6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	6999      	ldr	r1, [r3, #24]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	440b      	add	r3, r1
 8008ef0:	1e59      	subs	r1, r3, #1
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008efa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008efc:	4bb1      	ldr	r3, [pc, #708]	; (80091c4 <USB_EPStartXfer+0x3bc>)
 8008efe:	400b      	ands	r3, r1
 8008f00:	6939      	ldr	r1, [r7, #16]
 8008f02:	0148      	lsls	r0, r1, #5
 8008f04:	6979      	ldr	r1, [r7, #20]
 8008f06:	4401      	add	r1, r0
 8008f08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f1c:	691a      	ldr	r2, [r3, #16]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f26:	6939      	ldr	r1, [r7, #16]
 8008f28:	0148      	lsls	r0, r1, #5
 8008f2a:	6979      	ldr	r1, [r7, #20]
 8008f2c:	4401      	add	r1, r0
 8008f2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f32:	4313      	orrs	r3, r2
 8008f34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	791b      	ldrb	r3, [r3, #4]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d11f      	bne.n	8008f7e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	0151      	lsls	r1, r2, #5
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	440a      	add	r2, r1
 8008f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008f5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	015a      	lsls	r2, r3, #5
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	4413      	add	r3, r2
 8008f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	0151      	lsls	r1, r2, #5
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	440a      	add	r2, r1
 8008f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f7c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	0151      	lsls	r1, r2, #5
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	440a      	add	r2, r1
 8008f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f9c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	791b      	ldrb	r3, [r3, #4]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d015      	beq.n	8008fd2 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f000 8104 	beq.w	80091b8 <USB_EPStartXfer+0x3b0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	f003 030f 	and.w	r3, r3, #15
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc6:	6979      	ldr	r1, [r7, #20]
 8008fc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	634b      	str	r3, [r1, #52]	; 0x34
 8008fd0:	e0f2      	b.n	80091b8 <USB_EPStartXfer+0x3b0>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d110      	bne.n	8009004 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	0151      	lsls	r1, r2, #5
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	440a      	add	r2, r1
 8008ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ffc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009000:	6013      	str	r3, [r2, #0]
 8009002:	e00f      	b.n	8009024 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	0151      	lsls	r1, r2, #5
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	440a      	add	r2, r1
 800901a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800901e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009022:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	6919      	ldr	r1, [r3, #16]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	781a      	ldrb	r2, [r3, #0]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	b29b      	uxth	r3, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fa94 	bl	8009560 <USB_WritePacket>
 8009038:	e0be      	b.n	80091b8 <USB_EPStartXfer+0x3b0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	015a      	lsls	r2, r3, #5
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	4413      	add	r3, r2
 8009042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	0151      	lsls	r1, r2, #5
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	440a      	add	r2, r1
 8009050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009054:	0cdb      	lsrs	r3, r3, #19
 8009056:	04db      	lsls	r3, r3, #19
 8009058:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	4413      	add	r3, r2
 8009062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	0151      	lsls	r1, r2, #5
 800906c:	697a      	ldr	r2, [r7, #20]
 800906e:	440a      	add	r2, r1
 8009070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009074:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009078:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800907c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d123      	bne.n	80090ce <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009092:	691a      	ldr	r2, [r3, #16]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800909c:	6939      	ldr	r1, [r7, #16]
 800909e:	0148      	lsls	r0, r1, #5
 80090a0:	6979      	ldr	r1, [r7, #20]
 80090a2:	4401      	add	r1, r0
 80090a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80090a8:	4313      	orrs	r3, r2
 80090aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	015a      	lsls	r2, r3, #5
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	4413      	add	r3, r2
 80090b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	693a      	ldr	r2, [r7, #16]
 80090bc:	0151      	lsls	r1, r2, #5
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	440a      	add	r2, r1
 80090c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090ca:	6113      	str	r3, [r2, #16]
 80090cc:	e037      	b.n	800913e <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	699a      	ldr	r2, [r3, #24]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	4413      	add	r3, r2
 80090d8:	1e5a      	subs	r2, r3, #1
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	fbb2 f3f3 	udiv	r3, r2, r3
 80090e2:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	89fa      	ldrh	r2, [r7, #14]
 80090ea:	fb02 f203 	mul.w	r2, r2, r3
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fe:	691a      	ldr	r2, [r3, #16]
 8009100:	89fb      	ldrh	r3, [r7, #14]
 8009102:	04d9      	lsls	r1, r3, #19
 8009104:	4b2f      	ldr	r3, [pc, #188]	; (80091c4 <USB_EPStartXfer+0x3bc>)
 8009106:	400b      	ands	r3, r1
 8009108:	6939      	ldr	r1, [r7, #16]
 800910a:	0148      	lsls	r0, r1, #5
 800910c:	6979      	ldr	r1, [r7, #20]
 800910e:	4401      	add	r1, r0
 8009110:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009114:	4313      	orrs	r3, r2
 8009116:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	015a      	lsls	r2, r3, #5
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	4413      	add	r3, r2
 8009120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009124:	691a      	ldr	r2, [r3, #16]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	69db      	ldr	r3, [r3, #28]
 800912a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800912e:	6939      	ldr	r1, [r7, #16]
 8009130:	0148      	lsls	r0, r1, #5
 8009132:	6979      	ldr	r1, [r7, #20]
 8009134:	4401      	add	r1, r0
 8009136:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800913a:	4313      	orrs	r3, r2
 800913c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	791b      	ldrb	r3, [r3, #4]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d128      	bne.n	8009198 <USB_EPStartXfer+0x390>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009152:	2b00      	cmp	r3, #0
 8009154:	d110      	bne.n	8009178 <USB_EPStartXfer+0x370>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	4413      	add	r3, r2
 800915e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	0151      	lsls	r1, r2, #5
 8009168:	697a      	ldr	r2, [r7, #20]
 800916a:	440a      	add	r2, r1
 800916c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009170:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009174:	6013      	str	r3, [r2, #0]
 8009176:	e00f      	b.n	8009198 <USB_EPStartXfer+0x390>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	693a      	ldr	r2, [r7, #16]
 8009188:	0151      	lsls	r1, r2, #5
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	440a      	add	r2, r1
 800918e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009196:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	693a      	ldr	r2, [r7, #16]
 80091a8:	0151      	lsls	r1, r2, #5
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	440a      	add	r2, r1
 80091ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3718      	adds	r7, #24
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	1ff80000 	.word	0x1ff80000

080091c8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	785b      	ldrb	r3, [r3, #1]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	f040 80ab 	bne.w	800933c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	699b      	ldr	r3, [r3, #24]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d132      	bne.n	8009254 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	0151      	lsls	r1, r2, #5
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	440a      	add	r2, r1
 8009204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009208:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800920c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009210:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	0151      	lsls	r1, r2, #5
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	440a      	add	r2, r1
 8009228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800922c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009230:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	015a      	lsls	r2, r3, #5
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	4413      	add	r3, r2
 800923a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	0151      	lsls	r1, r2, #5
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	440a      	add	r2, r1
 8009248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800924c:	0cdb      	lsrs	r3, r3, #19
 800924e:	04db      	lsls	r3, r3, #19
 8009250:	6113      	str	r3, [r2, #16]
 8009252:	e04e      	b.n	80092f2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	015a      	lsls	r2, r3, #5
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4413      	add	r3, r2
 800925c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	0151      	lsls	r1, r2, #5
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	440a      	add	r2, r1
 800926a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800926e:	0cdb      	lsrs	r3, r3, #19
 8009270:	04db      	lsls	r3, r3, #19
 8009272:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	015a      	lsls	r2, r3, #5
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4413      	add	r3, r2
 800927c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	0151      	lsls	r1, r2, #5
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	440a      	add	r2, r1
 800928a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800928e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009292:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009296:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	699a      	ldr	r2, [r3, #24]
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d903      	bls.n	80092ac <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	68da      	ldr	r2, [r3, #12]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	015a      	lsls	r2, r3, #5
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4413      	add	r3, r2
 80092b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	0151      	lsls	r1, r2, #5
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	440a      	add	r2, r1
 80092c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d8:	691a      	ldr	r2, [r3, #16]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092e2:	68b9      	ldr	r1, [r7, #8]
 80092e4:	0148      	lsls	r0, r1, #5
 80092e6:	68f9      	ldr	r1, [r7, #12]
 80092e8:	4401      	add	r1, r0
 80092ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80092ee:	4313      	orrs	r3, r2
 80092f0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	0151      	lsls	r1, r2, #5
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	440a      	add	r2, r1
 8009308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800930c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009310:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d071      	beq.n	80093fe <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	f003 030f 	and.w	r3, r3, #15
 800932a:	2101      	movs	r1, #1
 800932c:	fa01 f303 	lsl.w	r3, r1, r3
 8009330:	68f9      	ldr	r1, [r7, #12]
 8009332:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009336:	4313      	orrs	r3, r2
 8009338:	634b      	str	r3, [r1, #52]	; 0x34
 800933a:	e060      	b.n	80093fe <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	015a      	lsls	r2, r3, #5
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	4413      	add	r3, r2
 8009344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	0151      	lsls	r1, r2, #5
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	440a      	add	r2, r1
 8009352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009356:	0cdb      	lsrs	r3, r3, #19
 8009358:	04db      	lsls	r3, r3, #19
 800935a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4413      	add	r3, r2
 8009364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	0151      	lsls	r1, r2, #5
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	440a      	add	r2, r1
 8009372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009376:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800937a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800937e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	68da      	ldr	r2, [r3, #12]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	68da      	ldr	r2, [r3, #12]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	0151      	lsls	r1, r2, #5
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	440a      	add	r2, r1
 80093ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	015a      	lsls	r2, r3, #5
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	4413      	add	r3, r2
 80093c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c4:	691a      	ldr	r2, [r3, #16]
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	0148      	lsls	r0, r1, #5
 80093d2:	68f9      	ldr	r1, [r7, #12]
 80093d4:	4401      	add	r1, r0
 80093d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80093da:	4313      	orrs	r3, r2
 80093dc:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	0151      	lsls	r1, r2, #5
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	440a      	add	r2, r1
 80093f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009416:	2300      	movs	r3, #0
 8009418:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	785b      	ldrb	r3, [r3, #1]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d14a      	bne.n	80094c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800943e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009442:	f040 8086 	bne.w	8009552 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	4413      	add	r3, r2
 8009450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	7812      	ldrb	r2, [r2, #0]
 800945a:	0151      	lsls	r1, r2, #5
 800945c:	693a      	ldr	r2, [r7, #16]
 800945e:	440a      	add	r2, r1
 8009460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009464:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009468:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	4413      	add	r3, r2
 8009474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	7812      	ldrb	r2, [r2, #0]
 800947e:	0151      	lsls	r1, r2, #5
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	440a      	add	r2, r1
 8009484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009488:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800948c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	3301      	adds	r3, #1
 8009492:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f242 7210 	movw	r2, #10000	; 0x2710
 800949a:	4293      	cmp	r3, r2
 800949c:	d902      	bls.n	80094a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	75fb      	strb	r3, [r7, #23]
          break;
 80094a2:	e056      	b.n	8009552 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094bc:	d0e7      	beq.n	800948e <USB_EPStopXfer+0x82>
 80094be:	e048      	b.n	8009552 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094d8:	d13b      	bne.n	8009552 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	7812      	ldrb	r2, [r2, #0]
 80094ee:	0151      	lsls	r1, r2, #5
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	440a      	add	r2, r1
 80094f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	015a      	lsls	r2, r3, #5
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	4413      	add	r3, r2
 8009508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	7812      	ldrb	r2, [r2, #0]
 8009512:	0151      	lsls	r1, r2, #5
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	440a      	add	r2, r1
 8009518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800951c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009520:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	3301      	adds	r3, #1
 8009526:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f242 7210 	movw	r2, #10000	; 0x2710
 800952e:	4293      	cmp	r3, r2
 8009530:	d902      	bls.n	8009538 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	75fb      	strb	r3, [r7, #23]
          break;
 8009536:	e00c      	b.n	8009552 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	015a      	lsls	r2, r3, #5
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	4413      	add	r3, r2
 8009542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800954c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009550:	d0e7      	beq.n	8009522 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009552:	7dfb      	ldrb	r3, [r7, #23]
}
 8009554:	4618      	mov	r0, r3
 8009556:	371c      	adds	r7, #28
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8009560:	b480      	push	{r7}
 8009562:	b089      	sub	sp, #36	; 0x24
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	4611      	mov	r1, r2
 800956c:	461a      	mov	r2, r3
 800956e:	460b      	mov	r3, r1
 8009570:	71fb      	strb	r3, [r7, #7]
 8009572:	4613      	mov	r3, r2
 8009574:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800957e:	88bb      	ldrh	r3, [r7, #4]
 8009580:	3303      	adds	r3, #3
 8009582:	089b      	lsrs	r3, r3, #2
 8009584:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8009586:	2300      	movs	r3, #0
 8009588:	61bb      	str	r3, [r7, #24]
 800958a:	e018      	b.n	80095be <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800958c:	79fb      	ldrb	r3, [r7, #7]
 800958e:	031a      	lsls	r2, r3, #12
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	4413      	add	r3, r2
 8009594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009598:	461a      	mov	r2, r3
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6013      	str	r3, [r2, #0]
    pSrc++;
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	3301      	adds	r3, #1
 80095a4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	3301      	adds	r3, #1
 80095aa:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	3301      	adds	r3, #1
 80095b0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	3301      	adds	r3, #1
 80095b6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	3301      	adds	r3, #1
 80095bc:	61bb      	str	r3, [r7, #24]
 80095be:	69ba      	ldr	r2, [r7, #24]
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d3e2      	bcc.n	800958c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3724      	adds	r7, #36	; 0x24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b08b      	sub	sp, #44	; 0x2c
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	4613      	mov	r3, r2
 80095e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80095ea:	88fb      	ldrh	r3, [r7, #6]
 80095ec:	089b      	lsrs	r3, r3, #2
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80095f2:	88fb      	ldrh	r3, [r7, #6]
 80095f4:	f003 0303 	and.w	r3, r3, #3
 80095f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80095fa:	2300      	movs	r3, #0
 80095fc:	623b      	str	r3, [r7, #32]
 80095fe:	e014      	b.n	800962a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960a:	601a      	str	r2, [r3, #0]
    pDest++;
 800960c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960e:	3301      	adds	r3, #1
 8009610:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009614:	3301      	adds	r3, #1
 8009616:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	3301      	adds	r3, #1
 800961c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	3301      	adds	r3, #1
 8009622:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	3301      	adds	r3, #1
 8009628:	623b      	str	r3, [r7, #32]
 800962a:	6a3a      	ldr	r2, [r7, #32]
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	429a      	cmp	r2, r3
 8009630:	d3e6      	bcc.n	8009600 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009632:	8bfb      	ldrh	r3, [r7, #30]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d01e      	beq.n	8009676 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009638:	2300      	movs	r3, #0
 800963a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009642:	461a      	mov	r2, r3
 8009644:	f107 0310 	add.w	r3, r7, #16
 8009648:	6812      	ldr	r2, [r2, #0]
 800964a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	6a3b      	ldr	r3, [r7, #32]
 8009650:	b2db      	uxtb	r3, r3
 8009652:	00db      	lsls	r3, r3, #3
 8009654:	fa22 f303 	lsr.w	r3, r2, r3
 8009658:	b2da      	uxtb	r2, r3
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	701a      	strb	r2, [r3, #0]
      i++;
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	3301      	adds	r3, #1
 8009662:	623b      	str	r3, [r7, #32]
      pDest++;
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	3301      	adds	r3, #1
 8009668:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800966a:	8bfb      	ldrh	r3, [r7, #30]
 800966c:	3b01      	subs	r3, #1
 800966e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009670:	8bfb      	ldrh	r3, [r7, #30]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1ea      	bne.n	800964c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009678:	4618      	mov	r0, r3
 800967a:	372c      	adds	r7, #44	; 0x2c
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	785b      	ldrb	r3, [r3, #1]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d12c      	bne.n	80096fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	db12      	blt.n	80096d8 <USB_EPSetStall+0x54>
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00f      	beq.n	80096d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	0151      	lsls	r1, r2, #5
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	440a      	add	r2, r1
 80096ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	015a      	lsls	r2, r3, #5
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	4413      	add	r3, r2
 80096e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	0151      	lsls	r1, r2, #5
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	440a      	add	r2, r1
 80096ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096f6:	6013      	str	r3, [r2, #0]
 80096f8:	e02b      	b.n	8009752 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	015a      	lsls	r2, r3, #5
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4413      	add	r3, r2
 8009702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	db12      	blt.n	8009732 <USB_EPSetStall+0xae>
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00f      	beq.n	8009732 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	4413      	add	r3, r2
 800971a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	0151      	lsls	r1, r2, #5
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	440a      	add	r2, r1
 8009728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800972c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009730:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	4413      	add	r3, r2
 800973a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	0151      	lsls	r1, r2, #5
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	440a      	add	r2, r1
 8009748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800974c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009750:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	785b      	ldrb	r3, [r3, #1]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d128      	bne.n	80097ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	0151      	lsls	r1, r2, #5
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	440a      	add	r2, r1
 8009792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009796:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800979a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	791b      	ldrb	r3, [r3, #4]
 80097a0:	2b03      	cmp	r3, #3
 80097a2:	d003      	beq.n	80097ac <USB_EPClearStall+0x4c>
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	791b      	ldrb	r3, [r3, #4]
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d138      	bne.n	800981e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	015a      	lsls	r2, r3, #5
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	0151      	lsls	r1, r2, #5
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	440a      	add	r2, r1
 80097c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097ca:	6013      	str	r3, [r2, #0]
 80097cc:	e027      	b.n	800981e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	0151      	lsls	r1, r2, #5
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	440a      	add	r2, r1
 80097e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80097ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	791b      	ldrb	r3, [r3, #4]
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d003      	beq.n	80097fe <USB_EPClearStall+0x9e>
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	791b      	ldrb	r3, [r3, #4]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d10f      	bne.n	800981e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	015a      	lsls	r2, r3, #5
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	4413      	add	r3, r2
 8009806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	0151      	lsls	r1, r2, #5
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	440a      	add	r2, r1
 8009814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800981c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800984a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800984e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	78fb      	ldrb	r3, [r7, #3]
 800985a:	011b      	lsls	r3, r3, #4
 800985c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009860:	68f9      	ldr	r1, [r7, #12]
 8009862:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009866:	4313      	orrs	r3, r2
 8009868:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	3714      	adds	r7, #20
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009892:	f023 0303 	bic.w	r3, r3, #3
 8009896:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098a6:	f023 0302 	bic.w	r3, r3, #2
 80098aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b085      	sub	sp, #20
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68fa      	ldr	r2, [r7, #12]
 80098d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098d4:	f023 0303 	bic.w	r3, r3, #3
 80098d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098e8:	f043 0302 	orr.w	r3, r3, #2
 80098ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	4013      	ands	r3, r2
 8009912:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009914:	68fb      	ldr	r3, [r7, #12]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009922:	b480      	push	{r7}
 8009924:	b085      	sub	sp, #20
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993e:	69db      	ldr	r3, [r3, #28]
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	4013      	ands	r3, r2
 8009944:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	0c1b      	lsrs	r3, r3, #16
}
 800994a:	4618      	mov	r0, r3
 800994c:	3714      	adds	r7, #20
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009956:	b480      	push	{r7}
 8009958:	b085      	sub	sp, #20
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009972:	69db      	ldr	r3, [r3, #28]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	4013      	ands	r3, r2
 8009978:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	b29b      	uxth	r3, r3
}
 800997e:	4618      	mov	r0, r3
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800998a:	b480      	push	{r7}
 800998c:	b085      	sub	sp, #20
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	460b      	mov	r3, r1
 8009994:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800999a:	78fb      	ldrb	r3, [r7, #3]
 800999c:	015a      	lsls	r2, r3, #5
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	4013      	ands	r3, r2
 80099b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80099b8:	68bb      	ldr	r3, [r7, #8]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80099c6:	b480      	push	{r7}
 80099c8:	b087      	sub	sp, #28
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
 80099ce:	460b      	mov	r3, r1
 80099d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80099ea:	78fb      	ldrb	r3, [r7, #3]
 80099ec:	f003 030f 	and.w	r3, r3, #15
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	fa22 f303 	lsr.w	r3, r2, r3
 80099f6:	01db      	lsls	r3, r3, #7
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	693a      	ldr	r2, [r7, #16]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009a00:	78fb      	ldrb	r3, [r7, #3]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	4013      	ands	r3, r2
 8009a12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a14:	68bb      	ldr	r3, [r7, #8]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	371c      	adds	r7, #28
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b083      	sub	sp, #12
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	f003 0301 	and.w	r3, r3, #1
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b085      	sub	sp, #20
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009a5c:	f023 0307 	bic.w	r3, r3, #7
 8009a60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3714      	adds	r7, #20
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	333c      	adds	r3, #60	; 0x3c
 8009a96:	3304      	adds	r3, #4
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	4a1c      	ldr	r2, [pc, #112]	; (8009b10 <USB_EP0_OutStart+0x8c>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d90a      	bls.n	8009aba <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ab4:	d101      	bne.n	8009aba <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	e024      	b.n	8009b04 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ad4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ad8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ae8:	f043 0318 	orr.w	r3, r3, #24
 8009aec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009afc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009b00:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3714      	adds	r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	4f54300a 	.word	0x4f54300a

08009b14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3301      	adds	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	4a13      	ldr	r2, [pc, #76]	; (8009b78 <USB_CoreReset+0x64>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d901      	bls.n	8009b32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e01b      	b.n	8009b6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	daf2      	bge.n	8009b20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	f043 0201 	orr.w	r2, r3, #1
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	4a09      	ldr	r2, [pc, #36]	; (8009b78 <USB_CoreReset+0x64>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d901      	bls.n	8009b5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	e006      	b.n	8009b6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d0f0      	beq.n	8009b4a <USB_CoreReset+0x36>

  return HAL_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	00030d40 	.word	0x00030d40

08009b7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	460b      	mov	r3, r1
 8009b86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009b8c:	f002 fade 	bl	800c14c <USBD_static_malloc>
 8009b90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d105      	bne.n	8009ba4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	e066      	b.n	8009c72 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	7c1b      	ldrb	r3, [r3, #16]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d119      	bne.n	8009be8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bb8:	2202      	movs	r2, #2
 8009bba:	2181      	movs	r1, #129	; 0x81
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f002 f8b1 	bl	800bd24 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bcc:	2202      	movs	r2, #2
 8009bce:	2101      	movs	r1, #1
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f002 f8a7 	bl	800bd24 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2210      	movs	r2, #16
 8009be2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009be6:	e016      	b.n	8009c16 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009be8:	2340      	movs	r3, #64	; 0x40
 8009bea:	2202      	movs	r2, #2
 8009bec:	2181      	movs	r1, #129	; 0x81
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f002 f898 	bl	800bd24 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009bfa:	2340      	movs	r3, #64	; 0x40
 8009bfc:	2202      	movs	r2, #2
 8009bfe:	2101      	movs	r1, #1
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f002 f88f 	bl	800bd24 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2210      	movs	r2, #16
 8009c12:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c16:	2308      	movs	r3, #8
 8009c18:	2203      	movs	r2, #3
 8009c1a:	2182      	movs	r1, #130	; 0x82
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f002 f881 	bl	800bd24 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	7c1b      	ldrb	r3, [r3, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d109      	bne.n	8009c60 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c56:	2101      	movs	r1, #1
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f002 f9dd 	bl	800c018 <USBD_LL_PrepareReceive>
 8009c5e:	e007      	b.n	8009c70 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c66:	2340      	movs	r3, #64	; 0x40
 8009c68:	2101      	movs	r1, #1
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f002 f9d4 	bl	800c018 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b082      	sub	sp, #8
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	460b      	mov	r3, r1
 8009c84:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009c86:	2181      	movs	r1, #129	; 0x81
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f002 f889 	bl	800bda0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009c94:	2101      	movs	r1, #1
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f002 f882 	bl	800bda0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009ca4:	2182      	movs	r1, #130	; 0x82
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f002 f87a 	bl	800bda0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00e      	beq.n	8009ce4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f002 fa46 	bl	800c168 <USBD_static_free>
    pdev->pClassData = NULL;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
	...

08009cf0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009d02:	2300      	movs	r3, #0
 8009d04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d06:	2300      	movs	r3, #0
 8009d08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e0af      	b.n	8009e78 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d03f      	beq.n	8009da4 <USBD_CDC_Setup+0xb4>
 8009d24:	2b20      	cmp	r3, #32
 8009d26:	f040 809f 	bne.w	8009e68 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	88db      	ldrh	r3, [r3, #6]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d02e      	beq.n	8009d90 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	b25b      	sxtb	r3, r3
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	da16      	bge.n	8009d6a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009d48:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	88d2      	ldrh	r2, [r2, #6]
 8009d4e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	88db      	ldrh	r3, [r3, #6]
 8009d54:	2b07      	cmp	r3, #7
 8009d56:	bf28      	it	cs
 8009d58:	2307      	movcs	r3, #7
 8009d5a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	89fa      	ldrh	r2, [r7, #14]
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f001 fb13 	bl	800b38e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009d68:	e085      	b.n	8009e76 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	785a      	ldrb	r2, [r3, #1]
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	88db      	ldrh	r3, [r3, #6]
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009d80:	6939      	ldr	r1, [r7, #16]
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	88db      	ldrh	r3, [r3, #6]
 8009d86:	461a      	mov	r2, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f001 fb2c 	bl	800b3e6 <USBD_CtlPrepareRx>
      break;
 8009d8e:	e072      	b.n	8009e76 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	683a      	ldr	r2, [r7, #0]
 8009d9a:	7850      	ldrb	r0, [r2, #1]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	6839      	ldr	r1, [r7, #0]
 8009da0:	4798      	blx	r3
      break;
 8009da2:	e068      	b.n	8009e76 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	785b      	ldrb	r3, [r3, #1]
 8009da8:	2b0b      	cmp	r3, #11
 8009daa:	d852      	bhi.n	8009e52 <USBD_CDC_Setup+0x162>
 8009dac:	a201      	add	r2, pc, #4	; (adr r2, 8009db4 <USBD_CDC_Setup+0xc4>)
 8009dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db2:	bf00      	nop
 8009db4:	08009de5 	.word	0x08009de5
 8009db8:	08009e61 	.word	0x08009e61
 8009dbc:	08009e53 	.word	0x08009e53
 8009dc0:	08009e53 	.word	0x08009e53
 8009dc4:	08009e53 	.word	0x08009e53
 8009dc8:	08009e53 	.word	0x08009e53
 8009dcc:	08009e53 	.word	0x08009e53
 8009dd0:	08009e53 	.word	0x08009e53
 8009dd4:	08009e53 	.word	0x08009e53
 8009dd8:	08009e53 	.word	0x08009e53
 8009ddc:	08009e0f 	.word	0x08009e0f
 8009de0:	08009e39 	.word	0x08009e39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	2b03      	cmp	r3, #3
 8009dee:	d107      	bne.n	8009e00 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009df0:	f107 030a 	add.w	r3, r7, #10
 8009df4:	2202      	movs	r2, #2
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f001 fac8 	bl	800b38e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009dfe:	e032      	b.n	8009e66 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f001 fa52 	bl	800b2ac <USBD_CtlError>
            ret = USBD_FAIL;
 8009e08:	2303      	movs	r3, #3
 8009e0a:	75fb      	strb	r3, [r7, #23]
          break;
 8009e0c:	e02b      	b.n	8009e66 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	2b03      	cmp	r3, #3
 8009e18:	d107      	bne.n	8009e2a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e1a:	f107 030d 	add.w	r3, r7, #13
 8009e1e:	2201      	movs	r2, #1
 8009e20:	4619      	mov	r1, r3
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f001 fab3 	bl	800b38e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e28:	e01d      	b.n	8009e66 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f001 fa3d 	bl	800b2ac <USBD_CtlError>
            ret = USBD_FAIL;
 8009e32:	2303      	movs	r3, #3
 8009e34:	75fb      	strb	r3, [r7, #23]
          break;
 8009e36:	e016      	b.n	8009e66 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	2b03      	cmp	r3, #3
 8009e42:	d00f      	beq.n	8009e64 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f001 fa30 	bl	800b2ac <USBD_CtlError>
            ret = USBD_FAIL;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009e50:	e008      	b.n	8009e64 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009e52:	6839      	ldr	r1, [r7, #0]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f001 fa29 	bl	800b2ac <USBD_CtlError>
          ret = USBD_FAIL;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	75fb      	strb	r3, [r7, #23]
          break;
 8009e5e:	e002      	b.n	8009e66 <USBD_CDC_Setup+0x176>
          break;
 8009e60:	bf00      	nop
 8009e62:	e008      	b.n	8009e76 <USBD_CDC_Setup+0x186>
          break;
 8009e64:	bf00      	nop
      }
      break;
 8009e66:	e006      	b.n	8009e76 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f001 fa1e 	bl	800b2ac <USBD_CtlError>
      ret = USBD_FAIL;
 8009e70:	2303      	movs	r3, #3
 8009e72:	75fb      	strb	r3, [r7, #23]
      break;
 8009e74:	bf00      	nop
  }

  return (uint8_t)ret;
 8009e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3718      	adds	r7, #24
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	460b      	mov	r3, r1
 8009e8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d101      	bne.n	8009ea2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	e04f      	b.n	8009f42 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ea8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009eaa:	78fa      	ldrb	r2, [r7, #3]
 8009eac:	6879      	ldr	r1, [r7, #4]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	440b      	add	r3, r1
 8009eb8:	3318      	adds	r3, #24
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d029      	beq.n	8009f14 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009ec0:	78fa      	ldrb	r2, [r7, #3]
 8009ec2:	6879      	ldr	r1, [r7, #4]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	440b      	add	r3, r1
 8009ece:	3318      	adds	r3, #24
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	78f9      	ldrb	r1, [r7, #3]
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	00db      	lsls	r3, r3, #3
 8009eda:	440b      	add	r3, r1
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4403      	add	r3, r0
 8009ee0:	3348      	adds	r3, #72	; 0x48
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	fbb2 f1f3 	udiv	r1, r2, r3
 8009ee8:	fb03 f301 	mul.w	r3, r3, r1
 8009eec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d110      	bne.n	8009f14 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009ef2:	78fa      	ldrb	r2, [r7, #3]
 8009ef4:	6879      	ldr	r1, [r7, #4]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4413      	add	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	440b      	add	r3, r1
 8009f00:	3318      	adds	r3, #24
 8009f02:	2200      	movs	r2, #0
 8009f04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f06:	78f9      	ldrb	r1, [r7, #3]
 8009f08:	2300      	movs	r3, #0
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f002 f84b 	bl	800bfa8 <USBD_LL_Transmit>
 8009f12:	e015      	b.n	8009f40 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00b      	beq.n	8009f40 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009f36:	68ba      	ldr	r2, [r7, #8]
 8009f38:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009f3c:	78fa      	ldrb	r2, [r7, #3]
 8009f3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b084      	sub	sp, #16
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
 8009f52:	460b      	mov	r3, r1
 8009f54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d101      	bne.n	8009f6c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e015      	b.n	8009f98 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009f6c:	78fb      	ldrb	r3, [r7, #3]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f002 f889 	bl	800c088 <USBD_LL_GetRxDataSize>
 8009f76:	4602      	mov	r2, r0
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009f92:	4611      	mov	r1, r2
 8009f94:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d101      	bne.n	8009fba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	e01b      	b.n	8009ff2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d015      	beq.n	8009ff0 <USBD_CDC_EP0_RxReady+0x50>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009fca:	2bff      	cmp	r3, #255	; 0xff
 8009fcc:	d010      	beq.n	8009ff0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009fdc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009fe4:	b292      	uxth	r2, r2
 8009fe6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	22ff      	movs	r2, #255	; 0xff
 8009fec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
	...

08009ffc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2243      	movs	r2, #67	; 0x43
 800a008:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a00a:	4b03      	ldr	r3, [pc, #12]	; (800a018 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr
 800a018:	20000094 	.word	0x20000094

0800a01c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2243      	movs	r2, #67	; 0x43
 800a028:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a02a:	4b03      	ldr	r3, [pc, #12]	; (800a038 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	20000050 	.word	0x20000050

0800a03c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2243      	movs	r2, #67	; 0x43
 800a048:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a04a:	4b03      	ldr	r3, [pc, #12]	; (800a058 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	200000d8 	.word	0x200000d8

0800a05c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	220a      	movs	r2, #10
 800a068:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a06a:	4b03      	ldr	r3, [pc, #12]	; (800a078 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	2000000c 	.word	0x2000000c

0800a07c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d101      	bne.n	800a090 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e004      	b.n	800a09a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b087      	sub	sp, #28
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	60f8      	str	r0, [r7, #12]
 800a0ae:	60b9      	str	r1, [r7, #8]
 800a0b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0b8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e008      	b.n	800a0d6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	68ba      	ldr	r2, [r7, #8]
 800a0c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	371c      	adds	r7, #28
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b085      	sub	sp, #20
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d101      	bne.n	800a0fe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	e004      	b.n	800a108 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	683a      	ldr	r2, [r7, #0]
 800a102:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3714      	adds	r7, #20
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a122:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d101      	bne.n	800a132 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a12e:	2303      	movs	r3, #3
 800a130:	e016      	b.n	800a160 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	7c1b      	ldrb	r3, [r3, #16]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d109      	bne.n	800a14e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a140:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a144:	2101      	movs	r1, #1
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f001 ff66 	bl	800c018 <USBD_LL_PrepareReceive>
 800a14c:	e007      	b.n	800a15e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a154:	2340      	movs	r3, #64	; 0x40
 800a156:	2101      	movs	r1, #1
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f001 ff5d 	bl	800c018 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a15e:	2300      	movs	r3, #0
}
 800a160:	4618      	mov	r0, r3
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	4613      	mov	r3, r2
 800a174:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a17c:	2303      	movs	r3, #3
 800a17e:	e01f      	b.n	800a1c0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d003      	beq.n	800a1a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	79fa      	ldrb	r2, [r7, #7]
 800a1b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f001 fd39 	bl	800bc2c <USBD_LL_Init>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a1be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3718      	adds	r7, #24
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d101      	bne.n	800a1e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e016      	b.n	800a20e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00b      	beq.n	800a20c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fc:	f107 020e 	add.w	r2, r7, #14
 800a200:	4610      	mov	r0, r2
 800a202:	4798      	blx	r3
 800a204:	4602      	mov	r2, r0
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b082      	sub	sp, #8
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f001 fd4e 	bl	800bcc0 <USBD_LL_Start>
 800a224:	4603      	mov	r3, r0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a22e:	b480      	push	{r7}
 800a230:	b083      	sub	sp, #12
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a250:	2303      	movs	r3, #3
 800a252:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d009      	beq.n	800a272 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	78fa      	ldrb	r2, [r7, #3]
 800a268:	4611      	mov	r1, r2
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	4798      	blx	r3
 800a26e:	4603      	mov	r3, r0
 800a270:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a272:	7bfb      	ldrb	r3, [r7, #15]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	460b      	mov	r3, r1
 800a286:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d007      	beq.n	800a2a2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	78fa      	ldrb	r2, [r7, #3]
 800a29c:	4611      	mov	r1, r2
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	4798      	blx	r3
  }

  return USBD_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a2bc:	6839      	ldr	r1, [r7, #0]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f000 ffba 	bl	800b238 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a2e0:	f003 031f 	and.w	r3, r3, #31
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d01a      	beq.n	800a31e <USBD_LL_SetupStage+0x72>
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d822      	bhi.n	800a332 <USBD_LL_SetupStage+0x86>
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d002      	beq.n	800a2f6 <USBD_LL_SetupStage+0x4a>
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d00a      	beq.n	800a30a <USBD_LL_SetupStage+0x5e>
 800a2f4:	e01d      	b.n	800a332 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fa62 	bl	800a7c8 <USBD_StdDevReq>
 800a304:	4603      	mov	r3, r0
 800a306:	73fb      	strb	r3, [r7, #15]
      break;
 800a308:	e020      	b.n	800a34c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a310:	4619      	mov	r1, r3
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fac6 	bl	800a8a4 <USBD_StdItfReq>
 800a318:	4603      	mov	r3, r0
 800a31a:	73fb      	strb	r3, [r7, #15]
      break;
 800a31c:	e016      	b.n	800a34c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a324:	4619      	mov	r1, r3
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fb05 	bl	800a936 <USBD_StdEPReq>
 800a32c:	4603      	mov	r3, r0
 800a32e:	73fb      	strb	r3, [r7, #15]
      break;
 800a330:	e00c      	b.n	800a34c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a338:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a33c:	b2db      	uxtb	r3, r3
 800a33e:	4619      	mov	r1, r3
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f001 fd63 	bl	800be0c <USBD_LL_StallEP>
 800a346:	4603      	mov	r3, r0
 800a348:	73fb      	strb	r3, [r7, #15]
      break;
 800a34a:	bf00      	nop
  }

  return ret;
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b086      	sub	sp, #24
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	60f8      	str	r0, [r7, #12]
 800a35e:	460b      	mov	r3, r1
 800a360:	607a      	str	r2, [r7, #4]
 800a362:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a364:	7afb      	ldrb	r3, [r7, #11]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d138      	bne.n	800a3dc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a370:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a378:	2b03      	cmp	r3, #3
 800a37a:	d14a      	bne.n	800a412 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	689a      	ldr	r2, [r3, #8]
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	429a      	cmp	r2, r3
 800a386:	d913      	bls.n	800a3b0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	689a      	ldr	r2, [r3, #8]
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	1ad2      	subs	r2, r2, r3
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	68da      	ldr	r2, [r3, #12]
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	bf28      	it	cs
 800a3a2:	4613      	movcs	r3, r2
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	6879      	ldr	r1, [r7, #4]
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f001 f839 	bl	800b420 <USBD_CtlContinueRx>
 800a3ae:	e030      	b.n	800a412 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	d10b      	bne.n	800a3d4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d005      	beq.n	800a3d4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f001 f834 	bl	800b442 <USBD_CtlSendStatus>
 800a3da:	e01a      	b.n	800a412 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d114      	bne.n	800a412 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00e      	beq.n	800a412 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3fa:	699b      	ldr	r3, [r3, #24]
 800a3fc:	7afa      	ldrb	r2, [r7, #11]
 800a3fe:	4611      	mov	r1, r2
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	4798      	blx	r3
 800a404:	4603      	mov	r3, r0
 800a406:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a408:	7dfb      	ldrb	r3, [r7, #23]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a40e:	7dfb      	ldrb	r3, [r7, #23]
 800a410:	e000      	b.n	800a414 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3718      	adds	r7, #24
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	460b      	mov	r3, r1
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a42a:	7afb      	ldrb	r3, [r7, #11]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d16b      	bne.n	800a508 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	3314      	adds	r3, #20
 800a434:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d156      	bne.n	800a4ee <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	689a      	ldr	r2, [r3, #8]
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d914      	bls.n	800a476 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	689a      	ldr	r2, [r3, #8]
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	1ad2      	subs	r2, r2, r3
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	461a      	mov	r2, r3
 800a460:	6879      	ldr	r1, [r7, #4]
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 ffae 	bl	800b3c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a468:	2300      	movs	r3, #0
 800a46a:	2200      	movs	r2, #0
 800a46c:	2100      	movs	r1, #0
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f001 fdd2 	bl	800c018 <USBD_LL_PrepareReceive>
 800a474:	e03b      	b.n	800a4ee <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	68da      	ldr	r2, [r3, #12]
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d11c      	bne.n	800a4bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	685a      	ldr	r2, [r3, #4]
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d316      	bcc.n	800a4bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	685a      	ldr	r2, [r3, #4]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a498:	429a      	cmp	r2, r3
 800a49a:	d20f      	bcs.n	800a4bc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a49c:	2200      	movs	r2, #0
 800a49e:	2100      	movs	r1, #0
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 ff8f 	bl	800b3c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f001 fdaf 	bl	800c018 <USBD_LL_PrepareReceive>
 800a4ba:	e018      	b.n	800a4ee <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2b03      	cmp	r3, #3
 800a4c6:	d10b      	bne.n	800a4e0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d005      	beq.n	800a4e0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4e0:	2180      	movs	r1, #128	; 0x80
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f001 fc92 	bl	800be0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f000 ffbd 	bl	800b468 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d122      	bne.n	800a53e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f7ff fe98 	bl	800a22e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a506:	e01a      	b.n	800a53e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b03      	cmp	r3, #3
 800a512:	d114      	bne.n	800a53e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a51a:	695b      	ldr	r3, [r3, #20]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00e      	beq.n	800a53e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a526:	695b      	ldr	r3, [r3, #20]
 800a528:	7afa      	ldrb	r2, [r7, #11]
 800a52a:	4611      	mov	r1, r2
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	4798      	blx	r3
 800a530:	4603      	mov	r3, r0
 800a532:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a534:	7dfb      	ldrb	r3, [r7, #23]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
 800a53c:	e000      	b.n	800a540 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a578:	2303      	movs	r3, #3
 800a57a:	e02f      	b.n	800a5dc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00f      	beq.n	800a5a6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d009      	beq.n	800a5a6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	6852      	ldr	r2, [r2, #4]
 800a59e:	b2d2      	uxtb	r2, r2
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5a6:	2340      	movs	r3, #64	; 0x40
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f001 fbb9 	bl	800bd24 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2240      	movs	r2, #64	; 0x40
 800a5be:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5c2:	2340      	movs	r3, #64	; 0x40
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	2180      	movs	r1, #128	; 0x80
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f001 fbab 	bl	800bd24 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2240      	movs	r2, #64	; 0x40
 800a5d8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	78fa      	ldrb	r2, [r7, #3]
 800a5f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a612:	b2da      	uxtb	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2204      	movs	r2, #4
 800a61e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b04      	cmp	r3, #4
 800a642:	d106      	bne.n	800a652 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a672:	2303      	movs	r3, #3
 800a674:	e012      	b.n	800a69c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	2b03      	cmp	r3, #3
 800a680:	d10b      	bne.n	800a69a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a688:	69db      	ldr	r3, [r3, #28]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d005      	beq.n	800a69a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a694:	69db      	ldr	r3, [r3, #28]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d101      	bne.n	800a6be <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	e014      	b.n	800a6e8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	2b03      	cmp	r3, #3
 800a6c8:	d10d      	bne.n	800a6e6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6d0:	6a1b      	ldr	r3, [r3, #32]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d007      	beq.n	800a6e6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6dc:	6a1b      	ldr	r3, [r3, #32]
 800a6de:	78fa      	ldrb	r2, [r7, #3]
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a702:	2b00      	cmp	r3, #0
 800a704:	d101      	bne.n	800a70a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a706:	2303      	movs	r3, #3
 800a708:	e014      	b.n	800a734 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b03      	cmp	r3, #3
 800a714:	d10d      	bne.n	800a732 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d007      	beq.n	800a732 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72a:	78fa      	ldrb	r2, [r7, #3]
 800a72c:	4611      	mov	r1, r2
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b082      	sub	sp, #8
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2201      	movs	r2, #1
 800a75e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d009      	beq.n	800a780 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	6852      	ldr	r2, [r2, #4]
 800a778:	b2d2      	uxtb	r2, r2
 800a77a:	4611      	mov	r1, r2
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	4798      	blx	r3
  }

  return USBD_OK;
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b087      	sub	sp, #28
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a7a8:	8a3b      	ldrh	r3, [r7, #16]
 800a7aa:	021b      	lsls	r3, r3, #8
 800a7ac:	b21a      	sxth	r2, r3
 800a7ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	b21b      	sxth	r3, r3
 800a7b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a7b8:	89fb      	ldrh	r3, [r7, #14]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	371c      	adds	r7, #28
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
	...

0800a7c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7de:	2b40      	cmp	r3, #64	; 0x40
 800a7e0:	d005      	beq.n	800a7ee <USBD_StdDevReq+0x26>
 800a7e2:	2b40      	cmp	r3, #64	; 0x40
 800a7e4:	d853      	bhi.n	800a88e <USBD_StdDevReq+0xc6>
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00b      	beq.n	800a802 <USBD_StdDevReq+0x3a>
 800a7ea:	2b20      	cmp	r3, #32
 800a7ec:	d14f      	bne.n	800a88e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	6839      	ldr	r1, [r7, #0]
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	4798      	blx	r3
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a800:	e04a      	b.n	800a898 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	785b      	ldrb	r3, [r3, #1]
 800a806:	2b09      	cmp	r3, #9
 800a808:	d83b      	bhi.n	800a882 <USBD_StdDevReq+0xba>
 800a80a:	a201      	add	r2, pc, #4	; (adr r2, 800a810 <USBD_StdDevReq+0x48>)
 800a80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a810:	0800a865 	.word	0x0800a865
 800a814:	0800a879 	.word	0x0800a879
 800a818:	0800a883 	.word	0x0800a883
 800a81c:	0800a86f 	.word	0x0800a86f
 800a820:	0800a883 	.word	0x0800a883
 800a824:	0800a843 	.word	0x0800a843
 800a828:	0800a839 	.word	0x0800a839
 800a82c:	0800a883 	.word	0x0800a883
 800a830:	0800a85b 	.word	0x0800a85b
 800a834:	0800a84d 	.word	0x0800a84d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f9de 	bl	800abfc <USBD_GetDescriptor>
          break;
 800a840:	e024      	b.n	800a88c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a842:	6839      	ldr	r1, [r7, #0]
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fb6d 	bl	800af24 <USBD_SetAddress>
          break;
 800a84a:	e01f      	b.n	800a88c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fbac 	bl	800afac <USBD_SetConfig>
 800a854:	4603      	mov	r3, r0
 800a856:	73fb      	strb	r3, [r7, #15]
          break;
 800a858:	e018      	b.n	800a88c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a85a:	6839      	ldr	r1, [r7, #0]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fc4b 	bl	800b0f8 <USBD_GetConfig>
          break;
 800a862:	e013      	b.n	800a88c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a864:	6839      	ldr	r1, [r7, #0]
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fc7c 	bl	800b164 <USBD_GetStatus>
          break;
 800a86c:	e00e      	b.n	800a88c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fcab 	bl	800b1cc <USBD_SetFeature>
          break;
 800a876:	e009      	b.n	800a88c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fcba 	bl	800b1f4 <USBD_ClrFeature>
          break;
 800a880:	e004      	b.n	800a88c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fd11 	bl	800b2ac <USBD_CtlError>
          break;
 800a88a:	bf00      	nop
      }
      break;
 800a88c:	e004      	b.n	800a898 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a88e:	6839      	ldr	r1, [r7, #0]
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fd0b 	bl	800b2ac <USBD_CtlError>
      break;
 800a896:	bf00      	nop
  }

  return ret;
 800a898:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop

0800a8a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8ba:	2b40      	cmp	r3, #64	; 0x40
 800a8bc:	d005      	beq.n	800a8ca <USBD_StdItfReq+0x26>
 800a8be:	2b40      	cmp	r3, #64	; 0x40
 800a8c0:	d82f      	bhi.n	800a922 <USBD_StdItfReq+0x7e>
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <USBD_StdItfReq+0x26>
 800a8c6:	2b20      	cmp	r3, #32
 800a8c8:	d12b      	bne.n	800a922 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d81d      	bhi.n	800a914 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	889b      	ldrh	r3, [r3, #4]
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d813      	bhi.n	800a90a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	6839      	ldr	r1, [r7, #0]
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	4798      	blx	r3
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	88db      	ldrh	r3, [r3, #6]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d110      	bne.n	800a91e <USBD_StdItfReq+0x7a>
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d10d      	bne.n	800a91e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fd9d 	bl	800b442 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a908:	e009      	b.n	800a91e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fccd 	bl	800b2ac <USBD_CtlError>
          break;
 800a912:	e004      	b.n	800a91e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a914:	6839      	ldr	r1, [r7, #0]
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fcc8 	bl	800b2ac <USBD_CtlError>
          break;
 800a91c:	e000      	b.n	800a920 <USBD_StdItfReq+0x7c>
          break;
 800a91e:	bf00      	nop
      }
      break;
 800a920:	e004      	b.n	800a92c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a922:	6839      	ldr	r1, [r7, #0]
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fcc1 	bl	800b2ac <USBD_CtlError>
      break;
 800a92a:	bf00      	nop
  }

  return ret;
 800a92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b084      	sub	sp, #16
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a940:	2300      	movs	r3, #0
 800a942:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	889b      	ldrh	r3, [r3, #4]
 800a948:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a952:	2b40      	cmp	r3, #64	; 0x40
 800a954:	d007      	beq.n	800a966 <USBD_StdEPReq+0x30>
 800a956:	2b40      	cmp	r3, #64	; 0x40
 800a958:	f200 8145 	bhi.w	800abe6 <USBD_StdEPReq+0x2b0>
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00c      	beq.n	800a97a <USBD_StdEPReq+0x44>
 800a960:	2b20      	cmp	r3, #32
 800a962:	f040 8140 	bne.w	800abe6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	4798      	blx	r3
 800a974:	4603      	mov	r3, r0
 800a976:	73fb      	strb	r3, [r7, #15]
      break;
 800a978:	e13a      	b.n	800abf0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	785b      	ldrb	r3, [r3, #1]
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d007      	beq.n	800a992 <USBD_StdEPReq+0x5c>
 800a982:	2b03      	cmp	r3, #3
 800a984:	f300 8129 	bgt.w	800abda <USBD_StdEPReq+0x2a4>
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d07f      	beq.n	800aa8c <USBD_StdEPReq+0x156>
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d03c      	beq.n	800aa0a <USBD_StdEPReq+0xd4>
 800a990:	e123      	b.n	800abda <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d002      	beq.n	800a9a4 <USBD_StdEPReq+0x6e>
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d016      	beq.n	800a9d0 <USBD_StdEPReq+0x9a>
 800a9a2:	e02c      	b.n	800a9fe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00d      	beq.n	800a9c6 <USBD_StdEPReq+0x90>
 800a9aa:	7bbb      	ldrb	r3, [r7, #14]
 800a9ac:	2b80      	cmp	r3, #128	; 0x80
 800a9ae:	d00a      	beq.n	800a9c6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f001 fa29 	bl	800be0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9ba:	2180      	movs	r1, #128	; 0x80
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f001 fa25 	bl	800be0c <USBD_LL_StallEP>
 800a9c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9c4:	e020      	b.n	800aa08 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fc6f 	bl	800b2ac <USBD_CtlError>
              break;
 800a9ce:	e01b      	b.n	800aa08 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	885b      	ldrh	r3, [r3, #2]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10e      	bne.n	800a9f6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00b      	beq.n	800a9f6 <USBD_StdEPReq+0xc0>
 800a9de:	7bbb      	ldrb	r3, [r7, #14]
 800a9e0:	2b80      	cmp	r3, #128	; 0x80
 800a9e2:	d008      	beq.n	800a9f6 <USBD_StdEPReq+0xc0>
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	88db      	ldrh	r3, [r3, #6]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d104      	bne.n	800a9f6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9ec:	7bbb      	ldrb	r3, [r7, #14]
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f001 fa0b 	bl	800be0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 fd23 	bl	800b442 <USBD_CtlSendStatus>

              break;
 800a9fc:	e004      	b.n	800aa08 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fc53 	bl	800b2ac <USBD_CtlError>
              break;
 800aa06:	bf00      	nop
          }
          break;
 800aa08:	e0ec      	b.n	800abe4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d002      	beq.n	800aa1c <USBD_StdEPReq+0xe6>
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d016      	beq.n	800aa48 <USBD_StdEPReq+0x112>
 800aa1a:	e030      	b.n	800aa7e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00d      	beq.n	800aa3e <USBD_StdEPReq+0x108>
 800aa22:	7bbb      	ldrb	r3, [r7, #14]
 800aa24:	2b80      	cmp	r3, #128	; 0x80
 800aa26:	d00a      	beq.n	800aa3e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa28:	7bbb      	ldrb	r3, [r7, #14]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f001 f9ed 	bl	800be0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa32:	2180      	movs	r1, #128	; 0x80
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f001 f9e9 	bl	800be0c <USBD_LL_StallEP>
 800aa3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa3c:	e025      	b.n	800aa8a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fc33 	bl	800b2ac <USBD_CtlError>
              break;
 800aa46:	e020      	b.n	800aa8a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	885b      	ldrh	r3, [r3, #2]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d11b      	bne.n	800aa88 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
 800aa52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d004      	beq.n	800aa64 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa5a:	7bbb      	ldrb	r3, [r7, #14]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f001 fa0a 	bl	800be78 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fcec 	bl	800b442 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	4798      	blx	r3
 800aa78:	4603      	mov	r3, r0
 800aa7a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aa7c:	e004      	b.n	800aa88 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800aa7e:	6839      	ldr	r1, [r7, #0]
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 fc13 	bl	800b2ac <USBD_CtlError>
              break;
 800aa86:	e000      	b.n	800aa8a <USBD_StdEPReq+0x154>
              break;
 800aa88:	bf00      	nop
          }
          break;
 800aa8a:	e0ab      	b.n	800abe4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d002      	beq.n	800aa9e <USBD_StdEPReq+0x168>
 800aa98:	2b03      	cmp	r3, #3
 800aa9a:	d032      	beq.n	800ab02 <USBD_StdEPReq+0x1cc>
 800aa9c:	e097      	b.n	800abce <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d007      	beq.n	800aab4 <USBD_StdEPReq+0x17e>
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	2b80      	cmp	r3, #128	; 0x80
 800aaa8:	d004      	beq.n	800aab4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aaaa:	6839      	ldr	r1, [r7, #0]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fbfd 	bl	800b2ac <USBD_CtlError>
                break;
 800aab2:	e091      	b.n	800abd8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	da0b      	bge.n	800aad4 <USBD_StdEPReq+0x19e>
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
 800aabe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aac2:	4613      	mov	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	3310      	adds	r3, #16
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	4413      	add	r3, r2
 800aad0:	3304      	adds	r3, #4
 800aad2:	e00b      	b.n	800aaec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aad4:	7bbb      	ldrb	r3, [r7, #14]
 800aad6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aada:	4613      	mov	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4413      	add	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	4413      	add	r3, r2
 800aaea:	3304      	adds	r3, #4
 800aaec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	4619      	mov	r1, r3
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fc47 	bl	800b38e <USBD_CtlSendData>
              break;
 800ab00:	e06a      	b.n	800abd8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	da11      	bge.n	800ab2e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab0a:	7bbb      	ldrb	r3, [r7, #14]
 800ab0c:	f003 020f 	and.w	r2, r3, #15
 800ab10:	6879      	ldr	r1, [r7, #4]
 800ab12:	4613      	mov	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	440b      	add	r3, r1
 800ab1c:	3324      	adds	r3, #36	; 0x24
 800ab1e:	881b      	ldrh	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d117      	bne.n	800ab54 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fbc0 	bl	800b2ac <USBD_CtlError>
                  break;
 800ab2c:	e054      	b.n	800abd8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab2e:	7bbb      	ldrb	r3, [r7, #14]
 800ab30:	f003 020f 	and.w	r2, r3, #15
 800ab34:	6879      	ldr	r1, [r7, #4]
 800ab36:	4613      	mov	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	440b      	add	r3, r1
 800ab40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab44:	881b      	ldrh	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d104      	bne.n	800ab54 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fbad 	bl	800b2ac <USBD_CtlError>
                  break;
 800ab52:	e041      	b.n	800abd8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	da0b      	bge.n	800ab74 <USBD_StdEPReq+0x23e>
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
 800ab5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab62:	4613      	mov	r3, r2
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	4413      	add	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	3310      	adds	r3, #16
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	4413      	add	r3, r2
 800ab70:	3304      	adds	r3, #4
 800ab72:	e00b      	b.n	800ab8c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab74:	7bbb      	ldrb	r3, [r7, #14]
 800ab76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	4413      	add	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	4413      	add	r3, r2
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <USBD_StdEPReq+0x264>
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
 800ab96:	2b80      	cmp	r3, #128	; 0x80
 800ab98:	d103      	bne.n	800aba2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	601a      	str	r2, [r3, #0]
 800aba0:	e00e      	b.n	800abc0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aba2:	7bbb      	ldrb	r3, [r7, #14]
 800aba4:	4619      	mov	r1, r3
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f001 f99c 	bl	800bee4 <USBD_LL_IsStallEP>
 800abac:	4603      	mov	r3, r0
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	2201      	movs	r2, #1
 800abb6:	601a      	str	r2, [r3, #0]
 800abb8:	e002      	b.n	800abc0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	2200      	movs	r2, #0
 800abbe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	2202      	movs	r2, #2
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fbe1 	bl	800b38e <USBD_CtlSendData>
              break;
 800abcc:	e004      	b.n	800abd8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fb6b 	bl	800b2ac <USBD_CtlError>
              break;
 800abd6:	bf00      	nop
          }
          break;
 800abd8:	e004      	b.n	800abe4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800abda:	6839      	ldr	r1, [r7, #0]
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 fb65 	bl	800b2ac <USBD_CtlError>
          break;
 800abe2:	bf00      	nop
      }
      break;
 800abe4:	e004      	b.n	800abf0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800abe6:	6839      	ldr	r1, [r7, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fb5f 	bl	800b2ac <USBD_CtlError>
      break;
 800abee:	bf00      	nop
  }

  return ret;
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
	...

0800abfc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac06:	2300      	movs	r3, #0
 800ac08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	885b      	ldrh	r3, [r3, #2]
 800ac16:	0a1b      	lsrs	r3, r3, #8
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	2b0e      	cmp	r3, #14
 800ac1e:	f200 8152 	bhi.w	800aec6 <USBD_GetDescriptor+0x2ca>
 800ac22:	a201      	add	r2, pc, #4	; (adr r2, 800ac28 <USBD_GetDescriptor+0x2c>)
 800ac24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac28:	0800ac99 	.word	0x0800ac99
 800ac2c:	0800acb1 	.word	0x0800acb1
 800ac30:	0800acf1 	.word	0x0800acf1
 800ac34:	0800aec7 	.word	0x0800aec7
 800ac38:	0800aec7 	.word	0x0800aec7
 800ac3c:	0800ae67 	.word	0x0800ae67
 800ac40:	0800ae93 	.word	0x0800ae93
 800ac44:	0800aec7 	.word	0x0800aec7
 800ac48:	0800aec7 	.word	0x0800aec7
 800ac4c:	0800aec7 	.word	0x0800aec7
 800ac50:	0800aec7 	.word	0x0800aec7
 800ac54:	0800aec7 	.word	0x0800aec7
 800ac58:	0800aec7 	.word	0x0800aec7
 800ac5c:	0800aec7 	.word	0x0800aec7
 800ac60:	0800ac65 	.word	0x0800ac65
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac6a:	69db      	ldr	r3, [r3, #28]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d00b      	beq.n	800ac88 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac76:	69db      	ldr	r3, [r3, #28]
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	7c12      	ldrb	r2, [r2, #16]
 800ac7c:	f107 0108 	add.w	r1, r7, #8
 800ac80:	4610      	mov	r0, r2
 800ac82:	4798      	blx	r3
 800ac84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac86:	e126      	b.n	800aed6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac88:	6839      	ldr	r1, [r7, #0]
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 fb0e 	bl	800b2ac <USBD_CtlError>
        err++;
 800ac90:	7afb      	ldrb	r3, [r7, #11]
 800ac92:	3301      	adds	r3, #1
 800ac94:	72fb      	strb	r3, [r7, #11]
      break;
 800ac96:	e11e      	b.n	800aed6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	7c12      	ldrb	r2, [r2, #16]
 800aca4:	f107 0108 	add.w	r1, r7, #8
 800aca8:	4610      	mov	r0, r2
 800acaa:	4798      	blx	r3
 800acac:	60f8      	str	r0, [r7, #12]
      break;
 800acae:	e112      	b.n	800aed6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	7c1b      	ldrb	r3, [r3, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10d      	bne.n	800acd4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc0:	f107 0208 	add.w	r2, r7, #8
 800acc4:	4610      	mov	r0, r2
 800acc6:	4798      	blx	r3
 800acc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	3301      	adds	r3, #1
 800acce:	2202      	movs	r2, #2
 800acd0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800acd2:	e100      	b.n	800aed6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acdc:	f107 0208 	add.w	r2, r7, #8
 800ace0:	4610      	mov	r0, r2
 800ace2:	4798      	blx	r3
 800ace4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	3301      	adds	r3, #1
 800acea:	2202      	movs	r2, #2
 800acec:	701a      	strb	r2, [r3, #0]
      break;
 800acee:	e0f2      	b.n	800aed6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	885b      	ldrh	r3, [r3, #2]
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b05      	cmp	r3, #5
 800acf8:	f200 80ac 	bhi.w	800ae54 <USBD_GetDescriptor+0x258>
 800acfc:	a201      	add	r2, pc, #4	; (adr r2, 800ad04 <USBD_GetDescriptor+0x108>)
 800acfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad02:	bf00      	nop
 800ad04:	0800ad1d 	.word	0x0800ad1d
 800ad08:	0800ad51 	.word	0x0800ad51
 800ad0c:	0800ad85 	.word	0x0800ad85
 800ad10:	0800adb9 	.word	0x0800adb9
 800ad14:	0800aded 	.word	0x0800aded
 800ad18:	0800ae21 	.word	0x0800ae21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00b      	beq.n	800ad40 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	7c12      	ldrb	r2, [r2, #16]
 800ad34:	f107 0108 	add.w	r1, r7, #8
 800ad38:	4610      	mov	r0, r2
 800ad3a:	4798      	blx	r3
 800ad3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad3e:	e091      	b.n	800ae64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fab2 	bl	800b2ac <USBD_CtlError>
            err++;
 800ad48:	7afb      	ldrb	r3, [r7, #11]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad4e:	e089      	b.n	800ae64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00b      	beq.n	800ad74 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	7c12      	ldrb	r2, [r2, #16]
 800ad68:	f107 0108 	add.w	r1, r7, #8
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	4798      	blx	r3
 800ad70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad72:	e077      	b.n	800ae64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fa98 	bl	800b2ac <USBD_CtlError>
            err++;
 800ad7c:	7afb      	ldrb	r3, [r7, #11]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	72fb      	strb	r3, [r7, #11]
          break;
 800ad82:	e06f      	b.n	800ae64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00b      	beq.n	800ada8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	7c12      	ldrb	r2, [r2, #16]
 800ad9c:	f107 0108 	add.w	r1, r7, #8
 800ada0:	4610      	mov	r0, r2
 800ada2:	4798      	blx	r3
 800ada4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ada6:	e05d      	b.n	800ae64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fa7e 	bl	800b2ac <USBD_CtlError>
            err++;
 800adb0:	7afb      	ldrb	r3, [r7, #11]
 800adb2:	3301      	adds	r3, #1
 800adb4:	72fb      	strb	r3, [r7, #11]
          break;
 800adb6:	e055      	b.n	800ae64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00b      	beq.n	800addc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	7c12      	ldrb	r2, [r2, #16]
 800add0:	f107 0108 	add.w	r1, r7, #8
 800add4:	4610      	mov	r0, r2
 800add6:	4798      	blx	r3
 800add8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adda:	e043      	b.n	800ae64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fa64 	bl	800b2ac <USBD_CtlError>
            err++;
 800ade4:	7afb      	ldrb	r3, [r7, #11]
 800ade6:	3301      	adds	r3, #1
 800ade8:	72fb      	strb	r3, [r7, #11]
          break;
 800adea:	e03b      	b.n	800ae64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adf2:	695b      	ldr	r3, [r3, #20]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00b      	beq.n	800ae10 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	7c12      	ldrb	r2, [r2, #16]
 800ae04:	f107 0108 	add.w	r1, r7, #8
 800ae08:	4610      	mov	r0, r2
 800ae0a:	4798      	blx	r3
 800ae0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae0e:	e029      	b.n	800ae64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae10:	6839      	ldr	r1, [r7, #0]
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fa4a 	bl	800b2ac <USBD_CtlError>
            err++;
 800ae18:	7afb      	ldrb	r3, [r7, #11]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae1e:	e021      	b.n	800ae64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00b      	beq.n	800ae44 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	7c12      	ldrb	r2, [r2, #16]
 800ae38:	f107 0108 	add.w	r1, r7, #8
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	4798      	blx	r3
 800ae40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae42:	e00f      	b.n	800ae64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fa30 	bl	800b2ac <USBD_CtlError>
            err++;
 800ae4c:	7afb      	ldrb	r3, [r7, #11]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	72fb      	strb	r3, [r7, #11]
          break;
 800ae52:	e007      	b.n	800ae64 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ae54:	6839      	ldr	r1, [r7, #0]
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fa28 	bl	800b2ac <USBD_CtlError>
          err++;
 800ae5c:	7afb      	ldrb	r3, [r7, #11]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ae62:	bf00      	nop
      }
      break;
 800ae64:	e037      	b.n	800aed6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	7c1b      	ldrb	r3, [r3, #16]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d109      	bne.n	800ae82 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae76:	f107 0208 	add.w	r2, r7, #8
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	4798      	blx	r3
 800ae7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae80:	e029      	b.n	800aed6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fa11 	bl	800b2ac <USBD_CtlError>
        err++;
 800ae8a:	7afb      	ldrb	r3, [r7, #11]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae90:	e021      	b.n	800aed6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	7c1b      	ldrb	r3, [r3, #16]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10d      	bne.n	800aeb6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea2:	f107 0208 	add.w	r2, r7, #8
 800aea6:	4610      	mov	r0, r2
 800aea8:	4798      	blx	r3
 800aeaa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	2207      	movs	r2, #7
 800aeb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aeb4:	e00f      	b.n	800aed6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aeb6:	6839      	ldr	r1, [r7, #0]
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 f9f7 	bl	800b2ac <USBD_CtlError>
        err++;
 800aebe:	7afb      	ldrb	r3, [r7, #11]
 800aec0:	3301      	adds	r3, #1
 800aec2:	72fb      	strb	r3, [r7, #11]
      break;
 800aec4:	e007      	b.n	800aed6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f9ef 	bl	800b2ac <USBD_CtlError>
      err++;
 800aece:	7afb      	ldrb	r3, [r7, #11]
 800aed0:	3301      	adds	r3, #1
 800aed2:	72fb      	strb	r3, [r7, #11]
      break;
 800aed4:	bf00      	nop
  }

  if (err != 0U)
 800aed6:	7afb      	ldrb	r3, [r7, #11]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d11e      	bne.n	800af1a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	88db      	ldrh	r3, [r3, #6]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d016      	beq.n	800af12 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800aee4:	893b      	ldrh	r3, [r7, #8]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00e      	beq.n	800af08 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	88da      	ldrh	r2, [r3, #6]
 800aeee:	893b      	ldrh	r3, [r7, #8]
 800aef0:	4293      	cmp	r3, r2
 800aef2:	bf28      	it	cs
 800aef4:	4613      	movcs	r3, r2
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aefa:	893b      	ldrh	r3, [r7, #8]
 800aefc:	461a      	mov	r2, r3
 800aefe:	68f9      	ldr	r1, [r7, #12]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fa44 	bl	800b38e <USBD_CtlSendData>
 800af06:	e009      	b.n	800af1c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f9ce 	bl	800b2ac <USBD_CtlError>
 800af10:	e004      	b.n	800af1c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fa95 	bl	800b442 <USBD_CtlSendStatus>
 800af18:	e000      	b.n	800af1c <USBD_GetDescriptor+0x320>
    return;
 800af1a:	bf00      	nop
  }
}
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop

0800af24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	889b      	ldrh	r3, [r3, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d131      	bne.n	800af9a <USBD_SetAddress+0x76>
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	88db      	ldrh	r3, [r3, #6]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d12d      	bne.n	800af9a <USBD_SetAddress+0x76>
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	885b      	ldrh	r3, [r3, #2]
 800af42:	2b7f      	cmp	r3, #127	; 0x7f
 800af44:	d829      	bhi.n	800af9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	885b      	ldrh	r3, [r3, #2]
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	2b03      	cmp	r3, #3
 800af5c:	d104      	bne.n	800af68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 f9a3 	bl	800b2ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af66:	e01d      	b.n	800afa4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	7bfa      	ldrb	r2, [r7, #15]
 800af6c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af70:	7bfb      	ldrb	r3, [r7, #15]
 800af72:	4619      	mov	r1, r3
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 ffe1 	bl	800bf3c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fa61 	bl	800b442 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af80:	7bfb      	ldrb	r3, [r7, #15]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d004      	beq.n	800af90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2202      	movs	r2, #2
 800af8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af8e:	e009      	b.n	800afa4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af98:	e004      	b.n	800afa4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f985 	bl	800b2ac <USBD_CtlError>
  }
}
 800afa2:	bf00      	nop
 800afa4:	bf00      	nop
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	885b      	ldrh	r3, [r3, #2]
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	4b4c      	ldr	r3, [pc, #304]	; (800b0f4 <USBD_SetConfig+0x148>)
 800afc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800afc4:	4b4b      	ldr	r3, [pc, #300]	; (800b0f4 <USBD_SetConfig+0x148>)
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d905      	bls.n	800afd8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 f96c 	bl	800b2ac <USBD_CtlError>
    return USBD_FAIL;
 800afd4:	2303      	movs	r3, #3
 800afd6:	e088      	b.n	800b0ea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d002      	beq.n	800afea <USBD_SetConfig+0x3e>
 800afe4:	2b03      	cmp	r3, #3
 800afe6:	d025      	beq.n	800b034 <USBD_SetConfig+0x88>
 800afe8:	e071      	b.n	800b0ce <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800afea:	4b42      	ldr	r3, [pc, #264]	; (800b0f4 <USBD_SetConfig+0x148>)
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d01c      	beq.n	800b02c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800aff2:	4b40      	ldr	r3, [pc, #256]	; (800b0f4 <USBD_SetConfig+0x148>)
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	461a      	mov	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800affc:	4b3d      	ldr	r3, [pc, #244]	; (800b0f4 <USBD_SetConfig+0x148>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7ff f91e 	bl	800a244 <USBD_SetClassConfig>
 800b008:	4603      	mov	r3, r0
 800b00a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d004      	beq.n	800b01c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f949 	bl	800b2ac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b01a:	e065      	b.n	800b0e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f000 fa10 	bl	800b442 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2203      	movs	r2, #3
 800b026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b02a:	e05d      	b.n	800b0e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fa08 	bl	800b442 <USBD_CtlSendStatus>
      break;
 800b032:	e059      	b.n	800b0e8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b034:	4b2f      	ldr	r3, [pc, #188]	; (800b0f4 <USBD_SetConfig+0x148>)
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d112      	bne.n	800b062 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2202      	movs	r2, #2
 800b040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b044:	4b2b      	ldr	r3, [pc, #172]	; (800b0f4 <USBD_SetConfig+0x148>)
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	461a      	mov	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b04e:	4b29      	ldr	r3, [pc, #164]	; (800b0f4 <USBD_SetConfig+0x148>)
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	4619      	mov	r1, r3
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7ff f911 	bl	800a27c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f9f1 	bl	800b442 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b060:	e042      	b.n	800b0e8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b062:	4b24      	ldr	r3, [pc, #144]	; (800b0f4 <USBD_SetConfig+0x148>)
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	461a      	mov	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d02a      	beq.n	800b0c6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	b2db      	uxtb	r3, r3
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f7ff f8ff 	bl	800a27c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b07e:	4b1d      	ldr	r3, [pc, #116]	; (800b0f4 <USBD_SetConfig+0x148>)
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	461a      	mov	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b088:	4b1a      	ldr	r3, [pc, #104]	; (800b0f4 <USBD_SetConfig+0x148>)
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	4619      	mov	r1, r3
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7ff f8d8 	bl	800a244 <USBD_SetClassConfig>
 800b094:	4603      	mov	r3, r0
 800b096:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b098:	7bfb      	ldrb	r3, [r7, #15]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00f      	beq.n	800b0be <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 f903 	bl	800b2ac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff f8e4 	bl	800a27c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2202      	movs	r2, #2
 800b0b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b0bc:	e014      	b.n	800b0e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f9bf 	bl	800b442 <USBD_CtlSendStatus>
      break;
 800b0c4:	e010      	b.n	800b0e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f9bb 	bl	800b442 <USBD_CtlSendStatus>
      break;
 800b0cc:	e00c      	b.n	800b0e8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 f8eb 	bl	800b2ac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0d6:	4b07      	ldr	r3, [pc, #28]	; (800b0f4 <USBD_SetConfig+0x148>)
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	4619      	mov	r1, r3
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f7ff f8cd 	bl	800a27c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b0e6:	bf00      	nop
  }

  return ret;
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	200001d8 	.word	0x200001d8

0800b0f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	88db      	ldrh	r3, [r3, #6]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d004      	beq.n	800b114 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 f8cd 	bl	800b2ac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b112:	e023      	b.n	800b15c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	dc02      	bgt.n	800b126 <USBD_GetConfig+0x2e>
 800b120:	2b00      	cmp	r3, #0
 800b122:	dc03      	bgt.n	800b12c <USBD_GetConfig+0x34>
 800b124:	e015      	b.n	800b152 <USBD_GetConfig+0x5a>
 800b126:	2b03      	cmp	r3, #3
 800b128:	d00b      	beq.n	800b142 <USBD_GetConfig+0x4a>
 800b12a:	e012      	b.n	800b152 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	3308      	adds	r3, #8
 800b136:	2201      	movs	r2, #1
 800b138:	4619      	mov	r1, r3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 f927 	bl	800b38e <USBD_CtlSendData>
        break;
 800b140:	e00c      	b.n	800b15c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	3304      	adds	r3, #4
 800b146:	2201      	movs	r2, #1
 800b148:	4619      	mov	r1, r3
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f91f 	bl	800b38e <USBD_CtlSendData>
        break;
 800b150:	e004      	b.n	800b15c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f8a9 	bl	800b2ac <USBD_CtlError>
        break;
 800b15a:	bf00      	nop
}
 800b15c:	bf00      	nop
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b174:	b2db      	uxtb	r3, r3
 800b176:	3b01      	subs	r3, #1
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d81e      	bhi.n	800b1ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	88db      	ldrh	r3, [r3, #6]
 800b180:	2b02      	cmp	r3, #2
 800b182:	d004      	beq.n	800b18e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 f890 	bl	800b2ac <USBD_CtlError>
        break;
 800b18c:	e01a      	b.n	800b1c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2201      	movs	r2, #1
 800b192:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d005      	beq.n	800b1aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	f043 0202 	orr.w	r2, r3, #2
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	330c      	adds	r3, #12
 800b1ae:	2202      	movs	r2, #2
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f8eb 	bl	800b38e <USBD_CtlSendData>
      break;
 800b1b8:	e004      	b.n	800b1c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 f875 	bl	800b2ac <USBD_CtlError>
      break;
 800b1c2:	bf00      	nop
  }
}
 800b1c4:	bf00      	nop
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	885b      	ldrh	r3, [r3, #2]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d106      	bne.n	800b1ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 f92b 	bl	800b442 <USBD_CtlSendStatus>
  }
}
 800b1ec:	bf00      	nop
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b204:	b2db      	uxtb	r3, r3
 800b206:	3b01      	subs	r3, #1
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d80b      	bhi.n	800b224 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	885b      	ldrh	r3, [r3, #2]
 800b210:	2b01      	cmp	r3, #1
 800b212:	d10c      	bne.n	800b22e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f910 	bl	800b442 <USBD_CtlSendStatus>
      }
      break;
 800b222:	e004      	b.n	800b22e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f840 	bl	800b2ac <USBD_CtlError>
      break;
 800b22c:	e000      	b.n	800b230 <USBD_ClrFeature+0x3c>
      break;
 800b22e:	bf00      	nop
  }
}
 800b230:	bf00      	nop
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	781a      	ldrb	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3301      	adds	r3, #1
 800b252:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	781a      	ldrb	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	3301      	adds	r3, #1
 800b260:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b262:	68f8      	ldr	r0, [r7, #12]
 800b264:	f7ff fa91 	bl	800a78a <SWAPBYTE>
 800b268:	4603      	mov	r3, r0
 800b26a:	461a      	mov	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	3301      	adds	r3, #1
 800b274:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3301      	adds	r3, #1
 800b27a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f7ff fa84 	bl	800a78a <SWAPBYTE>
 800b282:	4603      	mov	r3, r0
 800b284:	461a      	mov	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	3301      	adds	r3, #1
 800b28e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	3301      	adds	r3, #1
 800b294:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f7ff fa77 	bl	800a78a <SWAPBYTE>
 800b29c:	4603      	mov	r3, r0
 800b29e:	461a      	mov	r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	80da      	strh	r2, [r3, #6]
}
 800b2a4:	bf00      	nop
 800b2a6:	3710      	adds	r7, #16
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2b6:	2180      	movs	r1, #128	; 0x80
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 fda7 	bl	800be0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b2be:	2100      	movs	r1, #0
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 fda3 	bl	800be0c <USBD_LL_StallEP>
}
 800b2c6:	bf00      	nop
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b086      	sub	sp, #24
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	60f8      	str	r0, [r7, #12]
 800b2d6:	60b9      	str	r1, [r7, #8]
 800b2d8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d036      	beq.n	800b352 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b2e8:	6938      	ldr	r0, [r7, #16]
 800b2ea:	f000 f836 	bl	800b35a <USBD_GetLen>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	005b      	lsls	r3, r3, #1
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b2fc:	7dfb      	ldrb	r3, [r7, #23]
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	4413      	add	r3, r2
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	7812      	ldrb	r2, [r2, #0]
 800b306:	701a      	strb	r2, [r3, #0]
  idx++;
 800b308:	7dfb      	ldrb	r3, [r7, #23]
 800b30a:	3301      	adds	r3, #1
 800b30c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b30e:	7dfb      	ldrb	r3, [r7, #23]
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	4413      	add	r3, r2
 800b314:	2203      	movs	r2, #3
 800b316:	701a      	strb	r2, [r3, #0]
  idx++;
 800b318:	7dfb      	ldrb	r3, [r7, #23]
 800b31a:	3301      	adds	r3, #1
 800b31c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b31e:	e013      	b.n	800b348 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b320:	7dfb      	ldrb	r3, [r7, #23]
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	4413      	add	r3, r2
 800b326:	693a      	ldr	r2, [r7, #16]
 800b328:	7812      	ldrb	r2, [r2, #0]
 800b32a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	3301      	adds	r3, #1
 800b330:	613b      	str	r3, [r7, #16]
    idx++;
 800b332:	7dfb      	ldrb	r3, [r7, #23]
 800b334:	3301      	adds	r3, #1
 800b336:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b338:	7dfb      	ldrb	r3, [r7, #23]
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	4413      	add	r3, r2
 800b33e:	2200      	movs	r2, #0
 800b340:	701a      	strb	r2, [r3, #0]
    idx++;
 800b342:	7dfb      	ldrb	r3, [r7, #23]
 800b344:	3301      	adds	r3, #1
 800b346:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1e7      	bne.n	800b320 <USBD_GetString+0x52>
 800b350:	e000      	b.n	800b354 <USBD_GetString+0x86>
    return;
 800b352:	bf00      	nop
  }
}
 800b354:	3718      	adds	r7, #24
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b085      	sub	sp, #20
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b362:	2300      	movs	r3, #0
 800b364:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b36a:	e005      	b.n	800b378 <USBD_GetLen+0x1e>
  {
    len++;
 800b36c:	7bfb      	ldrb	r3, [r7, #15]
 800b36e:	3301      	adds	r3, #1
 800b370:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	3301      	adds	r3, #1
 800b376:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1f5      	bne.n	800b36c <USBD_GetLen+0x12>
  }

  return len;
 800b380:	7bfb      	ldrb	r3, [r7, #15]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b084      	sub	sp, #16
 800b392:	af00      	add	r7, sp, #0
 800b394:	60f8      	str	r0, [r7, #12]
 800b396:	60b9      	str	r1, [r7, #8]
 800b398:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2202      	movs	r2, #2
 800b39e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	2100      	movs	r1, #0
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f000 fdf7 	bl	800bfa8 <USBD_LL_Transmit>

  return USBD_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f000 fde6 	bl	800bfa8 <USBD_LL_Transmit>

  return USBD_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b084      	sub	sp, #16
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	60f8      	str	r0, [r7, #12]
 800b3ee:	60b9      	str	r1, [r7, #8]
 800b3f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2203      	movs	r2, #3
 800b3f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	2100      	movs	r1, #0
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f000 fe01 	bl	800c018 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	68ba      	ldr	r2, [r7, #8]
 800b430:	2100      	movs	r1, #0
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	f000 fdf0 	bl	800c018 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}

0800b442 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b442:	b580      	push	{r7, lr}
 800b444:	b082      	sub	sp, #8
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2204      	movs	r2, #4
 800b44e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b452:	2300      	movs	r3, #0
 800b454:	2200      	movs	r2, #0
 800b456:	2100      	movs	r1, #0
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 fda5 	bl	800bfa8 <USBD_LL_Transmit>

  return USBD_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2205      	movs	r2, #5
 800b474:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b478:	2300      	movs	r3, #0
 800b47a:	2200      	movs	r2, #0
 800b47c:	2100      	movs	r1, #0
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fdca 	bl	800c018 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
	...

0800b490 <LMS6DSO_WriteReg>:


	return HAL_OK;
}

HAL_StatusTypeDef LMS6DSO_WriteReg(uint8_t address, uint8_t *pTxData, uint16_t dataSize, uint32_t timeout){
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	60b9      	str	r1, [r7, #8]
 800b498:	607b      	str	r3, [r7, #4]
 800b49a:	4603      	mov	r3, r0
 800b49c:	73fb      	strb	r3, [r7, #15]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	81bb      	strh	r3, [r7, #12]
	/* Activate chip select */
	HAL_GPIO_WritePin(CS_LSM6DSOX_GPIO_Port, CS_LSM6DSOX_Pin, GPIO_PIN_RESET);
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b4a8:	480a      	ldr	r0, [pc, #40]	; (800b4d4 <LMS6DSO_WriteReg+0x44>)
 800b4aa:	f7f7 fe37 	bl	800311c <HAL_GPIO_WritePin>
	HAL_StatusTypeDef retVal = HAL_SPI_Transmit(&hspi1, pTxData, dataSize, timeout);
 800b4ae:	89ba      	ldrh	r2, [r7, #12]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	68b9      	ldr	r1, [r7, #8]
 800b4b4:	4808      	ldr	r0, [pc, #32]	; (800b4d8 <LMS6DSO_WriteReg+0x48>)
 800b4b6:	f7fb fbdc 	bl	8006c72 <HAL_SPI_Transmit>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	75fb      	strb	r3, [r7, #23]
	/* Reset chip select */
	HAL_GPIO_WritePin(CS_LSM6DSOX_GPIO_Port, CS_LSM6DSOX_Pin, GPIO_PIN_SET);
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b4c4:	4803      	ldr	r0, [pc, #12]	; (800b4d4 <LMS6DSO_WriteReg+0x44>)
 800b4c6:	f7f7 fe29 	bl	800311c <HAL_GPIO_WritePin>
	return retVal;
 800b4ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3718      	adds	r7, #24
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	48001000 	.word	0x48001000
 800b4d8:	20000768 	.word	0x20000768

0800b4dc <LMS6DSO_Init>:
	HAL_GPIO_WritePin(CS_LSM6DSOX_GPIO_Port, CS_LSM6DSOX_Pin, GPIO_PIN_SET);
	return retVal;
}

// Initialization of 3D ACC+GYRO LSM6DSO
void LMS6DSO_Init(struct LSM6DSO lsm6){
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
	// Start-up the accelerometer and gyro in the specified mode
	uint8_t pTxData = 0x10;
 800b4e4:	2310      	movs	r3, #16
 800b4e6:	73fb      	strb	r3, [r7, #15]
	// Set to normal mode
	LMS6DSO_WriteReg(CTRL6_C, (uint8_t *)&pTxData, 1, 100);
 800b4e8:	f107 010f 	add.w	r1, r7, #15
 800b4ec:	2364      	movs	r3, #100	; 0x64
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	2015      	movs	r0, #21
 800b4f2:	f7ff ffcd 	bl	800b490 <LMS6DSO_WriteReg>
	// Set to normal operating mode and full scale
	pTxData = lsm6.acc.operatingMode | lsm6.acc.fullScale;
 800b4f6:	793a      	ldrb	r2, [r7, #4]
 800b4f8:	797b      	ldrb	r3, [r7, #5]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	73fb      	strb	r3, [r7, #15]
	LMS6DSO_WriteReg(CTRL1_XL, (uint8_t *)&pTxData, 1, 100);
 800b500:	f107 010f 	add.w	r1, r7, #15
 800b504:	2364      	movs	r3, #100	; 0x64
 800b506:	2201      	movs	r2, #1
 800b508:	2010      	movs	r0, #16
 800b50a:	f7ff ffc1 	bl	800b490 <LMS6DSO_WriteReg>
	// Set to normal mode
	pTxData = 0x80;
 800b50e:	2380      	movs	r3, #128	; 0x80
 800b510:	73fb      	strb	r3, [r7, #15]
	LMS6DSO_WriteReg(CTRL7_G, (uint8_t *)&pTxData, 1, 100);
 800b512:	f107 010f 	add.w	r1, r7, #15
 800b516:	2364      	movs	r3, #100	; 0x64
 800b518:	2201      	movs	r2, #1
 800b51a:	2016      	movs	r0, #22
 800b51c:	f7ff ffb8 	bl	800b490 <LMS6DSO_WriteReg>
	pTxData = lsm6.gyro.operatingMode | lsm6.gyro.fullScale;
 800b520:	79ba      	ldrb	r2, [r7, #6]
 800b522:	79fb      	ldrb	r3, [r7, #7]
 800b524:	4313      	orrs	r3, r2
 800b526:	b2db      	uxtb	r3, r3
 800b528:	73fb      	strb	r3, [r7, #15]
	LMS6DSO_WriteReg(CTRL2_G, (uint8_t *)&pTxData, 1, 100);
 800b52a:	f107 010f 	add.w	r1, r7, #15
 800b52e:	2364      	movs	r3, #100	; 0x64
 800b530:	2201      	movs	r2, #1
 800b532:	2011      	movs	r0, #17
 800b534:	f7ff ffac 	bl	800b490 <LMS6DSO_WriteReg>
	return;
 800b538:	bf00      	nop
}
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b544:	2200      	movs	r2, #0
 800b546:	4912      	ldr	r1, [pc, #72]	; (800b590 <MX_USB_DEVICE_Init+0x50>)
 800b548:	4812      	ldr	r0, [pc, #72]	; (800b594 <MX_USB_DEVICE_Init+0x54>)
 800b54a:	f7fe fe0d 	bl	800a168 <USBD_Init>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d001      	beq.n	800b558 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b554:	f7f5 fbea 	bl	8000d2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b558:	490f      	ldr	r1, [pc, #60]	; (800b598 <MX_USB_DEVICE_Init+0x58>)
 800b55a:	480e      	ldr	r0, [pc, #56]	; (800b594 <MX_USB_DEVICE_Init+0x54>)
 800b55c:	f7fe fe34 	bl	800a1c8 <USBD_RegisterClass>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d001      	beq.n	800b56a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b566:	f7f5 fbe1 	bl	8000d2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b56a:	490c      	ldr	r1, [pc, #48]	; (800b59c <MX_USB_DEVICE_Init+0x5c>)
 800b56c:	4809      	ldr	r0, [pc, #36]	; (800b594 <MX_USB_DEVICE_Init+0x54>)
 800b56e:	f7fe fd85 	bl	800a07c <USBD_CDC_RegisterInterface>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d001      	beq.n	800b57c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b578:	f7f5 fbd8 	bl	8000d2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b57c:	4805      	ldr	r0, [pc, #20]	; (800b594 <MX_USB_DEVICE_Init+0x54>)
 800b57e:	f7fe fe4a 	bl	800a216 <USBD_Start>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d001      	beq.n	800b58c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b588:	f7f5 fbd0 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b58c:	bf00      	nop
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	20000130 	.word	0x20000130
 800b594:	200008b4 	.word	0x200008b4
 800b598:	20000018 	.word	0x20000018
 800b59c:	2000011c 	.word	0x2000011c

0800b5a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	4905      	ldr	r1, [pc, #20]	; (800b5bc <CDC_Init_FS+0x1c>)
 800b5a8:	4805      	ldr	r0, [pc, #20]	; (800b5c0 <CDC_Init_FS+0x20>)
 800b5aa:	f7fe fd7c 	bl	800a0a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b5ae:	4905      	ldr	r1, [pc, #20]	; (800b5c4 <CDC_Init_FS+0x24>)
 800b5b0:	4803      	ldr	r0, [pc, #12]	; (800b5c0 <CDC_Init_FS+0x20>)
 800b5b2:	f7fe fd96 	bl	800a0e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b5b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	20001384 	.word	0x20001384
 800b5c0:	200008b4 	.word	0x200008b4
 800b5c4:	20000b84 	.word	0x20000b84

0800b5c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b5cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	4603      	mov	r3, r0
 800b5e0:	6039      	str	r1, [r7, #0]
 800b5e2:	71fb      	strb	r3, [r7, #7]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b5e8:	79fb      	ldrb	r3, [r7, #7]
 800b5ea:	2b23      	cmp	r3, #35	; 0x23
 800b5ec:	d84a      	bhi.n	800b684 <CDC_Control_FS+0xac>
 800b5ee:	a201      	add	r2, pc, #4	; (adr r2, 800b5f4 <CDC_Control_FS+0x1c>)
 800b5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f4:	0800b685 	.word	0x0800b685
 800b5f8:	0800b685 	.word	0x0800b685
 800b5fc:	0800b685 	.word	0x0800b685
 800b600:	0800b685 	.word	0x0800b685
 800b604:	0800b685 	.word	0x0800b685
 800b608:	0800b685 	.word	0x0800b685
 800b60c:	0800b685 	.word	0x0800b685
 800b610:	0800b685 	.word	0x0800b685
 800b614:	0800b685 	.word	0x0800b685
 800b618:	0800b685 	.word	0x0800b685
 800b61c:	0800b685 	.word	0x0800b685
 800b620:	0800b685 	.word	0x0800b685
 800b624:	0800b685 	.word	0x0800b685
 800b628:	0800b685 	.word	0x0800b685
 800b62c:	0800b685 	.word	0x0800b685
 800b630:	0800b685 	.word	0x0800b685
 800b634:	0800b685 	.word	0x0800b685
 800b638:	0800b685 	.word	0x0800b685
 800b63c:	0800b685 	.word	0x0800b685
 800b640:	0800b685 	.word	0x0800b685
 800b644:	0800b685 	.word	0x0800b685
 800b648:	0800b685 	.word	0x0800b685
 800b64c:	0800b685 	.word	0x0800b685
 800b650:	0800b685 	.word	0x0800b685
 800b654:	0800b685 	.word	0x0800b685
 800b658:	0800b685 	.word	0x0800b685
 800b65c:	0800b685 	.word	0x0800b685
 800b660:	0800b685 	.word	0x0800b685
 800b664:	0800b685 	.word	0x0800b685
 800b668:	0800b685 	.word	0x0800b685
 800b66c:	0800b685 	.word	0x0800b685
 800b670:	0800b685 	.word	0x0800b685
 800b674:	0800b685 	.word	0x0800b685
 800b678:	0800b685 	.word	0x0800b685
 800b67c:	0800b685 	.word	0x0800b685
 800b680:	0800b685 	.word	0x0800b685
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b684:	bf00      	nop
  }

  return (USBD_OK);
 800b686:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b688:	4618      	mov	r0, r3
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b69e:	6879      	ldr	r1, [r7, #4]
 800b6a0:	4805      	ldr	r0, [pc, #20]	; (800b6b8 <CDC_Receive_FS+0x24>)
 800b6a2:	f7fe fd1e 	bl	800a0e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b6a6:	4804      	ldr	r0, [pc, #16]	; (800b6b8 <CDC_Receive_FS+0x24>)
 800b6a8:	f7fe fd34 	bl	800a114 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b6ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	200008b4 	.word	0x200008b4

0800b6bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b087      	sub	sp, #28
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b6ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	371c      	adds	r7, #28
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
	...

0800b6e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	6039      	str	r1, [r7, #0]
 800b6ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	2212      	movs	r2, #18
 800b6f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b6f2:	4b03      	ldr	r3, [pc, #12]	; (800b700 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	20000150 	.word	0x20000150

0800b704 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	6039      	str	r1, [r7, #0]
 800b70e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	2204      	movs	r2, #4
 800b714:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b716:	4b03      	ldr	r3, [pc, #12]	; (800b724 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b718:	4618      	mov	r0, r3
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr
 800b724:	20000170 	.word	0x20000170

0800b728 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	4603      	mov	r3, r0
 800b730:	6039      	str	r1, [r7, #0]
 800b732:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b734:	79fb      	ldrb	r3, [r7, #7]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d105      	bne.n	800b746 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b73a:	683a      	ldr	r2, [r7, #0]
 800b73c:	4907      	ldr	r1, [pc, #28]	; (800b75c <USBD_FS_ProductStrDescriptor+0x34>)
 800b73e:	4808      	ldr	r0, [pc, #32]	; (800b760 <USBD_FS_ProductStrDescriptor+0x38>)
 800b740:	f7ff fdc5 	bl	800b2ce <USBD_GetString>
 800b744:	e004      	b.n	800b750 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	4904      	ldr	r1, [pc, #16]	; (800b75c <USBD_FS_ProductStrDescriptor+0x34>)
 800b74a:	4805      	ldr	r0, [pc, #20]	; (800b760 <USBD_FS_ProductStrDescriptor+0x38>)
 800b74c:	f7ff fdbf 	bl	800b2ce <USBD_GetString>
  }
  return USBD_StrDesc;
 800b750:	4b02      	ldr	r3, [pc, #8]	; (800b75c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b752:	4618      	mov	r0, r3
 800b754:	3708      	adds	r7, #8
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	20001b84 	.word	0x20001b84
 800b760:	0800c1f8 	.word	0x0800c1f8

0800b764 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	4603      	mov	r3, r0
 800b76c:	6039      	str	r1, [r7, #0]
 800b76e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	4904      	ldr	r1, [pc, #16]	; (800b784 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b774:	4804      	ldr	r0, [pc, #16]	; (800b788 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b776:	f7ff fdaa 	bl	800b2ce <USBD_GetString>
  return USBD_StrDesc;
 800b77a:	4b02      	ldr	r3, [pc, #8]	; (800b784 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3708      	adds	r7, #8
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	20001b84 	.word	0x20001b84
 800b788:	0800c210 	.word	0x0800c210

0800b78c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	4603      	mov	r3, r0
 800b794:	6039      	str	r1, [r7, #0]
 800b796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	221a      	movs	r2, #26
 800b79c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b79e:	f000 f855 	bl	800b84c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b7a2:	4b02      	ldr	r3, [pc, #8]	; (800b7ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	20000174 	.word	0x20000174

0800b7b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	6039      	str	r1, [r7, #0]
 800b7ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b7bc:	79fb      	ldrb	r3, [r7, #7]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d105      	bne.n	800b7ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	4907      	ldr	r1, [pc, #28]	; (800b7e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7c6:	4808      	ldr	r0, [pc, #32]	; (800b7e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7c8:	f7ff fd81 	bl	800b2ce <USBD_GetString>
 800b7cc:	e004      	b.n	800b7d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7ce:	683a      	ldr	r2, [r7, #0]
 800b7d0:	4904      	ldr	r1, [pc, #16]	; (800b7e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7d2:	4805      	ldr	r0, [pc, #20]	; (800b7e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7d4:	f7ff fd7b 	bl	800b2ce <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7d8:	4b02      	ldr	r3, [pc, #8]	; (800b7e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3708      	adds	r7, #8
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20001b84 	.word	0x20001b84
 800b7e8:	0800c224 	.word	0x0800c224

0800b7ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	6039      	str	r1, [r7, #0]
 800b7f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7f8:	79fb      	ldrb	r3, [r7, #7]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d105      	bne.n	800b80a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	4907      	ldr	r1, [pc, #28]	; (800b820 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b802:	4808      	ldr	r0, [pc, #32]	; (800b824 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b804:	f7ff fd63 	bl	800b2ce <USBD_GetString>
 800b808:	e004      	b.n	800b814 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	4904      	ldr	r1, [pc, #16]	; (800b820 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b80e:	4805      	ldr	r0, [pc, #20]	; (800b824 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b810:	f7ff fd5d 	bl	800b2ce <USBD_GetString>
  }
  return USBD_StrDesc;
 800b814:	4b02      	ldr	r3, [pc, #8]	; (800b820 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b816:	4618      	mov	r0, r3
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	20001b84 	.word	0x20001b84
 800b824:	0800c230 	.word	0x0800c230

0800b828 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	4603      	mov	r3, r0
 800b830:	6039      	str	r1, [r7, #0]
 800b832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	220c      	movs	r2, #12
 800b838:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b83a:	4b03      	ldr	r3, [pc, #12]	; (800b848 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr
 800b848:	20000164 	.word	0x20000164

0800b84c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b852:	4b0f      	ldr	r3, [pc, #60]	; (800b890 <Get_SerialNum+0x44>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b858:	4b0e      	ldr	r3, [pc, #56]	; (800b894 <Get_SerialNum+0x48>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b85e:	4b0e      	ldr	r3, [pc, #56]	; (800b898 <Get_SerialNum+0x4c>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4413      	add	r3, r2
 800b86a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d009      	beq.n	800b886 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b872:	2208      	movs	r2, #8
 800b874:	4909      	ldr	r1, [pc, #36]	; (800b89c <Get_SerialNum+0x50>)
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f000 f814 	bl	800b8a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b87c:	2204      	movs	r2, #4
 800b87e:	4908      	ldr	r1, [pc, #32]	; (800b8a0 <Get_SerialNum+0x54>)
 800b880:	68b8      	ldr	r0, [r7, #8]
 800b882:	f000 f80f 	bl	800b8a4 <IntToUnicode>
  }
}
 800b886:	bf00      	nop
 800b888:	3710      	adds	r7, #16
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	1fff7590 	.word	0x1fff7590
 800b894:	1fff7594 	.word	0x1fff7594
 800b898:	1fff7598 	.word	0x1fff7598
 800b89c:	20000176 	.word	0x20000176
 800b8a0:	20000186 	.word	0x20000186

0800b8a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b087      	sub	sp, #28
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	4613      	mov	r3, r2
 800b8b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	75fb      	strb	r3, [r7, #23]
 800b8ba:	e027      	b.n	800b90c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	0f1b      	lsrs	r3, r3, #28
 800b8c0:	2b09      	cmp	r3, #9
 800b8c2:	d80b      	bhi.n	800b8dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	0f1b      	lsrs	r3, r3, #28
 800b8c8:	b2da      	uxtb	r2, r3
 800b8ca:	7dfb      	ldrb	r3, [r7, #23]
 800b8cc:	005b      	lsls	r3, r3, #1
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	440b      	add	r3, r1
 800b8d4:	3230      	adds	r2, #48	; 0x30
 800b8d6:	b2d2      	uxtb	r2, r2
 800b8d8:	701a      	strb	r2, [r3, #0]
 800b8da:	e00a      	b.n	800b8f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	0f1b      	lsrs	r3, r3, #28
 800b8e0:	b2da      	uxtb	r2, r3
 800b8e2:	7dfb      	ldrb	r3, [r7, #23]
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	440b      	add	r3, r1
 800b8ec:	3237      	adds	r2, #55	; 0x37
 800b8ee:	b2d2      	uxtb	r2, r2
 800b8f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	011b      	lsls	r3, r3, #4
 800b8f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b8f8:	7dfb      	ldrb	r3, [r7, #23]
 800b8fa:	005b      	lsls	r3, r3, #1
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	4413      	add	r3, r2
 800b902:	2200      	movs	r2, #0
 800b904:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b906:	7dfb      	ldrb	r3, [r7, #23]
 800b908:	3301      	adds	r3, #1
 800b90a:	75fb      	strb	r3, [r7, #23]
 800b90c:	7dfa      	ldrb	r2, [r7, #23]
 800b90e:	79fb      	ldrb	r3, [r7, #7]
 800b910:	429a      	cmp	r2, r3
 800b912:	d3d3      	bcc.n	800b8bc <IntToUnicode+0x18>
  }
}
 800b914:	bf00      	nop
 800b916:	bf00      	nop
 800b918:	371c      	adds	r7, #28
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
	...

0800b924 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b0b2      	sub	sp, #200	; 0xc8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b92c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800b930:	2200      	movs	r2, #0
 800b932:	601a      	str	r2, [r3, #0]
 800b934:	605a      	str	r2, [r3, #4]
 800b936:	609a      	str	r2, [r3, #8]
 800b938:	60da      	str	r2, [r3, #12]
 800b93a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b93c:	f107 0318 	add.w	r3, r7, #24
 800b940:	229c      	movs	r2, #156	; 0x9c
 800b942:	2100      	movs	r1, #0
 800b944:	4618      	mov	r0, r3
 800b946:	f000 fc43 	bl	800c1d0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b952:	d163      	bne.n	800ba1c <HAL_PCD_MspInit+0xf8>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b958:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b95a:	2300      	movs	r3, #0
 800b95c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b960:	f107 0318 	add.w	r3, r7, #24
 800b964:	4618      	mov	r0, r3
 800b966:	f7f9 fe71 	bl	800564c <HAL_RCCEx_PeriphCLKConfig>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d001      	beq.n	800b974 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800b970:	f7f5 f9dc 	bl	8000d2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b974:	4b2b      	ldr	r3, [pc, #172]	; (800ba24 <HAL_PCD_MspInit+0x100>)
 800b976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b978:	4a2a      	ldr	r2, [pc, #168]	; (800ba24 <HAL_PCD_MspInit+0x100>)
 800b97a:	f043 0301 	orr.w	r3, r3, #1
 800b97e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b980:	4b28      	ldr	r3, [pc, #160]	; (800ba24 <HAL_PCD_MspInit+0x100>)
 800b982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b984:	f003 0301 	and.w	r3, r3, #1
 800b988:	617b      	str	r3, [r7, #20]
 800b98a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_DP_Pin|USB_OTG_DM_Pin;
 800b98c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b994:	2302      	movs	r3, #2
 800b996:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b99a:	2300      	movs	r3, #0
 800b99c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b9a6:	230a      	movs	r3, #10
 800b9a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b9b6:	f7f7 fa1f 	bl	8002df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b9ba:	4b1a      	ldr	r3, [pc, #104]	; (800ba24 <HAL_PCD_MspInit+0x100>)
 800b9bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9be:	4a19      	ldr	r2, [pc, #100]	; (800ba24 <HAL_PCD_MspInit+0x100>)
 800b9c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b9c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b9c6:	4b17      	ldr	r3, [pc, #92]	; (800ba24 <HAL_PCD_MspInit+0x100>)
 800b9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b9ce:	613b      	str	r3, [r7, #16]
 800b9d0:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b9d2:	4b14      	ldr	r3, [pc, #80]	; (800ba24 <HAL_PCD_MspInit+0x100>)
 800b9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d114      	bne.n	800ba08 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b9de:	4b11      	ldr	r3, [pc, #68]	; (800ba24 <HAL_PCD_MspInit+0x100>)
 800b9e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9e2:	4a10      	ldr	r2, [pc, #64]	; (800ba24 <HAL_PCD_MspInit+0x100>)
 800b9e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9e8:	6593      	str	r3, [r2, #88]	; 0x58
 800b9ea:	4b0e      	ldr	r3, [pc, #56]	; (800ba24 <HAL_PCD_MspInit+0x100>)
 800b9ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9f2:	60fb      	str	r3, [r7, #12]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800b9f6:	f7f8 ff63 	bl	80048c0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b9fa:	4b0a      	ldr	r3, [pc, #40]	; (800ba24 <HAL_PCD_MspInit+0x100>)
 800b9fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9fe:	4a09      	ldr	r2, [pc, #36]	; (800ba24 <HAL_PCD_MspInit+0x100>)
 800ba00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba04:	6593      	str	r3, [r2, #88]	; 0x58
 800ba06:	e001      	b.n	800ba0c <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800ba08:	f7f8 ff5a 	bl	80048c0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	2100      	movs	r1, #0
 800ba10:	2043      	movs	r0, #67	; 0x43
 800ba12:	f7f6 fdd4 	bl	80025be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ba16:	2043      	movs	r0, #67	; 0x43
 800ba18:	f7f6 fded 	bl	80025f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ba1c:	bf00      	nop
 800ba1e:	37c8      	adds	r7, #200	; 0xc8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	40021000 	.word	0x40021000

0800ba28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	4610      	mov	r0, r2
 800ba40:	f7fe fc34 	bl	800a2ac <USBD_LL_SetupStage>
}
 800ba44:	bf00      	nop
 800ba46:	3708      	adds	r7, #8
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	460b      	mov	r3, r1
 800ba56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ba5e:	78fa      	ldrb	r2, [r7, #3]
 800ba60:	6879      	ldr	r1, [r7, #4]
 800ba62:	4613      	mov	r3, r2
 800ba64:	00db      	lsls	r3, r3, #3
 800ba66:	4413      	add	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	440b      	add	r3, r1
 800ba6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	78fb      	ldrb	r3, [r7, #3]
 800ba74:	4619      	mov	r1, r3
 800ba76:	f7fe fc6e 	bl	800a356 <USBD_LL_DataOutStage>
}
 800ba7a:	bf00      	nop
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b082      	sub	sp, #8
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ba94:	78fa      	ldrb	r2, [r7, #3]
 800ba96:	6879      	ldr	r1, [r7, #4]
 800ba98:	4613      	mov	r3, r2
 800ba9a:	00db      	lsls	r3, r3, #3
 800ba9c:	4413      	add	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	440b      	add	r3, r1
 800baa2:	334c      	adds	r3, #76	; 0x4c
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	78fb      	ldrb	r3, [r7, #3]
 800baa8:	4619      	mov	r1, r3
 800baaa:	f7fe fcb7 	bl	800a41c <USBD_LL_DataInStage>
}
 800baae:	bf00      	nop
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b082      	sub	sp, #8
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7fe fdcb 	bl	800a660 <USBD_LL_SOF>
}
 800baca:	bf00      	nop
 800bacc:	3708      	adds	r7, #8
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b084      	sub	sp, #16
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bada:	2301      	movs	r3, #1
 800badc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	2b02      	cmp	r3, #2
 800bae4:	d001      	beq.n	800baea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bae6:	f7f5 f921 	bl	8000d2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800baf0:	7bfa      	ldrb	r2, [r7, #15]
 800baf2:	4611      	mov	r1, r2
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fe fd75 	bl	800a5e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fe fd21 	bl	800a548 <USBD_LL_Reset>
}
 800bb06:	bf00      	nop
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
	...

0800bb10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	6812      	ldr	r2, [r2, #0]
 800bb26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb2a:	f043 0301 	orr.w	r3, r3, #1
 800bb2e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fe fd64 	bl	800a604 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6a1b      	ldr	r3, [r3, #32]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d005      	beq.n	800bb50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb44:	4b04      	ldr	r3, [pc, #16]	; (800bb58 <HAL_PCD_SuspendCallback+0x48>)
 800bb46:	691b      	ldr	r3, [r3, #16]
 800bb48:	4a03      	ldr	r2, [pc, #12]	; (800bb58 <HAL_PCD_SuspendCallback+0x48>)
 800bb4a:	f043 0306 	orr.w	r3, r3, #6
 800bb4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bb50:	bf00      	nop
 800bb52:	3708      	adds	r7, #8
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	e000ed00 	.word	0xe000ed00

0800bb5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	6812      	ldr	r2, [r2, #0]
 800bb72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb76:	f023 0301 	bic.w	r3, r3, #1
 800bb7a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6a1b      	ldr	r3, [r3, #32]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d007      	beq.n	800bb94 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb84:	4b08      	ldr	r3, [pc, #32]	; (800bba8 <HAL_PCD_ResumeCallback+0x4c>)
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	4a07      	ldr	r2, [pc, #28]	; (800bba8 <HAL_PCD_ResumeCallback+0x4c>)
 800bb8a:	f023 0306 	bic.w	r3, r3, #6
 800bb8e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bb90:	f000 faf4 	bl	800c17c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fe fd48 	bl	800a630 <USBD_LL_Resume>
}
 800bba0:	bf00      	nop
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	e000ed00 	.word	0xe000ed00

0800bbac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bbbe:	78fa      	ldrb	r2, [r7, #3]
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7fe fd94 	bl	800a6f0 <USBD_LL_IsoOUTIncomplete>
}
 800bbc8:	bf00      	nop
 800bbca:	3708      	adds	r7, #8
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	460b      	mov	r3, r1
 800bbda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bbe2:	78fa      	ldrb	r2, [r7, #3]
 800bbe4:	4611      	mov	r1, r2
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7fe fd5c 	bl	800a6a4 <USBD_LL_IsoINIncomplete>
}
 800bbec:	bf00      	nop
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7fe fd9a 	bl	800a73c <USBD_LL_DevConnected>
}
 800bc08:	bf00      	nop
 800bc0a:	3708      	adds	r7, #8
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fe fd97 	bl	800a752 <USBD_LL_DevDisconnected>
}
 800bc24:	bf00      	nop
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d139      	bne.n	800bcb0 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bc3c:	4a1f      	ldr	r2, [pc, #124]	; (800bcbc <USBD_LL_Init+0x90>)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4a1d      	ldr	r2, [pc, #116]	; (800bcbc <USBD_LL_Init+0x90>)
 800bc48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bc4c:	4b1b      	ldr	r3, [pc, #108]	; (800bcbc <USBD_LL_Init+0x90>)
 800bc4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bc52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bc54:	4b19      	ldr	r3, [pc, #100]	; (800bcbc <USBD_LL_Init+0x90>)
 800bc56:	2206      	movs	r2, #6
 800bc58:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bc5a:	4b18      	ldr	r3, [pc, #96]	; (800bcbc <USBD_LL_Init+0x90>)
 800bc5c:	2202      	movs	r2, #2
 800bc5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bc60:	4b16      	ldr	r3, [pc, #88]	; (800bcbc <USBD_LL_Init+0x90>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bc66:	4b15      	ldr	r3, [pc, #84]	; (800bcbc <USBD_LL_Init+0x90>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bc6c:	4b13      	ldr	r3, [pc, #76]	; (800bcbc <USBD_LL_Init+0x90>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800bc72:	4b12      	ldr	r3, [pc, #72]	; (800bcbc <USBD_LL_Init+0x90>)
 800bc74:	2201      	movs	r2, #1
 800bc76:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bc78:	4b10      	ldr	r3, [pc, #64]	; (800bcbc <USBD_LL_Init+0x90>)
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bc7e:	4b0f      	ldr	r3, [pc, #60]	; (800bcbc <USBD_LL_Init+0x90>)
 800bc80:	2200      	movs	r2, #0
 800bc82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bc84:	480d      	ldr	r0, [pc, #52]	; (800bcbc <USBD_LL_Init+0x90>)
 800bc86:	f7f7 fb87 	bl	8003398 <HAL_PCD_Init>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d001      	beq.n	800bc94 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800bc90:	f7f5 f84c 	bl	8000d2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bc94:	2180      	movs	r1, #128	; 0x80
 800bc96:	4809      	ldr	r0, [pc, #36]	; (800bcbc <USBD_LL_Init+0x90>)
 800bc98:	f7f8 fd09 	bl	80046ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bc9c:	2240      	movs	r2, #64	; 0x40
 800bc9e:	2100      	movs	r1, #0
 800bca0:	4806      	ldr	r0, [pc, #24]	; (800bcbc <USBD_LL_Init+0x90>)
 800bca2:	f7f8 fcbd 	bl	8004620 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bca6:	2280      	movs	r2, #128	; 0x80
 800bca8:	2101      	movs	r1, #1
 800bcaa:	4804      	ldr	r0, [pc, #16]	; (800bcbc <USBD_LL_Init+0x90>)
 800bcac:	f7f8 fcb8 	bl	8004620 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	20001d84 	.word	0x20001d84

0800bcc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bccc:	2300      	movs	r3, #0
 800bcce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7f7 fc82 	bl	80035e0 <HAL_PCD_Start>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bce0:	7bbb      	ldrb	r3, [r7, #14]
 800bce2:	2b03      	cmp	r3, #3
 800bce4:	d816      	bhi.n	800bd14 <USBD_LL_Start+0x54>
 800bce6:	a201      	add	r2, pc, #4	; (adr r2, 800bcec <USBD_LL_Start+0x2c>)
 800bce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcec:	0800bcfd 	.word	0x0800bcfd
 800bcf0:	0800bd03 	.word	0x0800bd03
 800bcf4:	0800bd09 	.word	0x0800bd09
 800bcf8:	0800bd0f 	.word	0x0800bd0f
    case HAL_OK :
      usb_status = USBD_OK;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	73fb      	strb	r3, [r7, #15]
    break;
 800bd00:	e00b      	b.n	800bd1a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd02:	2303      	movs	r3, #3
 800bd04:	73fb      	strb	r3, [r7, #15]
    break;
 800bd06:	e008      	b.n	800bd1a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd0c:	e005      	b.n	800bd1a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	73fb      	strb	r3, [r7, #15]
    break;
 800bd12:	e002      	b.n	800bd1a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800bd14:	2303      	movs	r3, #3
 800bd16:	73fb      	strb	r3, [r7, #15]
    break;
 800bd18:	bf00      	nop
  }
  return usb_status;
 800bd1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	4608      	mov	r0, r1
 800bd2e:	4611      	mov	r1, r2
 800bd30:	461a      	mov	r2, r3
 800bd32:	4603      	mov	r3, r0
 800bd34:	70fb      	strb	r3, [r7, #3]
 800bd36:	460b      	mov	r3, r1
 800bd38:	70bb      	strb	r3, [r7, #2]
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd42:	2300      	movs	r3, #0
 800bd44:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd4c:	78bb      	ldrb	r3, [r7, #2]
 800bd4e:	883a      	ldrh	r2, [r7, #0]
 800bd50:	78f9      	ldrb	r1, [r7, #3]
 800bd52:	f7f8 f92c 	bl	8003fae <HAL_PCD_EP_Open>
 800bd56:	4603      	mov	r3, r0
 800bd58:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd5a:	7bbb      	ldrb	r3, [r7, #14]
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	d817      	bhi.n	800bd90 <USBD_LL_OpenEP+0x6c>
 800bd60:	a201      	add	r2, pc, #4	; (adr r2, 800bd68 <USBD_LL_OpenEP+0x44>)
 800bd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd66:	bf00      	nop
 800bd68:	0800bd79 	.word	0x0800bd79
 800bd6c:	0800bd7f 	.word	0x0800bd7f
 800bd70:	0800bd85 	.word	0x0800bd85
 800bd74:	0800bd8b 	.word	0x0800bd8b
    case HAL_OK :
      usb_status = USBD_OK;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd7c:	e00b      	b.n	800bd96 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd7e:	2303      	movs	r3, #3
 800bd80:	73fb      	strb	r3, [r7, #15]
    break;
 800bd82:	e008      	b.n	800bd96 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd84:	2301      	movs	r3, #1
 800bd86:	73fb      	strb	r3, [r7, #15]
    break;
 800bd88:	e005      	b.n	800bd96 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd8a:	2303      	movs	r3, #3
 800bd8c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd8e:	e002      	b.n	800bd96 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800bd90:	2303      	movs	r3, #3
 800bd92:	73fb      	strb	r3, [r7, #15]
    break;
 800bd94:	bf00      	nop
  }
  return usb_status;
 800bd96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3710      	adds	r7, #16
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdac:	2300      	movs	r3, #0
 800bdae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bdba:	78fa      	ldrb	r2, [r7, #3]
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7f8 f95d 	bl	800407e <HAL_PCD_EP_Close>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	d816      	bhi.n	800bdfc <USBD_LL_CloseEP+0x5c>
 800bdce:	a201      	add	r2, pc, #4	; (adr r2, 800bdd4 <USBD_LL_CloseEP+0x34>)
 800bdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd4:	0800bde5 	.word	0x0800bde5
 800bdd8:	0800bdeb 	.word	0x0800bdeb
 800bddc:	0800bdf1 	.word	0x0800bdf1
 800bde0:	0800bdf7 	.word	0x0800bdf7
    case HAL_OK :
      usb_status = USBD_OK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	73fb      	strb	r3, [r7, #15]
    break;
 800bde8:	e00b      	b.n	800be02 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdea:	2303      	movs	r3, #3
 800bdec:	73fb      	strb	r3, [r7, #15]
    break;
 800bdee:	e008      	b.n	800be02 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	73fb      	strb	r3, [r7, #15]
    break;
 800bdf4:	e005      	b.n	800be02 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdf6:	2303      	movs	r3, #3
 800bdf8:	73fb      	strb	r3, [r7, #15]
    break;
 800bdfa:	e002      	b.n	800be02 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bdfc:	2303      	movs	r3, #3
 800bdfe:	73fb      	strb	r3, [r7, #15]
    break;
 800be00:	bf00      	nop
  }
  return usb_status;
 800be02:	7bfb      	ldrb	r3, [r7, #15]
}
 800be04:	4618      	mov	r0, r3
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	460b      	mov	r3, r1
 800be16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be18:	2300      	movs	r3, #0
 800be1a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be26:	78fa      	ldrb	r2, [r7, #3]
 800be28:	4611      	mov	r1, r2
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7f8 fa04 	bl	8004238 <HAL_PCD_EP_SetStall>
 800be30:	4603      	mov	r3, r0
 800be32:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800be34:	7bbb      	ldrb	r3, [r7, #14]
 800be36:	2b03      	cmp	r3, #3
 800be38:	d816      	bhi.n	800be68 <USBD_LL_StallEP+0x5c>
 800be3a:	a201      	add	r2, pc, #4	; (adr r2, 800be40 <USBD_LL_StallEP+0x34>)
 800be3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be40:	0800be51 	.word	0x0800be51
 800be44:	0800be57 	.word	0x0800be57
 800be48:	0800be5d 	.word	0x0800be5d
 800be4c:	0800be63 	.word	0x0800be63
    case HAL_OK :
      usb_status = USBD_OK;
 800be50:	2300      	movs	r3, #0
 800be52:	73fb      	strb	r3, [r7, #15]
    break;
 800be54:	e00b      	b.n	800be6e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be56:	2303      	movs	r3, #3
 800be58:	73fb      	strb	r3, [r7, #15]
    break;
 800be5a:	e008      	b.n	800be6e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be5c:	2301      	movs	r3, #1
 800be5e:	73fb      	strb	r3, [r7, #15]
    break;
 800be60:	e005      	b.n	800be6e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be62:	2303      	movs	r3, #3
 800be64:	73fb      	strb	r3, [r7, #15]
    break;
 800be66:	e002      	b.n	800be6e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800be68:	2303      	movs	r3, #3
 800be6a:	73fb      	strb	r3, [r7, #15]
    break;
 800be6c:	bf00      	nop
  }
  return usb_status;
 800be6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	460b      	mov	r3, r1
 800be82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be84:	2300      	movs	r3, #0
 800be86:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be88:	2300      	movs	r3, #0
 800be8a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be92:	78fa      	ldrb	r2, [r7, #3]
 800be94:	4611      	mov	r1, r2
 800be96:	4618      	mov	r0, r3
 800be98:	f7f8 fa30 	bl	80042fc <HAL_PCD_EP_ClrStall>
 800be9c:	4603      	mov	r3, r0
 800be9e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bea0:	7bbb      	ldrb	r3, [r7, #14]
 800bea2:	2b03      	cmp	r3, #3
 800bea4:	d816      	bhi.n	800bed4 <USBD_LL_ClearStallEP+0x5c>
 800bea6:	a201      	add	r2, pc, #4	; (adr r2, 800beac <USBD_LL_ClearStallEP+0x34>)
 800bea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beac:	0800bebd 	.word	0x0800bebd
 800beb0:	0800bec3 	.word	0x0800bec3
 800beb4:	0800bec9 	.word	0x0800bec9
 800beb8:	0800becf 	.word	0x0800becf
    case HAL_OK :
      usb_status = USBD_OK;
 800bebc:	2300      	movs	r3, #0
 800bebe:	73fb      	strb	r3, [r7, #15]
    break;
 800bec0:	e00b      	b.n	800beda <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bec2:	2303      	movs	r3, #3
 800bec4:	73fb      	strb	r3, [r7, #15]
    break;
 800bec6:	e008      	b.n	800beda <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bec8:	2301      	movs	r3, #1
 800beca:	73fb      	strb	r3, [r7, #15]
    break;
 800becc:	e005      	b.n	800beda <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bece:	2303      	movs	r3, #3
 800bed0:	73fb      	strb	r3, [r7, #15]
    break;
 800bed2:	e002      	b.n	800beda <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bed4:	2303      	movs	r3, #3
 800bed6:	73fb      	strb	r3, [r7, #15]
    break;
 800bed8:	bf00      	nop
  }
  return usb_status;
 800beda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	460b      	mov	r3, r1
 800beee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bef6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800befc:	2b00      	cmp	r3, #0
 800befe:	da0b      	bge.n	800bf18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bf00:	78fb      	ldrb	r3, [r7, #3]
 800bf02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf06:	68f9      	ldr	r1, [r7, #12]
 800bf08:	4613      	mov	r3, r2
 800bf0a:	00db      	lsls	r3, r3, #3
 800bf0c:	4413      	add	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	440b      	add	r3, r1
 800bf12:	333e      	adds	r3, #62	; 0x3e
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	e00b      	b.n	800bf30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bf18:	78fb      	ldrb	r3, [r7, #3]
 800bf1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf1e:	68f9      	ldr	r1, [r7, #12]
 800bf20:	4613      	mov	r3, r2
 800bf22:	00db      	lsls	r3, r3, #3
 800bf24:	4413      	add	r3, r2
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	440b      	add	r3, r1
 800bf2a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bf2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3714      	adds	r7, #20
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	460b      	mov	r3, r1
 800bf46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf56:	78fa      	ldrb	r2, [r7, #3]
 800bf58:	4611      	mov	r1, r2
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7f8 f802 	bl	8003f64 <HAL_PCD_SetAddress>
 800bf60:	4603      	mov	r3, r0
 800bf62:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bf64:	7bbb      	ldrb	r3, [r7, #14]
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	d816      	bhi.n	800bf98 <USBD_LL_SetUSBAddress+0x5c>
 800bf6a:	a201      	add	r2, pc, #4	; (adr r2, 800bf70 <USBD_LL_SetUSBAddress+0x34>)
 800bf6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf70:	0800bf81 	.word	0x0800bf81
 800bf74:	0800bf87 	.word	0x0800bf87
 800bf78:	0800bf8d 	.word	0x0800bf8d
 800bf7c:	0800bf93 	.word	0x0800bf93
    case HAL_OK :
      usb_status = USBD_OK;
 800bf80:	2300      	movs	r3, #0
 800bf82:	73fb      	strb	r3, [r7, #15]
    break;
 800bf84:	e00b      	b.n	800bf9e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf86:	2303      	movs	r3, #3
 800bf88:	73fb      	strb	r3, [r7, #15]
    break;
 800bf8a:	e008      	b.n	800bf9e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	73fb      	strb	r3, [r7, #15]
    break;
 800bf90:	e005      	b.n	800bf9e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf92:	2303      	movs	r3, #3
 800bf94:	73fb      	strb	r3, [r7, #15]
    break;
 800bf96:	e002      	b.n	800bf9e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bf98:	2303      	movs	r3, #3
 800bf9a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf9c:	bf00      	nop
  }
  return usb_status;
 800bf9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3710      	adds	r7, #16
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b086      	sub	sp, #24
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	607a      	str	r2, [r7, #4]
 800bfb2:	603b      	str	r3, [r7, #0]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bfc6:	7af9      	ldrb	r1, [r7, #11]
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	f7f8 f8f7 	bl	80041be <HAL_PCD_EP_Transmit>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bfd4:	7dbb      	ldrb	r3, [r7, #22]
 800bfd6:	2b03      	cmp	r3, #3
 800bfd8:	d816      	bhi.n	800c008 <USBD_LL_Transmit+0x60>
 800bfda:	a201      	add	r2, pc, #4	; (adr r2, 800bfe0 <USBD_LL_Transmit+0x38>)
 800bfdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe0:	0800bff1 	.word	0x0800bff1
 800bfe4:	0800bff7 	.word	0x0800bff7
 800bfe8:	0800bffd 	.word	0x0800bffd
 800bfec:	0800c003 	.word	0x0800c003
    case HAL_OK :
      usb_status = USBD_OK;
 800bff0:	2300      	movs	r3, #0
 800bff2:	75fb      	strb	r3, [r7, #23]
    break;
 800bff4:	e00b      	b.n	800c00e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bff6:	2303      	movs	r3, #3
 800bff8:	75fb      	strb	r3, [r7, #23]
    break;
 800bffa:	e008      	b.n	800c00e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bffc:	2301      	movs	r3, #1
 800bffe:	75fb      	strb	r3, [r7, #23]
    break;
 800c000:	e005      	b.n	800c00e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c002:	2303      	movs	r3, #3
 800c004:	75fb      	strb	r3, [r7, #23]
    break;
 800c006:	e002      	b.n	800c00e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c008:	2303      	movs	r3, #3
 800c00a:	75fb      	strb	r3, [r7, #23]
    break;
 800c00c:	bf00      	nop
  }
  return usb_status;
 800c00e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3718      	adds	r7, #24
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b086      	sub	sp, #24
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	607a      	str	r2, [r7, #4]
 800c022:	603b      	str	r3, [r7, #0]
 800c024:	460b      	mov	r3, r1
 800c026:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c028:	2300      	movs	r3, #0
 800c02a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c036:	7af9      	ldrb	r1, [r7, #11]
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	f7f8 f869 	bl	8004112 <HAL_PCD_EP_Receive>
 800c040:	4603      	mov	r3, r0
 800c042:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c044:	7dbb      	ldrb	r3, [r7, #22]
 800c046:	2b03      	cmp	r3, #3
 800c048:	d816      	bhi.n	800c078 <USBD_LL_PrepareReceive+0x60>
 800c04a:	a201      	add	r2, pc, #4	; (adr r2, 800c050 <USBD_LL_PrepareReceive+0x38>)
 800c04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c050:	0800c061 	.word	0x0800c061
 800c054:	0800c067 	.word	0x0800c067
 800c058:	0800c06d 	.word	0x0800c06d
 800c05c:	0800c073 	.word	0x0800c073
    case HAL_OK :
      usb_status = USBD_OK;
 800c060:	2300      	movs	r3, #0
 800c062:	75fb      	strb	r3, [r7, #23]
    break;
 800c064:	e00b      	b.n	800c07e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c066:	2303      	movs	r3, #3
 800c068:	75fb      	strb	r3, [r7, #23]
    break;
 800c06a:	e008      	b.n	800c07e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c06c:	2301      	movs	r3, #1
 800c06e:	75fb      	strb	r3, [r7, #23]
    break;
 800c070:	e005      	b.n	800c07e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c072:	2303      	movs	r3, #3
 800c074:	75fb      	strb	r3, [r7, #23]
    break;
 800c076:	e002      	b.n	800c07e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c078:	2303      	movs	r3, #3
 800c07a:	75fb      	strb	r3, [r7, #23]
    break;
 800c07c:	bf00      	nop
  }
  return usb_status;
 800c07e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3718      	adds	r7, #24
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	460b      	mov	r3, r1
 800c092:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c09a:	78fa      	ldrb	r2, [r7, #3]
 800c09c:	4611      	mov	r1, r2
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7f8 f875 	bl	800418e <HAL_PCD_EP_GetRxCount>
 800c0a4:	4603      	mov	r3, r0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3708      	adds	r7, #8
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
	...

0800c0b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c0bc:	78fb      	ldrb	r3, [r7, #3]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d002      	beq.n	800c0c8 <HAL_PCDEx_LPM_Callback+0x18>
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d01f      	beq.n	800c106 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c0c6:	e03b      	b.n	800c140 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6a1b      	ldr	r3, [r3, #32]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d007      	beq.n	800c0e0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c0d0:	f000 f854 	bl	800c17c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0d4:	4b1c      	ldr	r3, [pc, #112]	; (800c148 <HAL_PCDEx_LPM_Callback+0x98>)
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	4a1b      	ldr	r2, [pc, #108]	; (800c148 <HAL_PCDEx_LPM_Callback+0x98>)
 800c0da:	f023 0306 	bic.w	r3, r3, #6
 800c0de:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	6812      	ldr	r2, [r2, #0]
 800c0ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c0f2:	f023 0301 	bic.w	r3, r3, #1
 800c0f6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fe fa96 	bl	800a630 <USBD_LL_Resume>
    break;
 800c104:	e01c      	b.n	800c140 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	6812      	ldr	r2, [r2, #0]
 800c114:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c118:	f043 0301 	orr.w	r3, r3, #1
 800c11c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c124:	4618      	mov	r0, r3
 800c126:	f7fe fa6d 	bl	800a604 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a1b      	ldr	r3, [r3, #32]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d005      	beq.n	800c13e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c132:	4b05      	ldr	r3, [pc, #20]	; (800c148 <HAL_PCDEx_LPM_Callback+0x98>)
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	4a04      	ldr	r2, [pc, #16]	; (800c148 <HAL_PCDEx_LPM_Callback+0x98>)
 800c138:	f043 0306 	orr.w	r3, r3, #6
 800c13c:	6113      	str	r3, [r2, #16]
    break;
 800c13e:	bf00      	nop
}
 800c140:	bf00      	nop
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	e000ed00 	.word	0xe000ed00

0800c14c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c154:	4b03      	ldr	r3, [pc, #12]	; (800c164 <USBD_static_malloc+0x18>)
}
 800c156:	4618      	mov	r0, r3
 800c158:	370c      	adds	r7, #12
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	200001dc 	.word	0x200001dc

0800c168 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]

}
 800c170:	bf00      	nop
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c180:	f7f4 fd76 	bl	8000c70 <SystemClock_Config>
}
 800c184:	bf00      	nop
 800c186:	bd80      	pop	{r7, pc}

0800c188 <__libc_init_array>:
 800c188:	b570      	push	{r4, r5, r6, lr}
 800c18a:	4d0d      	ldr	r5, [pc, #52]	; (800c1c0 <__libc_init_array+0x38>)
 800c18c:	4c0d      	ldr	r4, [pc, #52]	; (800c1c4 <__libc_init_array+0x3c>)
 800c18e:	1b64      	subs	r4, r4, r5
 800c190:	10a4      	asrs	r4, r4, #2
 800c192:	2600      	movs	r6, #0
 800c194:	42a6      	cmp	r6, r4
 800c196:	d109      	bne.n	800c1ac <__libc_init_array+0x24>
 800c198:	4d0b      	ldr	r5, [pc, #44]	; (800c1c8 <__libc_init_array+0x40>)
 800c19a:	4c0c      	ldr	r4, [pc, #48]	; (800c1cc <__libc_init_array+0x44>)
 800c19c:	f000 f820 	bl	800c1e0 <_init>
 800c1a0:	1b64      	subs	r4, r4, r5
 800c1a2:	10a4      	asrs	r4, r4, #2
 800c1a4:	2600      	movs	r6, #0
 800c1a6:	42a6      	cmp	r6, r4
 800c1a8:	d105      	bne.n	800c1b6 <__libc_init_array+0x2e>
 800c1aa:	bd70      	pop	{r4, r5, r6, pc}
 800c1ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1b0:	4798      	blx	r3
 800c1b2:	3601      	adds	r6, #1
 800c1b4:	e7ee      	b.n	800c194 <__libc_init_array+0xc>
 800c1b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ba:	4798      	blx	r3
 800c1bc:	3601      	adds	r6, #1
 800c1be:	e7f2      	b.n	800c1a6 <__libc_init_array+0x1e>
 800c1c0:	0800c280 	.word	0x0800c280
 800c1c4:	0800c280 	.word	0x0800c280
 800c1c8:	0800c280 	.word	0x0800c280
 800c1cc:	0800c284 	.word	0x0800c284

0800c1d0 <memset>:
 800c1d0:	4402      	add	r2, r0
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d100      	bne.n	800c1da <memset+0xa>
 800c1d8:	4770      	bx	lr
 800c1da:	f803 1b01 	strb.w	r1, [r3], #1
 800c1de:	e7f9      	b.n	800c1d4 <memset+0x4>

0800c1e0 <_init>:
 800c1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e2:	bf00      	nop
 800c1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1e6:	bc08      	pop	{r3}
 800c1e8:	469e      	mov	lr, r3
 800c1ea:	4770      	bx	lr

0800c1ec <_fini>:
 800c1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ee:	bf00      	nop
 800c1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1f2:	bc08      	pop	{r3}
 800c1f4:	469e      	mov	lr, r3
 800c1f6:	4770      	bx	lr
